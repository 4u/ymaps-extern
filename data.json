[
  {
    "name": "Balloon",
    "url": "Balloon.xml",
    "def": {
      "name": "Balloon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "property": "",
          "type": "Map",
          "required": true,
          "description": "Ссылка на объект карты."
        },
        {
          "param": "data",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "autoPan",
              "type": "Boolean",
              "required": false,
              "description": "Сдвигать карту, чтобы отобразить открывшийся балун. Значение по умолчанию: true"
            },
            {
              "param": "autoPanDuration",
              "type": "Number",
              "required": false,
              "description": "Длительность перемещения к точке балуна (в мс). Значение по умолчанию: 500"
            },
            {
              "param": "autoPanMargin",
              "type": "Number",
              "required": false,
              "description": "Отступ от угла viewport-а карты при действии autoPan."
            },
            {
              "param": "closeButton",
              "type": "Boolean",
              "required": false,
              "description": "Флаг наличия кнопки закрытия. Значение по умолчанию: true"
            },
            {
              "param": "closeButtonLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет кнопки закрытия. (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "contentBodyLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет для основной части содержимого балуна. (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "contentFooterLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет для нижней части содержимого балуна. (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "contentHeaderLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет для заголовка содержимого балуна. (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "contentLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет для содержимого балуна. (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Ключ модели интерактивности. Доступные ключи и их значения перечислены в описании interactivityModel.storage. Значение по умолчанию: 'default#opaque'"
            },
            {
              "param": "layout",
              "type": "Function|String",
              "required": false,
              "description": "Внешний макет балуна. (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "maxHeight",
              "type": "Number",
              "required": false,
              "description": "Максимальная высота, в пикселах."
            },
            {
              "param": "maxWidth",
              "type": "Number",
              "required": false,
              "description": "Максимальная ширина, в пикселах."
            },
            {
              "param": "minHeight",
              "type": "Number",
              "required": false,
              "description": "Минимальная высота, в пикселах."
            },
            {
              "param": "minWidth",
              "type": "Number",
              "required": false,
              "description": "Минимальная ширина, в пикселах."
            },
            {
              "param": "offset",
              "type": "Number[]",
              "required": false,
              "description": "Смещение позиции."
            },
            {
              "param": "shadow",
              "type": "Boolean",
              "required": false,
              "description": "Флаг наличия тени. Значение по умолчанию: true"
            },
            {
              "param": "shadowLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет тени. (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            }
          ]
        }
      ],
      "methods": [
        {
          "name": "autoPan",
          "return": "Balloon",
          "description": "Автоматически cмещает центр карты таким образом, чтобы балун оказался в видимой области."
        },
        {
          "name": "close",
          "return": "Balloon",
          "description": "Закрывает балун."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает данные балуна."
        },
        {
          "name": "getOverlay",
          "return": "overlay.html.Balloon",
          "description": "Возвращает ссылку на оверлей балуна."
        },
        {
          "name": "getPosition",
          "return": "Number[]",
          "description": "Возвращает координаты балуна."
        },
        {
          "name": "isOpen",
          "return": "Boolean",
          "description": "Возвращает состояние балуна: открыт/закрыт."
        },
        {
          "name": "open",
          "return": "Balloon",
          "description": "Открывает балун на карте в точке с заданными координатами. Если балун уже открыт, перемещает его в указанную точку.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "description": "Координаты балуна."
            }
          ]
        },
        {
          "name": "setData",
          "return": "Balloon",
          "description": "Устанавливает данные балуна.",
          "params": [
            {
              "param": "data",
              "type": "Object",
              "required": true,
              "description": "Данные."
            }
          ]
        },
        {
          "name": "setPosition",
          "return": "Balloon",
          "description": "Устанавливает новую позицию балуна.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Новые координаты."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "behavior.DblClickZoom",
    "url": "behavior.DblClickZoom.xml",
    "def": {
      "name": "behavior.DblClickZoom",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "centering",
              "type": "Boolean",
              "description": "true - при двойном щелчке мышью карта масштабируется так, что точка под курсором мыши становится новым центром карты; false - точка под курсором мыши сохраняет свое положение при масштабировании двойным щелчком. Значение по умолчанию: true"
            },
            {
              "param": "duration",
              "type": "Number",
              "description": "Время анимации масштабирования двойным щелком кнопки мыши (0 - анимации нет). Значение по умолчанию: 200"
            }
          ]
        }
      ],
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение. Унаследован от IBehavior."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение. Унаследован от IBehavior."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение. Унаследован от IBehavior."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "behavior.Drag",
    "url": "behavior.Drag.xml",
    "def": {
      "name": "behavior.Drag",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "actionCursor",
              "type": "String",
              "description": "Курсор для поведения behavior.Drag при перетаскивании карты. Значение по умолчанию: 'grabbing'"
            },
            {
              "param": "cursor",
              "type": "String",
              "description": "Курсор для поведения behavior.Drag при наведении на карту. Значение по умолчанию: 'grab'"
            },
            {
              "param": "inertia",
              "type": "Boolean",
              "description": "Включает кинетическую инерцию движения в конце перетаскивания. Значение по умолчанию: true"
            },
            {
              "param": "inertiaDuration",
              "type": "Number",
              "description": "Продолжительность инерции в мс. Значение по умолчанию: 400"
            },
            {
              "param": "tremor",
              "type": "Integer",
              "description": "Минимальное смещение курсора после нажатия кнопки мыши, после которого начинает двигаться карта. Значение по умолчанию: 2"
            }
          ]
        }
      ],
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение. Унаследован от IBehavior."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение. Унаследован от IBehavior."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение. Унаследован от IBehavior."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "behavior.LeftMouseButtonMagnifier",
    "url": "behavior.LeftMouseButtonMagnifier.xml",
    "def": {
      "name": "behavior.LeftMouseButtonMagnifier",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "actionCursor",
              "type": "String",
              "description": "Курсор во время выбора области для увеличения при включенном поведении behavior.LeftMouseButtonMagnifier. Значение по умолчанию: 'crosshair'"
            },
            {
              "param": "cursor",
              "type": "String",
              "description": "Курсор при включенном поведении behavior.LeftMouseButtonMagnifier. Значение по умолчанию: 'zoom'"
            },
            {
              "param": "duration",
              "type": "Number",
              "description": "Продолжительность анимации увеличения области при использовании поведения behavior.LeftMouseButtonMagnifier, мс. Значение по умолчанию: 300"
            }
          ]
        }
      ],
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение. Унаследован от IBehavior."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение. Унаследован от IBehavior."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение. Унаследован от IBehavior."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "behavior.MultiTouch",
    "url": "behavior.MultiTouch.xml",
    "def": {
      "name": "behavior.MultiTouch",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "tremor",
              "type": "Number",
              "description": "Минимальное движение по экрану устройства (в пикселях), при котором сработает поведение behavior.MultiTouch. Значение по умолчанию: 2"
            }
          ]
        }
      ],
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение. Унаследован от IBehavior."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение. Унаследован от IBehavior."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение. Унаследован от IBehavior."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "behavior.RouteEditor",
    "url": "behavior.RouteEditor.xml",
    "def": {
      "name": "behavior.RouteEditor",
      "hasCtor": true,
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение. Унаследован от IBehavior."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение. Унаследован от IBehavior."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение. Унаследован от IBehavior."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "behavior.RightMouseButtonMagnifier",
    "url": "behavior.RightMouseButtonMagnifier.xml",
    "def": {
      "name": "behavior.RightMouseButtonMagnifier",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "actionCursor",
              "type": "String",
              "description": "Курсор во время выбора области для увеличения при включенном поведении behavior.RightMouseButtonMagnifier. Значение по умолчанию: 'crosshair'"
            },
            {
              "param": "duration",
              "type": "Number",
              "description": "Продолжительность анимации при выделении области при помощи поведения behavior.RightMouseButtonMagnifier, мс. Значение по умолчанию: 300"
            }
          ]
        }
      ],
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение. Унаследован от IBehavior."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение. Унаследован от IBehavior."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение. Унаследован от IBehavior."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "behavior.Ruler",
    "url": "behavior.Ruler.xml",
    "def": {
      "name": "behavior.Ruler",
      "hasCtor": true,
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "name": "close",
          "return": "",
          "description": "Удаляет все точки линейки. Если текущее количество точек больше двух, то будет выведен запрос на подтверждение действия."
        },
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение. Унаследован от IBehavior."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение. Унаследован от IBehavior."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getState",
          "return": "String",
          "description": "Состояние линейки описывается строкой, состоящей из последовательностей, разделяемых символом \"~\". Каждая последовательность представляет собой подстроку вида \"долгота,широта\" и описывает приращение координат относительно предыдущей точки линейки."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение. Унаследован от IBehavior."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setState",
          "return": "",
          "description": "Восстанавливает состояние линейки из закодированной строки. Смотрите behavior.Ruler.getState.",
          "params": [
            {
              "param": "state",
              "type": "String",
              "required": true,
              "description": "Закодированное состояние линейки."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "geometry",
          "type": "geometry.LineString",
          "description": "Геометрия поведения \"Линейка\"."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "behavior.storage",
    "url": "behavior.storage.xml",
    "def": {
      "name": "behavior.storage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "behavior.ScrollZoom",
    "url": "behavior.ScrollZoom.xml",
    "def": {
      "name": "behavior.ScrollZoom",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "maximumDelta",
              "type": "Number",
              "description": "Максимальное возможное изменение, на которое можно изменить зум карты при одном событии скролла (непрерывным вращением колеса мыши). При достижении этого лимита карта перерисовывается (показываются тайлы для достигнутого уровня масштаба). Значение по умолчанию: 5"
            },
            {
              "param": "speed",
              "type": "Number",
              "description": "Скорость увеличения/уменьшения масштаба карты при включенном поведении behavior.ScrollZoom, уровней масштаба в секунду. Значение по умолчанию: 5"
            }
          ]
        }
      ],
      "inherits": [
        "IBehavior"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение. Унаследован от IBehavior."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение. Унаследован от IBehavior."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение. Унаследован от IBehavior."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "cluster.Balloon",
    "url": "cluster.Balloon.xml",
    "def": {
      "name": "cluster.Balloon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "cluster",
          "type": "IGeoObject",
          "required": true,
          "description": "Объект-кластер."
        }
      ],
      "methods": [
        {
          "name": "close",
          "return": "",
          "description": "Закрывает балун."
        },
        {
          "name": "isOpen",
          "return": "Boolean",
          "description": "Проверяет, открыт ли балун в данный момент."
        },
        {
          "name": "open",
          "return": "Balloon",
          "description": "Открывает балун.",
          "params": [
            {
              "param": "anchorPixels",
              "type": "Number[]",
              "description": "Точка привязки балуна в глобальных пиксельных координатах. По умолчанию используются текущие координаты центра карты."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий балуна геообъекта."
        }
      ]
    }
  },
  {
    "name": "Cluster",
    "url": "Cluster.xml",
    "def": {
      "name": "Cluster",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPointGeometry",
          "required": true,
          "description": "Геометрия кластера."
        },
        {
          "param": "properties",
          "property": "",
          "type": "IDataManager",
          "required": true,
          "description": "Данные кластера.",
          "properties": [
            {
              "param": "geoObjects",
              "type": "IGeoObject[]",
              "required": true,
              "description": "Массив геообъектов, которые находятся в данном кластере."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции кластера. Опции балуна кластера указываются с префиксом 'balloon'.",
          "properties": [
            {
              "param": "balloonHeight",
              "type": "Number",
              "required": false,
              "description": "Высота балуна кластера. Значение по умолчанию: 210"
            },
            {
              "param": "balloonMainContentLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет отображения данных геообъекта в балуне кластера (Тип: конструктор объекта с интерфейсом ILayout или ключ макета). Значение по умолчанию: 'cluster#balloonMainContent'"
            },
            {
              "param": "balloonSidebarItemLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет элемента списка в балуне кластера (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "balloonSidebarLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет отображения списка меток в балуне кластера (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "balloonSidebarWidth",
              "type": "Number",
              "required": false,
              "description": "Ширина поля со списком объектов в балуне кластера. Значение по умолчанию: 125"
            },
            {
              "param": "balloonWidth",
              "type": "Number",
              "required": false,
              "description": "Ширина балуна кластера. Значение по умолчанию: 475"
            },
            {
              "param": "cursor",
              "type": "String",
              "required": false,
              "description": "Курсор над меткой кластера. Значение по умолчанию: 'pointer'"
            },
            {
              "param": "disableClickZoom",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, запрещающий увеличение коэффициента масштабирования карты при клике на кластер. Значение по умолчанию: false"
            },
            {
              "param": "iconLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет метки кластера (Тип: конструктор объекта с интерфейсом ILayout или ключ макета). Значение по умолчанию: 'cluster#icon'"
            },
            {
              "param": "icons",
              "type": "Object[]",
              "required": false,
              "description": "Массив, описывающий иконки для стандартной реализации кластера."
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Модель интерактивности кластера. Доступные ключи и их значения перечислены в описании interactivityModel.Storage. Значение по умолчанию: 'default#geoObject'"
            },
            {
              "param": "numbers",
              "type": "Number[]",
              "required": false,
              "description": "Массив, описывающий граничные значения для размеров кластеров. Значение по умолчанию: [10, 100]"
            },
            {
              "param": "openBalloonOnClick",
              "type": "Boolean",
              "required": false,
              "description": "Опция, позволяющая запретить открытие балуна при клике на кластере. По умолчанию открытие балуна разрешено. Количество иконок, описанных в опции \"icons\", должно быть на 1 больше, чем чисел в данном массиве. Значение по умолчанию: true"
            }
          ]
        }
      ],
      "inherits": [
        "IGeoObject"
      ],
      "methods": [
        {
          "name": "getGeoObjects",
          "return": "IGeoObject[]",
          "description": "Возвращает массив геообъектов, образующих кластер."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "cluster.Balloon",
          "description": "Балун кластера."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние кластера. Определяется следующими полями: activeObject - Cсылка на активный объект кластера."
        }
      ]
    }
  },
  {
    "name": "Circle",
    "url": "Circle.xml",
    "def": {
      "name": "Circle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "ICircleGeometry|Number[][]|Object",
          "required": true,
          "description": "Ссылка на объект геометрии точки или массив, первый элемент которого координаты центра круга, второй - радиус в метрах, или объект с параметрами геометрии."
        },
        {
          "param": "properties",
          "type": "Object|IDataManager",
          "required": false,
          "description": "Данные геообъекта. Соответствуют данным класса GeoObject."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции геообъекта. Соответствуют опциям класса GeoObject."
        }
      ],
      "inherits": [
        "GeoObject",
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "editor",
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "hint",
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "control.Button",
    "url": "control.Button.xml",
    "def": {
      "name": "control.Button",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object|String",
          "description": "Параметры кнопки или строка - содержимое кнопки в виде HTML.",
          "properties": [
            {
              "param": "data",
              "type": "Object",
              "description": "Данные кнопки."
            },
            {
              "param": "data.content",
              "type": "String",
              "description": "Содержимое кнопки в виде HTML."
            },
            {
              "param": "data.image",
              "type": "String",
              "description": "Иконка кнопки, если есть."
            },
            {
              "param": "data.imageDisabled",
              "type": "String",
              "description": "Иконка для \"отключенного\" состояния кнопки."
            },
            {
              "param": "data.imageSelected",
              "type": "String",
              "description": "Иконка для \"выбранного\" состояния кнопки."
            },
            {
              "param": "data.title",
              "type": "String",
              "description": "Текст всплывающей подсказки, которая появляется при наведении на кнопку курсора мыши."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции кнопки.",
          "properties": [
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.Button.options; data - менеджер данных элемента управления control.Button.data; state - менеджер состояния элемента управления control.Button.state. Макет меняет свой внешний вид на основе данных, состояния и опций элемента управления. Элемент управления, в свою очередь, реагирует на интерфейсные события макета и меняет значения полей control.Button.state в зависимости от полученных команд. (Тип: конструктор объекта с интерфейсом ISelectableControlLayout или ключ макета)."
            },
            {
              "param": "minWidth",
              "type": "Number",
              "description": "Минимальная ширина кнопки. Значение по умолчанию: 0"
            },
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, left: 5 }"
            },
            {
              "param": "selectOnClick",
              "type": "Boolean",
              "description": "Опция, описывающая поведение кнопки. true - кнопка становится \"нажатой\" после клика; false - кнопка не меняет свой внешний вид после клика на нее. Значение по умолчанию: true"
            }
          ]
        }
      ],
      "inherits": [
        "ISelectableControl"
      ],
      "methods": [
        {
          "name": "deselect",
          "return": "",
          "description": "Отменяет выбор элемента управления (выключает). Унаследован от ISelectableControl."
        },
        {
          "name": "disable",
          "return": "",
          "description": "Делает элемент управления недоступным (запрещены пользовательские действия). Унаследован от ISelectableControl."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Делает элемент управления доступным (разрешены пользовательские действия). Унаследован от ISelectableControl."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Возвращает true - элемент управления доступен, false - недоступен. Унаследован от ISelectableControl."
        },
        {
          "name": "isSelected",
          "return": "Boolean",
          "description": "Возвращает true - элемент управления выбран, false - не выбран. Унаследован от ISelectableControl."
        },
        {
          "name": "select",
          "return": "",
          "description": "Выбирает (включает) элемент управления. Унаследован от ISelectableControl."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние кнопки. Имена полей, доступных через метод data.Manager.get: selected - признак, нажата ли кнопка; enabled - признак, активна ли кнопка."
        }
      ]
    }
  },
  {
    "name": "Clusterer",
    "url": "Clusterer.xml",
    "def": {
      "name": "Clusterer",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции. Опции для дочерних объектов-кластеров задаются с префиксом cluster.",
          "properties": [
            {
              "param": "gridSize",
              "type": "Number",
              "description": "Размер ячейки кластера в пикселях. Значение по умолчанию: 64"
            },
            {
              "param": "margin",
              "type": "Number|Number[]",
              "description": "Число или массив чисел, задающие отступ для центра кластера относительно ячеек кластеризации. Если задано одно число - оно применяется ко всем сторонам. Если задано два - то это горизонтальные и вертикальные отступы соответственно. Если задан массив из 4х чисел, то это отступы top, right, bottom, left"
            },
            {
              "param": "maxZoom",
              "type": "Number[]",
              "description": "Максимальный коэффициент масштабирования карты, на котором происходит кластеризация объектов. Даже если кластеризация отключена, будут показаны только объекты в видимой области карты. Значение по умолчанию: 23"
            },
            {
              "param": "minClusterSize",
              "type": "Number",
              "description": "Минимальное количество объектов, образующих кластер. Значение по умолчанию: 1"
            },
            {
              "param": "showInAlphabeticalOrder",
              "type": "Boolean",
              "description": "Показывать метки в балуне в алфавитном порядке при нажатии на кластер. Геообъекты кластера сортируются по специальным полям в данных этих геообъектов - clusterCaption (или balloonContentHeader, если предыдущее поле не определено). По умолчанию геообъекты показываются в порядке добавления в кластеризатор. Значение по умолчанию: false"
            },
            {
              "param": "synchAdd",
              "type": "Boolean",
              "description": "Добавлять объекты на карту сразу. По умолчанию объекты добавляются на карту группами через определенные интервалы времени. Это делается для того, чтобы медленные браузеры справлялись с нагрузкой. Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "ICollection"
      ],
      "methods": [
        {
          "name": "add",
          "return": "Clusterer",
          "description": "Добавляет геообъект или массив геообъектов в кластеризатор.",
          "params": [
            {
              "param": "objects",
              "type": "IGeoObject|IGeoObject[]",
              "required": true,
              "description": "Массив геообъектов или единичный геообъект."
            }
          ]
        },
        {
          "name": "createCluster",
          "return": "IGeoObject",
          "description": "Функция для создания кластера кластеризатором. Вызывается кластеризатором непосредственно в процессе кластеризации. Принимает на вход центр кластера и массив геообъектов, попадающих в данный кластер. Возвращает кластер, который потом будет добавлен на карту. Если требуется, чтобы кластеризатор создавал пользовательские объекты-кластеры, следует переопределить этот метод у кластеризатора.",
          "params": [
            {
              "param": "center",
              "type": "Number[]",
              "required": true,
              "description": "Центр кластера в геокоординатах."
            },
            {
              "param": "geoObjects",
              "type": "IGeoObject[]",
              "required": true,
              "description": "Массив плейсмарков в кластере."
            }
          ]
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getObjectState",
          "return": "Object",
          "description": "Функция для получения информации о текущем состоянии объекта, добавленного в кластеризатор.",
          "params": [
            {
              "param": "object",
              "type": "IGeoObject",
              "required": true,
              "description": "Гео-объект, для которого нужно получить состояние."
            }
          ]
        },
        {
          "name": "refresh",
          "return": "Clusterer",
          "description": "Функция, которая заново генерирует кластеры из геообъектов и отображает их на карте."
        },
        {
          "name": "remove",
          "return": "Clusterer",
          "description": "Удаляет геообъекты из кластеризатора.",
          "params": [
            {
              "param": "objects",
              "type": "IGeoObject|IGeoObject[]",
              "required": true,
              "description": "Массив геообъектов."
            }
          ]
        },
        {
          "name": "removeAll",
          "return": "Clusterer",
          "description": "Удаляет все геообъекты из кластеризатора."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "option.Manager",
          "description": "Менеджер опций кластера."
        }
      ]
    }
  },
  {
    "name": "control.Group",
    "url": "control.Group.xml",
    "def": {
      "name": "control.Group",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object|IControl[]",
          "description": "Настройки группы элементов управления. Если в качестве настроек передан массив элементов управления, он трактуется как список дочерних элементов.",
          "properties": [
            {
              "param": "items",
              "type": "IControl[]",
              "description": "Список дочерних элементов."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, left: 5 }"
            }
          ]
        }
      ],
      "inherits": [
        "IControl",
        "IControlParent",
        "ICustomizable",
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "name": "add",
          "return": "control.Group",
          "description": "Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: \"mapTools\" - стандартный тулбар с кнопками \"Навигация\", \"Выделение\" и \"Линейка\" control.MapTools; \"miniMap\" - обзорная карта control.MiniMap; \"scaleLine\" - масштабный отрезок control.ScaleLine; \"searchControl\" - панель поиска control.SearchControl; \"trafficControl\" - панель пробок control.TrafficControl; \"typeSelector\" - панель переключения типа карты control.TypeSelector; \"zoomControl\" - ползунок масштаба control.ZoomControl; \"smallZoomControl\" - простой ползунок масштаба control.SmallZoomControl.",
          "params": [
            {
              "param": "item",
              "type": "IControl|String",
              "required": true,
              "description": "Элемент управления или его ключ."
            },
            {
              "param": "positionIndex",
              "type": "Integer",
              "required": false,
              "description": "Позиция вставки элемента. Если не задана, элемент добавляется в конец списка."
            }
          ]
        },
        {
          "name": "each",
          "return": "control.Group",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст выполнения функции."
            }
          ]
        },
        {
          "name": "filter",
          "return": "IChildOnMap[]",
          "description": "Функция для выборки дочерних элементов по условию.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик дочерних элементов контрола. Получает на вход ссылку на элемент контрола и возвращает значение true/false. Дочерние элементы, для которых функция-обработчик возвращает true, будут добавлены в результирующий массив."
            }
          ]
        },
        {
          "name": "get",
          "return": "IChildOnMap",
          "description": "Возвращает ссылку на объект контрола, добавленного по ключу или по индексу.",
          "params": [
            {
              "param": "key",
              "type": "String|Number",
              "required": true,
              "description": ""
            }
          ]
        },
        {
          "name": "getAll",
          "return": "IChildOnMap[]",
          "description": "Возвращает массив дочерних элементов контрола."
        },
        {
          "name": "getChildElement",
          "return": "HTMLElement",
          "description": "Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent."
        },
        {
          "name": "getContainer",
          "return": "HTMLElement",
          "description": "Возвращает контейнер, в который добавляются дочерние элементы контрола."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "indexOf",
          "return": "Integer",
          "description": "Возвращает индекс дочернего элемента в группе.",
          "params": [
            {
              "param": "childToFind",
              "type": "String|IControl",
              "required": true,
              "description": "Дочерний элемент или его ключ."
            }
          ]
        },
        {
          "name": "length",
          "return": "Number",
          "description": "Возвращает количество дочерних элементов."
        },
        {
          "name": "remove",
          "return": "control.Group",
          "description": "Удаляет элемент управления из группы.",
          "params": [
            {
              "param": "item",
              "type": "IControl|String",
              "required": true,
              "description": "Элемент управления или его ключ."
            }
          ]
        },
        {
          "name": "removeAll",
          "return": "control.Group",
          "description": "Удаляет все дочерние элементы из группы."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "control.ListBoxItem",
    "url": "control.ListBoxItem.xml",
    "def": {
      "name": "control.ListBoxItem",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object|String",
          "description": "Параметры элемента либо строка - контент элемента.",
          "properties": [
            {
              "param": "data",
              "type": "Object",
              "description": "Данные элемента."
            },
            {
              "param": "data.content",
              "type": "String",
              "description": "Содержимое элемента."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции элемента управления.",
          "properties": [
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.ListBoxItem.options; data - менеджер данных элемента управления control.ListBoxItem.data; state - менеджер состояния элемента управления control.ListBoxItem.state. Макет меняет свой внешний вид на основе данных, состояния и опций элемента управления. Элемент управления, в свою очередь, реагирует на интерфейсные события макета и меняет значения полей control.ListBoxItem.state в зависимости от полученных команд. (Тип: конструктор объекта с интерфейсом ISelectableControlLayout или ключ макета)."
            },
            {
              "param": "selectOnClick",
              "type": "Boolean",
              "description": "Флаг, разрешающий автоматическое выделение элемента списка по клику. Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "control.ListBox",
    "url": "control.ListBox.xml",
    "def": {
      "name": "control.ListBox",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object",
          "description": "Параметры элемента управления.",
          "properties": [
            {
              "param": "data",
              "type": "Object",
              "description": "Данные."
            },
            {
              "param": "data.title",
              "type": "String",
              "description": "Заголовок списка."
            },
            {
              "param": "items",
              "type": "IControl[]",
              "description": "Пункты списка."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции элемента управления.",
          "properties": [
            {
              "param": "expandOnClick",
              "type": "Boolean",
              "description": "Флаг, разрешающий автоматическое разворачивание/сворачивание списка по клику. Значение по умолчанию: true"
            },
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.ListBox.options; data - менеджер данных элемента управления control.ListBox.data; state - менеджер состояния элемента управления control.ListBox.state. Макет меняет свой внешний вид на основе данных, состояния и опций элемента управления. Элемент управления, в свою очередь, реагирует на интерфейсные события макета и меняет значения полей control.ListBox.state в зависимости от полученных команд. (Тип: конструктор объекта, реализующий интерфейсы: IGroupControlLayout; IExpandableControlLayout. или ключ макета)."
            },
            {
              "param": "minWidth",
              "type": "Number",
              "description": "Минимальная ширина выпадающего списка. Значение по умолчанию: 0"
            },
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, left: 5 }"
            },
            {
              "param": "сollapseTimeout",
              "type": "Number",
              "description": "Временной интервал, по истечении которого раскрытый список автоматически закрывается. Значение по умолчанию: 3000"
            }
          ]
        }
      ],
      "inherits": [
        "control.Group"
      ],
      "methods": [
        {
          "name": "add",
          "return": "control.Group",
          "description": "Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: \"mapTools\" - стандартный тулбар с кнопками \"Навигация\", \"Выделение\" и \"Линейка\" control.MapTools; \"miniMap\" - обзорная карта control.MiniMap; \"scaleLine\" - масштабный отрезок control.ScaleLine; \"searchControl\" - панель поиска control.SearchControl; \"trafficControl\" - панель пробок control.TrafficControl; \"typeSelector\" - панель переключения типа карты control.TypeSelector; \"zoomControl\" - ползунок масштаба control.ZoomControl; \"smallZoomControl\" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group."
        },
        {
          "name": "collapse",
          "return": "",
          "description": "Сворачивает список."
        },
        {
          "name": "each",
          "return": "control.Group",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group."
        },
        {
          "name": "expand",
          "return": "",
          "description": "Раскрывает список."
        },
        {
          "name": "filter",
          "return": "IChildOnMap[]",
          "description": "Функция для выборки дочерних элементов по условию. Унаследован от control.Group."
        },
        {
          "name": "get",
          "return": "IChildOnMap",
          "description": "Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group."
        },
        {
          "name": "getAll",
          "return": "IChildOnMap[]",
          "description": "Возвращает массив дочерних элементов контрола. Унаследован от control.Group."
        },
        {
          "name": "getChildElement",
          "return": "HTMLElement",
          "description": "Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent."
        },
        {
          "name": "getContainer",
          "return": "HTMLElement",
          "description": "Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "indexOf",
          "return": "Integer",
          "description": "Возвращает индекс дочернего элемента в группе. Унаследован от control.Group."
        },
        {
          "name": "isExpanded",
          "return": "Boolean",
          "description": "Возвращает признак того, находится ли контрол в развернутом состоянии."
        },
        {
          "name": "length",
          "return": "Number",
          "description": "Возвращает количество дочерних элементов. Унаследован от control.Group."
        },
        {
          "name": "remove",
          "return": "control.Group",
          "description": "Удаляет элемент управления из группы. Унаследован от control.Group."
        },
        {
          "name": "removeAll",
          "return": "control.Group",
          "description": "Удаляет все дочерние элементы из группы. Унаследован от control.Group."
        },
        {
          "name": "setMinWidth",
          "return": "",
          "description": "Устанавливает ширину списка.",
          "params": [
            {
              "param": "width",
              "type": "Number",
              "required": true,
              "description": "Ширина списка."
            }
          ]
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        },
        {
          "name": "setTitle",
          "return": "",
          "description": "Задает новый заголовок раскрывающегося списка.",
          "params": [
            {
              "param": "html",
              "type": "String",
              "required": true,
              "description": "Заголовок."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "data",
          "type": "data.Manager",
          "description": "Данные выпадающего списка. Имена полей, доступных через метод data.Manager.get: title - заголовок выпадающего списка."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние выпадающего списка. Имена полей, доступных через метод data.Manager.get: expanded - признак, раскрыт ли список."
        }
      ]
    }
  },
  {
    "name": "control.ListBoxSeparator",
    "url": "control.ListBoxSeparator.xml",
    "def": {
      "name": "control.ListBoxSeparator",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "data",
          "property": "",
          "type": "Object",
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет разделителя. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.ListBoxSeparator.options; data - менеджер данных элемента управления control.ListBoxSeparator.data; state - менеджер состояния элемента управления control.ListBoxSeparator.state. (Тип: конструктор объекта, реализующий интерфейс IControl, или ключ макета)."
            }
          ]
        }
      ],
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "control.MapTools",
    "url": "control.MapTools.xml",
    "def": {
      "name": "control.MapTools",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object|IControl[]|String[]",
          "description": "Параметры тулбара или список кнопок, которые будут добавлены по умолчанию.",
          "properties": [
            {
              "param": "items",
              "type": "IControl[]|String[]",
              "description": "Кнопки которые будут добавленны в тулбар. Могут задаваться экземплярами класса, реализующего интерфейс IControl, либо ключами. Для этих кнопок будет созданна специальная группа. Можно использовать следующие ключи: \"default\" - короткий синоним для стандартного набора кнопок; \"drag\" - кнопка \"Навигация\"; \"magnifier\" - кнопка \"Выделение\"; \"ruler\" - кнопка \"Линейка\". По умолчанию автоматически добавляются стандартные кнопки \"Навигация\", \"Выделение\" и \"Линейка\". Получить ссылку на группу, содержащую эти объекты, можно будет через метод getDefaultGroup."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции элемента управления.",
          "properties": [
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, right: 5 }"
            }
          ]
        }
      ],
      "inherits": [
        "control.ToolBar"
      ],
      "methods": [
        {
          "name": "add",
          "return": "control.Group",
          "description": "Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: \"mapTools\" - стандартный тулбар с кнопками \"Навигация\", \"Выделение\" и \"Линейка\" control.MapTools; \"miniMap\" - обзорная карта control.MiniMap; \"scaleLine\" - масштабный отрезок control.ScaleLine; \"searchControl\" - панель поиска control.SearchControl; \"trafficControl\" - панель пробок control.TrafficControl; \"typeSelector\" - панель переключения типа карты control.TypeSelector; \"zoomControl\" - ползунок масштаба control.ZoomControl; \"smallZoomControl\" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group."
        },
        {
          "name": "each",
          "return": "control.Group",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group."
        },
        {
          "name": "filter",
          "return": "IChildOnMap[]",
          "description": "Функция для выборки дочерних элементов по условию. Унаследован от control.Group."
        },
        {
          "name": "get",
          "return": "IChildOnMap",
          "description": "Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group."
        },
        {
          "name": "getAll",
          "return": "IChildOnMap[]",
          "description": "Возвращает массив дочерних элементов контрола. Унаследован от control.Group."
        },
        {
          "name": "getChildElement",
          "return": "HTMLElement",
          "description": "Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent."
        },
        {
          "name": "getContainer",
          "return": "HTMLElement",
          "description": "Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group."
        },
        {
          "name": "getDefaultGroup",
          "return": "control.RadioGroup",
          "description": "Возвращает ссылку на группу стандартных элементов управления картой."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "indexOf",
          "return": "Integer",
          "description": "Возвращает индекс дочернего элемента в группе. Унаследован от control.Group."
        },
        {
          "name": "length",
          "return": "Number",
          "description": "Возвращает количество дочерних элементов. Унаследован от control.Group."
        },
        {
          "name": "remove",
          "return": "control.Group",
          "description": "Удаляет элемент управления из группы. Унаследован от control.Group."
        },
        {
          "name": "removeAll",
          "return": "control.Group",
          "description": "Удаляет все дочерние элементы из группы. Унаследован от control.Group."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: contentWidth - общая ширина дочерних элементов. Унаследовано от control.ToolBar."
        }
      ]
    }
  },
  {
    "name": "control.MiniMap",
    "url": "control.MiniMap.xml",
    "def": {
      "name": "control.MiniMap",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "state",
          "property": "",
          "type": "Object",
          "description": "Состояние обзорной карты.",
          "properties": [
            {
              "param": "expanded",
              "type": "Boolean",
              "description": "true - обзорная карта развернута, false - свернута. Значение по умолчанию: true"
            },
            {
              "param": "type",
              "type": "String|MapType",
              "description": "Тип карты. Список доступных типов карты: 'yandex#map' - тип карты \"схема\"; 'yandex#satellite' - тип карты \"спутник\"; 'yandex#hybrid' - тип карты \"гибрид\"; 'yandex#publicMap' - тип карты \"народная карта\"; 'yandex#publicMapHybrid' - тип карты \"народный гибрид\". Ключи 'yandex#publicMap' и 'yandex#publicMapHybrid' доступны только для России и Украины. Значение по умолчанию: 'yandex#map'"
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции обзорной карты.",
          "properties": [
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.MiniMap.options; data - менеджер данных элемента управления control.MiniMap.data; state - менеджер состояния элемента управления control.MiniMap.state. Макет меняет свой внешний вид на основе данных, состояния и опций элемента управления. Элемент управления, в свою очередь, реагирует на интерфейсные события макета и меняет значения полей control.MiniMap.state в зависимости от полученных команд. (Тип: конструктор объекта с интерфейсом IExpandableControlLayout или ключ макета)."
            },
            {
              "param": "position",
              "type": "Object",
              "description": "Положение обзорной карты относительно контейнера основной карты. Значение по умолчанию: { left: 5, bottom: 5 }"
            },
            {
              "param": "size",
              "type": "Integer[]",
              "description": "Размеры обзорной карты. Значение по умолчанию: [128, 90]"
            },
            {
              "param": "zoomOffset",
              "type": "Number",
              "description": "Разность уровней масштабирования обзорной карты и основной карты. Значение по умолчанию: 5"
            }
          ]
        }
      ],
      "inherits": [
        "IChildOnMap"
      ],
      "methods": [
        {
          "name": "collapse",
          "return": "control.MiniMap",
          "description": "Сворачивает обзорную карту."
        },
        {
          "name": "expand",
          "return": "control.MiniMap",
          "description": "Разворачивает обзорную карту."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getType",
          "return": "String|MapType",
          "description": "Возвращает текущий тип карты."
        },
        {
          "name": "isExpanded",
          "return": "Boolean",
          "description": "Возвращает true - обзорная карта развернута, false - свёрнута."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setType",
          "return": "",
          "description": "Задаёт новый тип карты.",
          "params": [
            {
              "param": "newType",
              "type": "String|MapType",
              "required": true,
              "description": "Новый тип карты."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние мини-карты. Имена полей, доступных через метод data.Manager.get: type - тип мини-карты; expanded - признак, развернута ли панель."
        }
      ]
    }
  },
  {
    "name": "control.RadioGroup",
    "url": "control.RadioGroup.xml",
    "def": {
      "name": "control.RadioGroup",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object|ISelectableControl[]",
          "description": "Настройки группы элементов управления. Если в качестве настроек передан массив элементов управления, он трактуется как список дочерних элементов.",
          "properties": [
            {
              "param": "items",
              "type": "ISelectableControl[]",
              "description": "Список дочерних элементов."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, left: 5 }"
            }
          ]
        }
      ],
      "inherits": [
        "control.Group"
      ],
      "methods": [
        {
          "name": "add",
          "return": "control.Group",
          "description": "Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: \"mapTools\" - стандартный тулбар с кнопками \"Навигация\", \"Выделение\" и \"Линейка\" control.MapTools; \"miniMap\" - обзорная карта control.MiniMap; \"scaleLine\" - масштабный отрезок control.ScaleLine; \"searchControl\" - панель поиска control.SearchControl; \"trafficControl\" - панель пробок control.TrafficControl; \"typeSelector\" - панель переключения типа карты control.TypeSelector; \"zoomControl\" - ползунок масштаба control.ZoomControl; \"smallZoomControl\" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group."
        },
        {
          "name": "each",
          "return": "control.Group",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group."
        },
        {
          "name": "filter",
          "return": "IChildOnMap[]",
          "description": "Функция для выборки дочерних элементов по условию. Унаследован от control.Group."
        },
        {
          "name": "get",
          "return": "IChildOnMap",
          "description": "Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group."
        },
        {
          "name": "getAll",
          "return": "IChildOnMap[]",
          "description": "Возвращает массив дочерних элементов контрола. Унаследован от control.Group."
        },
        {
          "name": "getChildElement",
          "return": "HTMLElement",
          "description": "Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent."
        },
        {
          "name": "getContainer",
          "return": "HTMLElement",
          "description": "Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "getSelectedIndex",
          "return": "Number",
          "description": "Возвращает индекс выбранного элемента либо -1, если ни один элемент не выбран."
        },
        {
          "name": "indexOf",
          "return": "Integer",
          "description": "Возвращает индекс дочернего элемента в группе. Унаследован от control.Group."
        },
        {
          "name": "length",
          "return": "Number",
          "description": "Возвращает количество дочерних элементов. Унаследован от control.Group."
        },
        {
          "name": "remove",
          "return": "control.Group",
          "description": "Удаляет элемент управления из группы. Унаследован от control.Group."
        },
        {
          "name": "removeAll",
          "return": "control.Group",
          "description": "Удаляет все дочерние элементы из группы. Унаследован от control.Group."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "control.RollupButton",
    "url": "control.RollupButton.xml",
    "def": {
      "name": "control.RollupButton",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object|IControl[]",
          "description": "Параметры группы или массив кнопок.",
          "properties": [
            {
              "param": "items",
              "type": "IControl[]",
              "description": "Массив кнопок."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции элемента управления.",
          "properties": [
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.RollupButton.options; data - менеджер данных элемента управления control.RollupButton.data; state - менеджер состояния элемента управления control.RollupButton.state. Макет меняет свой внешний вид на основе данных, состояния и опций элемента управления. Элемент управления, в свою очередь, реагирует на интерфейсные события макета и меняет значения полей control.RollupButton.state в зависимости от полученных команд. (Тип: конструктор объекта, реализующий интерфейсы: IGroupControlLayout; IExpandableControlLayout. или ключ макета)."
            },
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, left: 5 }"
            }
          ]
        }
      ],
      "inherits": [
        "control.RadioGroup"
      ],
      "methods": [
        {
          "name": "add",
          "return": "control.Group",
          "description": "Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: \"mapTools\" - стандартный тулбар с кнопками \"Навигация\", \"Выделение\" и \"Линейка\" control.MapTools; \"miniMap\" - обзорная карта control.MiniMap; \"scaleLine\" - масштабный отрезок control.ScaleLine; \"searchControl\" - панель поиска control.SearchControl; \"trafficControl\" - панель пробок control.TrafficControl; \"typeSelector\" - панель переключения типа карты control.TypeSelector; \"zoomControl\" - ползунок масштаба control.ZoomControl; \"smallZoomControl\" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group."
        },
        {
          "name": "each",
          "return": "control.Group",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group."
        },
        {
          "name": "filter",
          "return": "IChildOnMap[]",
          "description": "Функция для выборки дочерних элементов по условию. Унаследован от control.Group."
        },
        {
          "name": "get",
          "return": "IChildOnMap",
          "description": "Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group."
        },
        {
          "name": "getAll",
          "return": "IChildOnMap[]",
          "description": "Возвращает массив дочерних элементов контрола. Унаследован от control.Group."
        },
        {
          "name": "getChildElement",
          "return": "HTMLElement",
          "description": "Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent."
        },
        {
          "name": "getContainer",
          "return": "HTMLElement",
          "description": "Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "getSelectedIndex",
          "return": "Number",
          "description": "Возвращает индекс выбранного элемента либо -1, если ни один элемент не выбран. Унаследован от control.RadioGroup."
        },
        {
          "name": "indexOf",
          "return": "Integer",
          "description": "Возвращает индекс дочернего элемента в группе. Унаследован от control.Group."
        },
        {
          "name": "length",
          "return": "Number",
          "description": "Возвращает количество дочерних элементов. Унаследован от control.Group."
        },
        {
          "name": "remove",
          "return": "control.Group",
          "description": "Удаляет элемент управления из группы. Унаследован от control.Group."
        },
        {
          "name": "removeAll",
          "return": "control.Group",
          "description": "Удаляет все дочерние элементы из группы. Унаследован от control.Group."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние вертикальной группы. Имена полей, доступных через метод data.Manager.get: activeElement - ссылка на выбранный элемент списка; expanded - признак, раскрыт ли список."
        }
      ]
    }
  },
  {
    "name": "control.RouteEditor",
    "url": "control.RouteEditor.xml",
    "def": {
      "name": "control.RouteEditor",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object",
          "description": "Параметры кнопки."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции элемента управления.",
          "properties": [
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, left: 98 }"
            }
          ]
        }
      ],
      "methods": [
        {
          "name": "getRoute",
          "return": "router.Route",
          "description": "Возвращает маршрут."
        }
      ]
    }
  },
  {
    "name": "control.ScaleLine",
    "url": "control.ScaleLine.xml",
    "def": {
      "name": "control.ScaleLine",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции масштабной линейки.",
          "properties": [
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. (Тип: конструктор объекта с интерфейсом ILayout или ключ макета)."
            },
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { right: 7, bottom: 50 }"
            }
          ]
        }
      ],
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "control.storage",
    "url": "control.storage.xml",
    "def": {
      "name": "control.storage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "control.SearchControl",
    "url": "control.SearchControl.xml",
    "def": {
      "name": "control.SearchControl",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "boundedBy",
              "type": "Number[][]",
              "description": "Прямоугольная область на карте, где предположительно находится искомый объект. При ранжировании объекты, находящиеся внутри указанной области, будут получать больший приоритет."
            },
            {
              "param": "kind",
              "type": "String",
              "description": "Вид топонима (только для обратного геокодирования). Список возможных значений: house - дом; street - улица; metro - станция метро; district - район города; locality - населенный пункт (город/поселок/деревня/село/...). Значение по умолчанию: 'house'"
            },
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.SearchControl.options; data - менеджер данных элемента управления control.SearchControl.data; state - менеджер состояния элемента управления control.SearchControl.state. Макет меняет свой внешний вид на основе данных, состояния и опций элемента управления. Элемент управления, в свою очередь, реагирует на интерфейсные события макета и меняет значения полей control.SearchControl.state в зависимости от полученных команд. (Тип: конструктор объекта с интерфейсом ISearchControlLayout или ключ макета)."
            },
            {
              "param": "noCentering",
              "type": "Boolean",
              "description": "false - автоматически располагать центр карты так, чтобы объект был виден целиком. true - не изменять центр карты при показе найденного объекта. Значение по умолчанию: false"
            },
            {
              "param": "noPlacemark",
              "type": "Boolean",
              "description": "false - автоматически добавлять в центр найденного объекта метку с открытым балуном, true - не добавлять. Если указать noCentering = true и noPlacemark = true, то при щелчке по результату поиска никаких видимых изменений на карте не произойдет. Значение по умолчанию: false"
            },
            {
              "param": "noPopup",
              "type": "Boolean",
              "description": "true - не показывать выпадающий список результатов, false - показывать. Значение по умолчанию: false"
            },
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, left: 104 }"
            },
            {
              "param": "provider",
              "type": "IGeocodeProvider|String",
              "description": "Провайдер геокодирования. Можно воспользоваться одним из стандартных провайдеров: 'yandex#map' - поиск по карте; 'yandex#publicMap'; - поиск по народной карте. Значение по умолчанию: 'yandex#map'"
            },
            {
              "param": "resultsPerPage",
              "type": "Integer",
              "description": "Количество результатов поиска на странице. Максимальное значение - 20. Значение по умолчанию: 3"
            },
            {
              "param": "strictBounds",
              "type": "Boolean",
              "description": "Искать только внутри области, заданной опцией boundedBy. Объекты вне указанной области попадать в выдачу не будут."
            },
            {
              "param": "useMapBounds",
              "type": "Boolean",
              "description": "Флаг, позволяющий учитывать при поиске границы видимой области карты. При значении true, рассчитанная область видимости имеет больший приоритет, чем заданная через boundedBy."
            },
            {
              "param": "width",
              "type": "Integer",
              "description": "Ширина элемента (в пикселах). Минимальное значение: 200. Значение по умолчанию: 240"
            }
          ]
        }
      ],
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "name": "close",
          "return": "control.SearchControl",
          "description": "Закрывает панель с результатами поиска."
        },
        {
          "name": "collapse",
          "return": "control.SearchControl",
          "description": "Сворачивает панель с результатами поиска."
        },
        {
          "name": "expand",
          "return": "control.SearchControl",
          "description": "Разворачивает панель с результатами поиска."
        },
        {
          "name": "getCurrentPage",
          "return": "Integer",
          "description": "Возвращает индекс текущий страницы с результатами запроса. Индексы начинаются с 0."
        },
        {
          "name": "getPageCount",
          "return": "Integer",
          "description": "Возвращает количество страниц результатов текущего поискового запроса."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "getRequestString",
          "return": "String",
          "description": "Возвращает строку, содержащую текущий поисковый запрос."
        },
        {
          "name": "getResult",
          "return": "util.Promise",
          "description": "Предоставляет доступ к результату по заданному индексу. Это асинхронный метод. Если результат с заданным индексом еще не загружен, то он загрузится.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс результата, начинается с 0."
            }
          ]
        },
        {
          "name": "getResultCount",
          "return": "Integer",
          "description": "Возвращает количество результатов текущего поискового запроса."
        },
        {
          "name": "getSelectedIndex",
          "return": "Integer",
          "description": "Возвращает индекс текущего выбранного элемента."
        },
        {
          "name": "getSuggestString",
          "return": "String",
          "description": "Возвращает строку, содержащую исправленный поисковый запрос, если была допущена опечатка."
        },
        {
          "name": "isExpanded",
          "return": "Boolean",
          "description": "Возвращает true, если панель с результатами поиска развернута, false - в противном случае."
        },
        {
          "name": "isOpen",
          "return": "Boolean",
          "description": "Возвращает true, если панель с результатами поиска открыта, false - в противном случае."
        },
        {
          "name": "open",
          "return": "control.SearchControl",
          "description": "Открывает панель с результатами поиска."
        },
        {
          "name": "search",
          "return": "util.Promise",
          "description": "Осуществляет поиск.",
          "params": [
            {
              "param": "request",
              "type": "String",
              "required": true,
              "description": "Запрос."
            }
          ]
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        },
        {
          "name": "showPage",
          "return": "util.Promise",
          "description": "Показывает страницу с результатами запроса по заданному индексу. Индексы страниц начинаются с 0.",
          "params": [
            {
              "param": "page",
              "type": "Integer",
              "required": true,
              "description": "Индекс страницы, которую нужно показать."
            }
          ]
        },
        {
          "name": "showResult",
          "return": "util.Promise",
          "description": "Отображает результат с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс результата, начинается с 0."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: results - массив, содержащий результаты поиска; currentIndex - индекс текущего выбранного элемента; pageNumber - текущая страница выдачи результатов; found - общее количество найденных результатов; request - текущий активный запрос; suggest - исправленный запрос; expanded - признак, свернут или развернут элемент управления; opened - признак, показана ли панель выдачи результата."
        }
      ]
    }
  },
  {
    "name": "control.SmallZoomControl",
    "url": "control.SmallZoomControl.xml",
    "def": {
      "name": "control.SmallZoomControl",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции элемента управления.",
          "properties": [
            {
              "param": "duration",
              "type": "Number",
              "description": "Время анимации маштабирования карты, мс. Значение по умолчанию: 200"
            },
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.SmallZoomControl.options; data - менеджер данных элемента управления control.SmallZoomControl.data; state - менеджер состояния элемента управления control.SmallZoomControl.state. Макет меняет свой внешний вид на основе данных, состояния и опций элемента управления. Элемент управления, в свою очередь, реагирует на интерфейсные события макета и меняет значения полей control.SmallZoomControl.state в зависимости от полученных команд. (Тип: конструктор объекта с интерфейсом IZoomControlLayout или ключ макета)."
            },
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 75, left: 5 }"
            }
          ]
        }
      ],
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: zoom - текущий коэффициент масштабирования; zoomRange - текущий диапазон коэффициентов масштабирования."
        }
      ]
    }
  },
  {
    "name": "control.ToolBar",
    "url": "control.ToolBar.xml",
    "def": {
      "name": "control.ToolBar",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "Object|IControl[]",
          "description": "Настройки группы элементов управления. Если в качестве настроек передан массив элементов управления, он трактуется как список дочерних элементов.",
          "properties": [
            {
              "param": "items",
              "type": "IControl[]",
              "description": "Список дочерних элементов."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "опции.",
          "properties": [
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, left: 5 }"
            }
          ]
        }
      ],
      "inherits": [
        "control.Group"
      ],
      "methods": [
        {
          "name": "add",
          "return": "control.Group",
          "description": "Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: \"mapTools\" - стандартный тулбар с кнопками \"Навигация\", \"Выделение\" и \"Линейка\" control.MapTools; \"miniMap\" - обзорная карта control.MiniMap; \"scaleLine\" - масштабный отрезок control.ScaleLine; \"searchControl\" - панель поиска control.SearchControl; \"trafficControl\" - панель пробок control.TrafficControl; \"typeSelector\" - панель переключения типа карты control.TypeSelector; \"zoomControl\" - ползунок масштаба control.ZoomControl; \"smallZoomControl\" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group."
        },
        {
          "name": "each",
          "return": "control.Group",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group."
        },
        {
          "name": "filter",
          "return": "IChildOnMap[]",
          "description": "Функция для выборки дочерних элементов по условию. Унаследован от control.Group."
        },
        {
          "name": "get",
          "return": "IChildOnMap",
          "description": "Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group."
        },
        {
          "name": "getAll",
          "return": "IChildOnMap[]",
          "description": "Возвращает массив дочерних элементов контрола. Унаследован от control.Group."
        },
        {
          "name": "getChildElement",
          "return": "HTMLElement",
          "description": "Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent."
        },
        {
          "name": "getContainer",
          "return": "HTMLElement",
          "description": "Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "indexOf",
          "return": "Integer",
          "description": "Возвращает индекс дочернего элемента в группе. Унаследован от control.Group."
        },
        {
          "name": "length",
          "return": "Number",
          "description": "Возвращает количество дочерних элементов. Унаследован от control.Group."
        },
        {
          "name": "remove",
          "return": "control.Group",
          "description": "Удаляет элемент управления из группы. Унаследован от control.Group."
        },
        {
          "name": "removeAll",
          "return": "control.Group",
          "description": "Удаляет все дочерние элементы из группы. Унаследован от control.Group."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: contentWidth - общая ширина дочерних элементов."
        }
      ]
    }
  },
  {
    "name": "control.ToolBarSeparator",
    "url": "control.ToolBarSeparator.xml",
    "def": {
      "name": "control.ToolBarSeparator",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "width",
          "type": "number",
          "required": true,
          "description": "Ширина разделителя (в пикселах)."
        }
      ],
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "control.TrafficControl",
    "url": "control.TrafficControl.xml",
    "def": {
      "name": "control.TrafficControl",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "state",
          "property": "",
          "type": "Object",
          "description": "Состояние контрола.",
          "properties": [
            {
              "param": "providerKey",
              "type": "String",
              "description": "Ключ провайдера пробок, показываемых на карте. 'traffic#actual' - пробки \"сейчас\" 'traffic#archive' - пробки \"обычно\" Значение по умолчанию: 'traffic#actual'"
            },
            {
              "param": "shown",
              "type": "Boolean",
              "description": "Показаны ли данные по пробкам на карте. Значение по умолчанию: false"
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции контрола.",
          "properties": [
            {
              "param": "layout",
              "type": "Function|String",
              "description": "Макет элемента управления. В конструктор макета передается объект, содержащий поля: control - ссылка на элемент управления; options - менеджер опций элемента управления control.TrafficControl.options; data - менеджер данных элемента управления control.TrafficControl.data; state - менеджер состояния элемента управления control.TrafficControl.state. Макет меняет свой внешний вид на основе данных, состояния и опций элемента управления. Элемент управления, в свою очередь, реагирует на интерфейсные события макета и меняет значения полей control.TrafficControl.state в зависимости от полученных команд. (Тип: конструктор объекта с интерфейсом ITrafficControlLayout или ключ макета)."
            },
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: {top: 5, right: 120}"
            }
          ]
        }
      ],
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "name": "collapse",
          "return": "",
          "description": "Свернуть панель пробок."
        },
        {
          "name": "expand",
          "return": "",
          "description": "Развернуть панель пробок."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "getProvider",
          "return": "ITrafficProvider",
          "description": "Возвращает экземпляр провайдера пробок.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "description": "Ключ провайдера информации о пробках. Список доступных ключей: 'traffic#actual' - провайдер пробок \"сейчас\"; 'traffic#archive' - провайдер пробок \"обычно\". Если параметр не передан, возвращается текущий провайдер."
            }
          ]
        },
        {
          "name": "hide",
          "return": "",
          "description": "Скрыть провайдер пробок с карты."
        },
        {
          "name": "isExpanded",
          "return": "Boolean",
          "description": "Возвращает признак, развернута ли панель."
        },
        {
          "name": "isShown",
          "return": "Boolean",
          "description": "Возвращает признак, показан ли провайдер пробок на карте."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        },
        {
          "name": "show",
          "return": "",
          "description": "Показать провайдер пробок на карте."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние панели. Имена полей, доступных через метод data.Manager.get: shown - признак, показан ли на карте провайдер пробок; providerKey - ключ провайдера, который показывает панель. Может принимать значения 'traffic#actual' или 'traffic#archive'; expanded - признак, развернута ли панель."
        }
      ]
    }
  },
  {
    "name": "control.TypeSelector",
    "url": "control.TypeSelector.xml",
    "def": {
      "name": "control.TypeSelector",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "params",
          "property": "",
          "type": "String[]|MapType[]|Object",
          "description": "Объект с описаниями параметров элемента управления. Если передан массив, то он трактуется как массив типов карты.",
          "properties": [
            {
              "param": "data.title",
              "type": "String",
              "description": "Заголовок списка."
            },
            {
              "param": "mapTypes",
              "type": "String[]|MapType[]",
              "description": "Массив конструкторов типов карты или ключей. Список доступных типов карты: 'yandex#map' - тип карты \"схема\"; 'yandex#satellite' - тип карты \"спутник\"; 'yandex#hybrid' - тип карты \"гибрид\"; 'yandex#publicMap' - тип карты \"народная карта\"; 'yandex#publicMapHybrid' - тип карты \"народный гибрид\". Ключи 'yandex#publicMap' и 'yandex#publicMapHybrid' доступны только для России и Украины."
            },
            {
              "param": "data",
              "type": "Object",
              "description": "Данные списка."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции элемента управления.",
          "properties": [
            {
              "param": "position",
              "type": "Object",
              "description": "Положение элемента управления над картой. Задается в виде объекта со следующими полями: top - отступ от верхнего края контейнера карты в пикселах; right - отступ от правого края контейнера карты в пикселах; bottom - отступ от нижнего края контейнера карты в пикселах; left - отступ от левого края контейнера карты в пикселах. Если при этом заданы одновременно и top, и bottom, то значение bottom игнорируется. Аналогично, если заданы одновременно и left, и right, то значение right игнорируется. Если элемент управления добавляется в группу элементов (например, в тулбар или раскрывающийся список), то значение position не применяется. Значение по умолчанию: { top: 5, right: 5 }"
            }
          ]
        },
        {
          "param": "fixTitle",
          "property": "",
          "type": "Boolean",
          "description": "Флаг, отвечающий за поведение заголовка элемента управления. true - заголовок элемента управления не изменяется при смене типа карты; false - заголовок элемента управления изменяется в соответствии с выбранным типом карты. Если тип карты не выбран, будет отображаться значение, заданное в params.data.title. Значение по умолчанию: false"
        }
      ],
      "methods": [
        {
          "name": "addMapType",
          "return": "TypeSelector",
          "description": "Добавляет тип карты в список.",
          "params": [
            {
              "param": "mapType",
              "type": "String|MapType",
              "required": true,
              "description": "Тип карты."
            },
            {
              "param": "position",
              "type": "Integer",
              "required": false,
              "description": "Позиция в списке (если не указана, новый тип карты добавляется в конец списка)."
            }
          ]
        },
        {
          "name": "getMapTypeItemsGroup",
          "return": "control.Group",
          "description": "Возвращает группу, которая содержит элементы списка, описывающие типы карты."
        },
        {
          "name": "removeAllMapTypes",
          "return": "TypeSelector",
          "description": "Удаляет все типы карты из элемента управления."
        },
        {
          "name": "removeMapType",
          "return": "TypeSelector",
          "description": "Удаляет тип карты.",
          "params": [
            {
              "param": "mapType",
              "type": "String|MapType",
              "required": true,
              "description": ""
            }
          ]
        }
      ],
      "props": [
        {
          "name": "data",
          "type": "data.Manager",
          "description": "Данные элемента управления. Имена полей, доступных через метод data.Manager.get: title - заголовок выпадающего списка."
        }
      ]
    }
  },
  {
    "name": "coordSystem.cartesian",
    "url": "coordSystem.cartesian.xml",
    "def": {
      "name": "coordSystem.cartesian",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "getDistance",
          "return": "Number",
          "description": "Возвращает кратчайшее (вдоль геодезической линии) расстояние между двумя заданными точками (в метрах)."
        },
        {
          "name": "solveDirectProblem",
          "return": "Object",
          "description": "Решает так называемую первую (прямую) геодезическую задачу: где мы окажемся, если выйдем из указанной точки в указанном направлении и продём, не сворачивая, указанное расстояние."
        },
        {
          "name": "solveInverseProblem",
          "return": "Object",
          "description": "Решает так называемую вторую (обратную) геодезическую задачу: построить кратчайший маршрут между двумя точками на картографируемой поверхности и определелить расстояние и направление движения."
        }
      ]
    }
  },
  {
    "name": "control.ZoomControl",
    "url": "control.ZoomControl.xml",
    "def": {
      "name": "control.ZoomControl",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции элемента управления.",
          "properties": [
            {
              "param": "customTips",
              "type": "Object[]",
              "description": "Массив описаний подсказок. Каждое описание - это объект с двумя полями: index {Integer} - коэффициент масштабирования, которому соответствует подсказка; value {String} - текст подсказки."
            },
            {
              "param": "noTips",
              "type": "Boolean",
              "description": "Включает/выключает показ всплывающих подсказок: true - подсказки выключены, false - включены. Подсказки показываются в стороне от шкалы масштаба при наведении на нее курсора мыши. Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "control.SmallZoomControl"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: zoom - текущий коэффициент масштабирования; zoomRange - текущий диапазон коэффициентов масштабирования; hints - массив описаний подсказок, применяющийся в макете элемента управления."
        }
      ]
    }
  },
  {
    "name": "coordSystem.geo",
    "url": "coordSystem.geo.xml",
    "def": {
      "name": "coordSystem.geo",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "getDistance",
          "return": "Number",
          "description": "Возвращает кратчайшее (вдоль геодезической линии) расстояние между двумя заданными точками (в метрах)."
        },
        {
          "name": "solveDirectProblem",
          "return": "Object",
          "description": "Решает так называемую первую (прямую) геодезическую задачу: где мы окажемся, если выйдем из указанной точки в указанном направлении и продём, не сворачивая, указанное расстояние."
        },
        {
          "name": "solveInverseProblem",
          "return": "Object",
          "description": "Решает так называемую вторую (обратную) геодезическую задачу: построить кратчайший маршрут между двумя точками на картографируемой поверхности и определелить расстояние и направление движения."
        }
      ]
    }
  },
  {
    "name": "data.Manager",
    "url": "data.Manager.xml",
    "def": {
      "name": "data.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "data",
          "type": "Object",
          "required": true,
          "description": "Данные."
        }
      ],
      "inherits": [
        "IDataManager",
        "IFreezable"
      ],
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает значение поля данных с заданным именем.",
          "params": [
            {
              "param": "path",
              "type": "String",
              "required": true,
              "description": "Строка с именем поля данных. Имя может адресовать вложенные поля, т.е. содержать '.'."
            },
            {
              "param": "defaultValue",
              "type": "Object",
              "required": false,
              "description": "Значение по умолчанию."
            }
          ]
        },
        {
          "name": "getAll",
          "return": "Object",
          "description": "Возвращает объект, содержащий все поля данных."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "set",
          "return": "data.Manager",
          "description": "Устанавливает значения для указанных полей. Поддерживаются две сигнатуры: один аргумент, представляющий собой объект вида {\"имя\": \"значение\"}; два аргумента, первый из которых - имя поля, второй - значение. Имя может адресовать вложенные поля, т.е. содержать '.'.",
          "params": [
            {
              "param": "path",
              "type": "Object|String",
              "required": true,
              "description": "Строка с именем поля данных, либо объект вида {\"имя\": \"значение\"}."
            },
            {
              "param": "value",
              "type": "Object",
              "required": false,
              "description": "Значение, если в качестве первого аргумента передается имя поля."
            }
          ]
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        },
        {
          "name": "unset",
          "return": "data.Manager",
          "description": "Очищает заданные поля данных.",
          "params": [
            {
              "param": "path",
              "type": "String|String[]",
              "required": true,
              "description": "Имя поля, либо массив имён."
            }
          ]
        },
        {
          "name": "unsetAll",
          "return": "data.Manager",
          "description": "Очищает все поля данных."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта. Унаследовано от IFreezable."
        }
      ]
    }
  },
  {
    "name": "DomEvent",
    "url": "DomEvent.xml",
    "def": {
      "name": "DomEvent",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "originalEvent",
          "type": "Object",
          "required": true,
          "description": "DOM-событие."
        },
        {
          "param": "type",
          "type": "String",
          "required": false,
          "description": "Тип события. Если не указан, берётся из originalEvent.type."
        }
      ],
      "inherits": [
        "IDomEvent"
      ],
      "methods": [
        {
          "name": "callMethod",
          "return": "",
          "description": "Вызывает указанный метод у исходного DOM-события. Второй и последующие аргументы передаются методу при вызове. Унаследован от IDomEvent."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает свойство события по ключу. С помощью этого метода можно получать доступ как к свойствам оригинального события, так и к дополнительным свойствам, предоставляемым API карт. Унаследован от IDomEvent."
        },
        {
          "name": "isImmediatePropagationStopped",
          "return": "",
          "description": "Возвращает true, если распространение события внутри системы событий API Яндекс.Карт остановлено. Это внутренний признак, никак не связанный с пропагацией события по DOM-дереву. Унаследован от IDomEvent."
        }
      ]
    }
  },
  {
    "name": "domEvent.MultiTouch",
    "url": "domEvent.MultiTouch.xml",
    "def": {
      "name": "domEvent.MultiTouch",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "originalEvent",
          "type": "Object",
          "required": true,
          "description": "multitouch-событие."
        },
        {
          "param": "type",
          "type": "String",
          "required": false,
          "description": "Тип события. Если не указан, считается равным 'multi' + originalEvent.type."
        }
      ],
      "inherits": [
        "IDomEvent"
      ],
      "methods": [
        {
          "name": "callMethod",
          "return": "",
          "description": "Вызывает указанный метод у исходного DOM-события. Второй и последующие аргументы передаются методу при вызове. Унаследован от IDomEvent."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает свойство события по ключу. С помощью этого метода можно получать доступ как к свойствам оригинального события, так и к дополнительным свойствам, предоставляемым API карт. Унаследован от IDomEvent."
        },
        {
          "name": "isImmediatePropagationStopped",
          "return": "",
          "description": "Возвращает true, если распространение события внутри системы событий API Яндекс.Карт остановлено. Это внутренний признак, никак не связанный с пропагацией события по DOM-дереву. Унаследован от IDomEvent."
        }
      ]
    }
  },
  {
    "name": "event.Group",
    "url": "event.Group.xml",
    "def": {
      "name": "event.Group",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "events",
          "type": "event.Manager",
          "required": true,
          "description": "Менеджер событий, для которого создается контейнер."
        }
      ],
      "inherits": [
        "IEventGroup"
      ],
      "methods": [
        {
          "name": "add",
          "return": "IEventGroup",
          "description": "Добавляет обработчик события. Унаследован от IEventGroup."
        },
        {
          "name": "remove",
          "return": "IEventGroup",
          "description": "Удаляет обработчик события. Удалить можно только те обработчики, которые были добавлены через данный экземпляр контейнера. Унаследован от IEventGroup."
        },
        {
          "name": "removeAll",
          "return": "IEventGroup",
          "description": "Удаляет все обработчики событий, которые были добавлены через данный экземпляр контейнера. Унаследован от IEventGroup."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий, для которого создан контейнер."
        },
        {
          "name": "types",
          "type": "Object",
          "description": "Список обработчиков, которые были созданы через данный контейнер. Представляет собой ассоциативный массив, в котором каждому типу событий сопоставлен список listenerId обработчиков в виде JavaScript-объекта."
        },
        {
          "name": "typesCount",
          "type": "Number",
          "description": "Количество разных типов событий, которые слушают через данный контейнер"
        }
      ]
    }
  },
  {
    "name": "event.Manager",
    "url": "event.Manager.xml",
    "def": {
      "name": "event.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции менеджера событий.",
          "properties": [
            {
              "param": "context",
              "type": "Object",
              "description": "Объект, для которого создан менеджер событий."
            },
            {
              "param": "controllers",
              "type": "IEventWorkflowController[]",
              "description": "Контроллер или контроллеры менеджера событий."
            },
            {
              "param": "parent",
              "type": "IEventManager",
              "description": "Родительский менеджер событий."
            }
          ]
        }
      ],
      "inherits": [
        "IEventManager"
      ],
      "methods": [
        {
          "name": "add",
          "return": "IEventManager",
          "description": "Добавляет новую подписку. Унаследован от IEventManager."
        },
        {
          "name": "createEventObject",
          "return": "Event",
          "description": "Функция, которая создает объект-событие. Вызывается в методе fire, когда переданный объект не является экземпляром класса Event или его наследником.",
          "params": [
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            },
            {
              "param": "event",
              "type": "Object",
              "required": true,
              "description": "Объект, описывающий событие."
            },
            {
              "param": "target",
              "type": "Object",
              "required": true,
              "description": "Объект, на котором произошло событие."
            }
          ]
        },
        {
          "name": "fire",
          "return": "event.Manager",
          "description": "Бросает событие.",
          "params": [
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            },
            {
              "param": "event",
              "type": "Object|Event",
              "required": false,
              "description": "Объект, описывающий событие. Если передан хэш с данными, то для него будет вызван метод createEventObject, и дальнейшие действия будут производиться с новым созданным событием. Значение isImmediatePropagationStopped() проверяется в каждой фазе распространения событий. Значение isPropagationStopped() проверяется перед фазой bubblingEvent. Значение isDefaultPrevented() проверяется перед фазой defaultaction."
            }
          ]
        },
        {
          "name": "getParent",
          "return": "IEventManager",
          "description": "Возвращает родительский менеджер событий."
        },
        {
          "name": "group",
          "return": "IEventGroup",
          "description": "Возвращает контейнер событий, привязанный к данному менеджеру. Унаследован от IEventManager."
        },
        {
          "name": "remove",
          "return": "IEventManager",
          "description": "Удаляет существующую подписку. Унаследован от IEventManager."
        },
        {
          "name": "setParent",
          "return": "event.Manager",
          "description": "Задаёт родительский менеджер событий.",
          "params": [
            {
              "param": "parent",
              "type": "IEventManager",
              "required": true,
              "description": "Родительский менеджер событий."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "domEvent.Touch",
    "url": "domEvent.Touch.xml",
    "def": {
      "name": "domEvent.Touch",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "originalEvent",
          "type": "Object",
          "required": true,
          "description": "DOM-событие."
        },
        {
          "param": "type",
          "type": "String",
          "required": false,
          "description": "Тип события. Если не указан, берётся из originalEvent.type."
        }
      ],
      "inherits": [
        "IDomEvent"
      ],
      "methods": [
        {
          "name": "callMethod",
          "return": "",
          "description": "Вызывает указанный метод у исходного DOM-события. Второй и последующие аргументы передаются методу при вызове. Унаследован от IDomEvent."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает свойство события по ключу. С помощью этого метода можно получать доступ как к свойствам оригинального события, так и к дополнительным свойствам, предоставляемым API карт. Унаследован от IDomEvent."
        },
        {
          "name": "isImmediatePropagationStopped",
          "return": "",
          "description": "Возвращает true, если распространение события внутри системы событий API Яндекс.Карт остановлено. Это внутренний признак, никак не связанный с пропагацией события по DOM-дереву. Унаследован от IDomEvent."
        }
      ]
    }
  },
  {
    "name": "event.PriorityGroup",
    "url": "event.PriorityGroup.xml",
    "def": {
      "name": "event.PriorityGroup",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "events",
          "type": "event.PriorityManager",
          "required": true,
          "description": "Менеджер событий, для которого создается контейнер."
        }
      ],
      "inherits": [
        "IEventGroup"
      ],
      "methods": [
        {
          "name": "add",
          "return": "event.PriorityGroup",
          "description": "Добавляет обработчик события.",
          "params": [
            {
              "param": "types",
              "type": "String|String[]",
              "required": true,
              "description": "Тип или типы событий."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения функции-обработчика."
            },
            {
              "param": "priority",
              "type": "",
              "required": true,
              "description": ""
            }
          ]
        },
        {
          "name": "remove",
          "return": "event.PriorityGroup",
          "description": "Удаляет обработчик события. Удалить можно только те обработчики, которые были добавлены через данный экземпляр контейнера.",
          "params": [
            {
              "param": "types",
              "type": "String|String[]",
              "required": true,
              "description": "Тип или типы событий."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения функции-обработчика."
            },
            {
              "param": "priority",
              "type": "",
              "required": true,
              "description": ""
            }
          ]
        },
        {
          "name": "removeAll",
          "return": "event.PriorityGroup",
          "description": "Удаляет все обработчики событий, которые были добавлены через данный экземпляр контейнера."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.PriorityManager",
          "description": "Менеджер событий, для которого создан контейнер."
        }
      ]
    }
  },
  {
    "name": "Event",
    "url": "Event.xml",
    "def": {
      "name": "Event",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "originalEvent",
          "type": "Object",
          "required": true,
          "description": "Исходные данные."
        },
        {
          "param": "isPropagationStopped",
          "type": "Boolean",
          "required": false,
          "description": "true - пропагирование запрещено, false - нет. Значение по умолчанию: false"
        },
        {
          "param": "isDefaultPrevented",
          "type": "Boolean",
          "required": false,
          "description": "true - действие по умолчанию запрещено, false - нет. Значение по умолчанию: false"
        }
      ],
      "inherits": [
        "IEvent"
      ],
      "methods": [
        {
          "name": "callMethod",
          "return": "Object",
          "description": "Вызывает указанный метод. Операция эквивалентна поиску поля через get и вызову с передачей в качестве контекста originalEvent. Все аргументы после первого передаются в качестве параметров вызываемому методу.",
          "params": [
            {
              "param": "name",
              "type": "String",
              "required": true,
              "description": "Имя метода."
            }
          ]
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает значение поля из originalEvent. originalEvent всегда имеет следующие поля: type - строковый тип события; target - ссылка на объект, породивший событие.",
          "params": [
            {
              "param": "name",
              "type": "String",
              "required": true,
              "description": "Имя свойства."
            }
          ]
        },
        {
          "name": "isDefaultPrevented",
          "return": "Boolean",
          "description": "Проверяет, отменена ли реакция по умолчанию на событие в рамках системы событий API Яндекс.Карт."
        },
        {
          "name": "isImmediatePropagationStopped",
          "return": "Boolean",
          "description": "Определяет, прекращено ли распространение события в системе событий API Яндекс.Карт."
        },
        {
          "name": "isPropagationStopped",
          "return": "Boolean",
          "description": "Проверяет, остановлено ли распространение события по иерархии объектов и коллекций в системе событий API Яндекс.Карт."
        },
        {
          "name": "preventDefault",
          "return": "",
          "description": "Отменяет реакцию по умолчанию на событие в рамках системы событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву."
        },
        {
          "name": "stopImmediatePropagation",
          "return": "",
          "description": "Прекращает распространение события в системе событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву."
        },
        {
          "name": "stopPropagation",
          "return": "",
          "description": "Прекращает распространение события по иерархии объектов и коллекций в системе событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву."
        }
      ]
    }
  },
  {
    "name": "event.PriorityManager",
    "url": "event.PriorityManager.xml",
    "def": {
      "name": "event.PriorityManager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции менеджера событий.",
          "properties": [
            {
              "param": "controllers",
              "type": "IWorkflowController[]",
              "description": "Контроллер или контроллеры менеджера событий."
            }
          ]
        }
      ],
      "inherits": [
        "event.Manager"
      ],
      "methods": [
        {
          "name": "add",
          "return": "event.PriorityManager",
          "description": "Добавляет новую подписку.",
          "params": [
            {
              "param": "types",
              "type": "String|String[]",
              "required": true,
              "description": "Тип или массив типов события."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик события."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения обработчика."
            },
            {
              "param": "priority",
              "type": "Integer",
              "required": false,
              "description": "Приоритет подписки. Если не указан, считается наименьшим из возможных."
            }
          ]
        },
        {
          "name": "createEventObject",
          "return": "Event",
          "description": "Функция, которая создает объект-событие. Вызывается в методе fire, когда переданный объект не является экземпляром класса Event или его наследником.",
          "params": [
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            },
            {
              "param": "event",
              "type": "Object",
              "required": true,
              "description": "Объект, описывающий событие."
            },
            {
              "param": "target",
              "type": "Object",
              "required": true,
              "description": "Объект, на котором произошло событие."
            }
          ]
        },
        {
          "name": "fire",
          "return": "event.PriorityManager",
          "description": "Бросает событие.",
          "params": [
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            },
            {
              "param": "event",
              "type": "Object|Event",
              "required": false,
              "description": "Объект, описывающий событие. Если передан хэш с данными, то для него будет вызван метод createEventObject, и дальнейшие действия будут производиться с новым созданным событием. Значение isImmediatePropagationStopped() проверяется в каждой фазе распространения событий. Значение isPropagationStopped() проверяется перед фазой bubblingEvent. Значение isDefaultPrevented() проверяется перед фазой defaultaction."
            }
          ]
        },
        {
          "name": "getManagerByPriority",
          "return": "event.manager.Base",
          "description": "Перебирает вложенные менеджеры событий и возвращает экземпляр с нужным priority. Если такого нет - создаёт его.",
          "params": [
            {
              "param": "priority",
              "type": "Number",
              "description": "Приоритет."
            }
          ]
        },
        {
          "name": "getParent",
          "return": "IEventManager",
          "description": "Возвращает родительский менеджер событий."
        },
        {
          "name": "group",
          "return": "event.PriorityGroup",
          "description": "Возвращает контейнер событий, привязанный к данному менеджеру."
        },
        {
          "name": "remove",
          "return": "event.PriorityManager",
          "description": "Удаляет существующую подписку. Для удаления подписки требуется указать тот же приоритет, который был использован при её добавлении.",
          "params": [
            {
              "param": "types",
              "type": "String|String[]",
              "required": true,
              "description": "Тип или массив типов события."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик события."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения обработчика."
            },
            {
              "param": "priority",
              "type": "Integer",
              "required": false,
              "description": "Приоритет подписки. Если не указан, считается наименьшим из возможных."
            }
          ]
        },
        {
          "name": "setParent",
          "return": "event.Manager",
          "description": "Задаёт родительский менеджер событий.",
          "params": [
            {
              "param": "parent",
              "type": "IEventManager",
              "required": true,
              "description": "Родительский менеджер событий."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "formatter",
    "url": "formatter.xml",
    "def": {
      "name": "formatter",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "distance",
          "return": "String",
          "description": "Возвращает отформатированное согласно локальным правилам и переведённое в нужную систему единиц измерения строковое представление расстояния.",
          "params": [
            {
              "param": "value",
              "type": "Number",
              "required": true,
              "description": "Длина в метрах."
            },
            {
              "param": "significantDigits",
              "type": "Integer",
              "required": false,
              "description": "Число значащих цифр в ответе. Значение по умолчанию: 2"
            }
          ]
        },
        {
          "name": "duration",
          "return": "String",
          "description": "Возвращает строковое представление интервала времени.",
          "params": [
            {
              "param": "value",
              "type": "Number",
              "required": true,
              "description": "Интервал времени в секундах."
            },
            {
              "param": "significantDigits",
              "type": "Integer",
              "required": false,
              "description": "Число значащих цифр в ответе. Значение по умолчанию: 2"
            }
          ]
        }
      ]
    }
  },
  {
    "name": "geolocation",
    "url": "geolocation.xml",
    "def": {
      "name": "geolocation",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geocode",
    "url": "geocode.xml",
    "def": {
      "name": "geocode",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.base.Circle",
    "url": "geometry.base.Circle.xml",
    "def": {
      "name": "geometry.base.Circle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[]|null",
          "description": "Координаты центра круга. Значение по умолчанию: null"
        },
        {
          "param": "radius",
          "type": "Number",
          "description": "Радиус круга. Значение по умолчанию: 0"
        }
      ],
      "inherits": [
        "IBaseCircleGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на окружности точку, ближайшую к anchorPosition. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты центра круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getRadius",
          "return": "Number",
          "description": "Возвращает радиус круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Circle\". Унаследован от IBaseCircleGeometry."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "ICircleGeometryAccess",
          "description": "Задает координаты центра круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "setRadius",
          "return": "ICircleGeometryAccess",
          "description": "Задает радиус круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий геометрии."
        }
      ]
    }
  },
  {
    "name": "geometry.base.LinearRing",
    "url": "geometry.base.LinearRing.xml",
    "def": {
      "name": "geometry.base.LinearRing",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][]",
          "description": "Координаты геометрии. Значение по умолчанию: []"
        },
        {
          "param": "fillRule",
          "type": "String",
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри. Значение по умолчанию: \"evenOdd\""
        }
      ],
      "inherits": [
        "IBaseLinearRingGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри контура. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[]",
          "description": "Возвращает координаты точки с заданным индексом. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "IPointGeometryAccess",
          "description": "Создает и возвращает объект IPointGeometryAccess для заданной вершины контура. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре точку, ближайшую к anchorPosition. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает массив координат геометрии. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"LinearRing\". Унаследован от IBaseLinearRingGeometry."
        },
        {
          "name": "insert",
          "return": "ILinearRingGeometryAccess",
          "description": "Добавляет новую точку с заданным индексом. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "Number[]",
          "description": "Удаляет точку с заданным индексом. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "set",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает координаты точки c заданным индексом. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "setFillRule",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает алгоритм заливки контура. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "splice",
          "return": "Number[][]",
          "description": "Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий геометрии."
        }
      ]
    }
  },
  {
    "name": "geometry.base.LinearRing.fromEncodedCoordinates",
    "url": "geometry.base.LinearRing.fromEncodedCoordinates.xml",
    "def": {
      "name": "geometry.base.LinearRing.fromEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.base.LinearRing.toEncodedCoordinates",
    "url": "geometry.base.LinearRing.toEncodedCoordinates.xml",
    "def": {
      "name": "geometry.base.LinearRing.toEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.base.LineString",
    "url": "geometry.base.LineString.xml",
    "def": {
      "name": "geometry.base.LineString",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][]",
          "description": "Координаты геометрии. Значение по умолчанию: []"
        }
      ],
      "inherits": [
        "IBaseLineStringGeometry"
      ],
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[]",
          "description": "Возвращает координаты точки с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "IPointGeometryAccess",
          "description": "Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает массив координат геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"LineString\". Унаследован от IBaseLineStringGeometry."
        },
        {
          "name": "insert",
          "return": "ILineStringGeometryAccess",
          "description": "Добавляет новую точку с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "Number[]",
          "description": "Удаляет точку с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "set",
          "return": "ILineStringGeometryAccess",
          "description": "Задает координаты точки c заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "ILineStringGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "splice",
          "return": "Number[][]",
          "description": "Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий геометрии."
        }
      ]
    }
  },
  {
    "name": "geometry.base.LineString.fromEncodedCoordinates",
    "url": "geometry.base.LineString.fromEncodedCoordinates.xml",
    "def": {
      "name": "geometry.base.LineString.fromEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.base.Point",
    "url": "geometry.base.Point.xml",
    "def": {
      "name": "geometry.base.Point",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "position",
          "type": "Number[]|null",
          "description": "Координаты точки. Значение по умолчанию: null"
        }
      ],
      "inherits": [
        "IBasePointGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты точки. Унаследован от IPointGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Point\". Унаследован от IBasePointGeometry."
        },
        {
          "name": "setCoordinates",
          "return": "IPointGeometryAccess",
          "description": "Задает координаты точки. Унаследован от IPointGeometryAccess."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий геометрии."
        }
      ]
    }
  },
  {
    "name": "geometry.base.LineString.toEncodedCoordinates",
    "url": "geometry.base.LineString.toEncodedCoordinates.xml",
    "def": {
      "name": "geometry.base.LineString.toEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.base.Polygon",
    "url": "geometry.base.Polygon.xml",
    "def": {
      "name": "geometry.base.Polygon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][][]",
          "description": "Координаты геометрии. Значение по умолчанию: []"
        },
        {
          "param": "fillRule",
          "type": "String",
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри. Значение по умолчанию: \"evenOdd\""
        }
      ],
      "inherits": [
        "IBasePolygonGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри многоугольника. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[][]",
          "description": "Возвращает координаты контура с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "ILinearRingGeometryAccess",
          "description": "Создает и возвращает объект ILinearRingGeometryAccess для заданного контура. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][][]",
          "description": "Возвращает массив координат геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество контуров в геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Polygon\". Унаследован от IBasePolygonGeometry."
        },
        {
          "name": "insert",
          "return": "IPolygonGeometryAccess",
          "description": "Добавляет новый контур с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "ILinearRingGeometryAccess",
          "description": "Удаляет контур с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "set",
          "return": "IPolygonGeometryAccess",
          "description": "Задает координаты контура c заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "IPolygonGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setFillRule",
          "return": "IPolygonGeometryAccess",
          "description": "Задает алгоритм заливки многоугольника. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "splice",
          "return": "ILinearRingGeometryAccess[]",
          "description": "Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий геометрии."
        }
      ]
    }
  },
  {
    "name": "geometry.base.Polygon.toEncodedCoordinates",
    "url": "geometry.base.Polygon.toEncodedCoordinates.xml",
    "def": {
      "name": "geometry.base.Polygon.toEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.base.Polygon.fromEncodedCoordinates",
    "url": "geometry.base.Polygon.fromEncodedCoordinates.xml",
    "def": {
      "name": "geometry.base.Polygon.fromEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.base.Rectangle",
    "url": "geometry.base.Rectangle.xml",
    "def": {
      "name": "geometry.base.Rectangle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][]|null",
          "description": "Массив, содержащий координаты двух противоположных углов прямоугольника. Значение по умолчанию: null"
        }
      ],
      "inherits": [
        "IBaseRectangleGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре прямоугольника точку, ближайшую к anchorPosition. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Rectangle\". Унаследован от IBaseRectangleGeometry."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Задает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий геометрии."
        }
      ]
    }
  },
  {
    "name": "geometry.LineString.fromEncodedCoordinates",
    "url": "geometry.LineString.fromEncodedCoordinates.xml",
    "def": {
      "name": "geometry.LineString.fromEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.Circle",
    "url": "geometry.Circle.xml",
    "def": {
      "name": "geometry.Circle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "property": "",
          "type": "Number[]|null",
          "description": "Координаты центра круга. Значение по умолчанию: null"
        },
        {
          "param": "radius",
          "property": "",
          "type": "Number",
          "description": "Радиус круга в метрах. Значение по умолчанию: 0"
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции геометрии.",
          "properties": [
            {
              "param": "geodesic",
              "type": "Boolean",
              "description": "Включает отображение с учетом геодезии. Значение по умолчанию: false"
            },
            {
              "param": "pixelRendering",
              "type": "String",
              "description": "Метод расчета пиксельных координат отображения в зацикленных проекциях. Опция может принимать одно из следующих значений: jumpy - отображение располагается как можно ближе к центру области показа карты и может скачкообразно перемещается во время движения карты; static - отображение всегда располагается в начальном мире и не перемещается при движении карты. Значение по умолчанию: \"jumpy\""
            },
            {
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ]
        }
      ],
      "inherits": [
        "ICircleGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на окружности точку, ближайшую к anchorPosition. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты центра круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getRadius",
          "return": "Number",
          "description": "Возвращает радиус круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Circle\". Унаследован от ICircleGeometry."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "ICircleGeometryAccess",
          "description": "Задает координаты центра круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        },
        {
          "name": "setRadius",
          "return": "ICircleGeometryAccess",
          "description": "Задает радиус круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "geometry.LineString",
    "url": "geometry.LineString.xml",
    "def": {
      "name": "geometry.LineString",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "property": "",
          "type": "Number[][]",
          "description": "Координаты геометрии. Значение по умолчанию: []"
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции геометрии.",
          "properties": [
            {
              "param": "coordRendering",
              "type": "String",
              "description": "Строковый идентификатор, определяющий алгоритм пересчета координат геометрии в пиксельные координаты. Для геометрии \"Ломаная линия\" может принимать одно из двух значений: shortestPath - алгоритм, учитывающий зацикленность проекции по осям, и формирующий пиксельные координаты так, чтобы расстояние между двумя соседними точками было минимальным; straightPath - алгоритм, не учитывающий зацикленность проекции."
            },
            {
              "param": "geodesic",
              "type": "Boolean",
              "description": "Включает отображение с учетом геодезии. Значение по умолчанию: false"
            },
            {
              "param": "pixelRendering",
              "type": "String",
              "description": "Метод расчета пиксельных координат отображения в зацикленных проекциях. Опция может принимать одно из следующих значений: jumpy - отображение располагается как можно ближе к центру области показа карты и может скачкообразно перемещается во время движения карты; static - отображение всегда располагается в начальном мире и не перемещается при движении карты. Значение по умолчанию: \"jumpy\""
            },
            {
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            },
            {
              "param": "simplification",
              "type": "Boolean",
              "description": "Включает симплификацию при рендеринге пиксельной геометрии. Значение по умолчанию: true"
            }
          ]
        }
      ],
      "inherits": [
        "ILineStringGeometry"
      ],
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[]",
          "description": "Возвращает координаты точки с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "IPointGeometryAccess",
          "description": "Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает массив координат геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"LineString\". Унаследован от ILineStringGeometry."
        },
        {
          "name": "insert",
          "return": "ILineStringGeometryAccess",
          "description": "Добавляет новую точку с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "Number[]",
          "description": "Удаляет точку с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "set",
          "return": "ILineStringGeometryAccess",
          "description": "Задает координаты точки c заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "ILineStringGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        },
        {
          "name": "splice",
          "return": "Number[][]",
          "description": "Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "geometry.LineString.getPixelRadius",
    "url": "geometry.LineString.getPixelRadius.xml",
    "def": {
      "name": "geometry.LineString.getPixelRadius",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.LineString.toEncodedCoordinates",
    "url": "geometry.LineString.toEncodedCoordinates.xml",
    "def": {
      "name": "geometry.LineString.toEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.pixel.Circle",
    "url": "geometry.pixel.Circle.xml",
    "def": {
      "name": "geometry.pixel.Circle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[]|null",
          "required": true,
          "description": "Координаты центра круга."
        },
        {
          "param": "radius",
          "type": "Number|null",
          "required": true,
          "description": "Радиус круга."
        },
        {
          "param": "metaData",
          "type": "Object",
          "required": false,
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelCircleGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]",
          "description": "Возвращает координаты центра круга. Унаследован от IPixelCircleGeometry."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getRadius",
          "return": "Number",
          "description": "Возвращает радиус круга. Унаследован от IPixelCircleGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "geometry.pixel.LineString",
    "url": "geometry.pixel.LineString.xml",
    "def": {
      "name": "geometry.pixel.LineString",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][]",
          "required": true,
          "description": "Координаты линии."
        },
        {
          "param": "metaData",
          "type": "Object",
          "required": false,
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelLineStringGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от IPixelLineStringGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает координаты линии. Унаследован от IPixelLineStringGeometry."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии. Унаследован от IPixelLineStringGeometry."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "geometry.pixel.MultiPolygon",
    "url": "geometry.pixel.MultiPolygon.xml",
    "def": {
      "name": "geometry.pixel.MultiPolygon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "property": "",
          "type": "Number[][][][]",
          "required": true,
          "description": "Координаты многоугольников."
        },
        {
          "param": "fillRule",
          "property": "",
          "type": "String",
          "required": true,
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольников. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри."
        },
        {
          "param": "metaData",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Метаданные.",
          "properties": [
            {
              "param": "convex",
              "type": "Boolean",
              "required": false,
              "description": "Признак выпуклости многоугольника. true - выпуклый, false - невыпуклый. Для выпуклых многоугольников быстрее рассчитывается попадание точки в многоугольник. Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "IPixelPolygonGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет лежит ли переданная точка внутри многоугольника. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][][]",
          "description": "Возвращает координаты многоугольника. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки многоугольника. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество контуров в многоугольнике. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "geometry.pixel.Point",
    "url": "geometry.pixel.Point.xml",
    "def": {
      "name": "geometry.pixel.Point",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "position",
          "type": "Number[]|null",
          "required": true,
          "description": "Координаты точки."
        },
        {
          "param": "metaData",
          "type": "Object",
          "required": false,
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelPointGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]",
          "description": "Возвращает координаты точки. Унаследован от IPixelPointGeometry."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "geometry.Point",
    "url": "geometry.Point.xml",
    "def": {
      "name": "geometry.Point",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "position",
          "property": "",
          "type": "Number[]",
          "description": "Координаты точки. Значение по умолчанию: null"
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции геометрии.",
          "properties": [
            {
              "param": "pixelRendering",
              "type": "String",
              "description": "Метод расчета пиксельных координат отображения в зацикленных проекциях. Опция может принимать одно из следующих значений: jumpy - отображение располагается как можно ближе к центру области показа карты и может скачкообразно перемещается во время движения карты; static - отображение всегда располагается в начальном мире и не перемещается при движении карты. Значение по умолчанию: \"jumpy\""
            },
            {
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ]
        }
      ],
      "inherits": [
        "IPointGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты точки. Унаследован от IPointGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Point\". Унаследован от IPointGeometry."
        },
        {
          "name": "setCoordinates",
          "return": "IPointGeometryAccess",
          "description": "Задает координаты точки. Унаследован от IPointGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "geometry.pixel.Rectangle",
    "url": "geometry.pixel.Rectangle.xml",
    "def": {
      "name": "geometry.pixel.Rectangle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][]|null",
          "description": "Координаты двух противоположных углов прямоугольника. Значение по умолчанию: null"
        },
        {
          "param": "metaData",
          "type": "Object",
          "description": "Метаданные."
        }
      ],
      "inherits": [
        "IPixelRectangleGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IPixelRectangleGeometry."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "geometry.pixel.Polygon",
    "url": "geometry.pixel.Polygon.xml",
    "def": {
      "name": "geometry.pixel.Polygon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "property": "",
          "type": "Number[][][]",
          "required": true,
          "description": "Координаты многоугольника."
        },
        {
          "param": "fillRule",
          "property": "",
          "type": "String",
          "required": true,
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри."
        },
        {
          "param": "metaData",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Метаданные.",
          "properties": [
            {
              "param": "convex",
              "type": "Boolean",
              "required": false,
              "description": "Признак выпуклости многоугольника. true - выпуклый, false - невыпуклый. Для выпуклых многоугольников быстрее рассчитывается попадание точки в многоугольник. Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "IPixelPolygonGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет лежит ли переданная точка внутри многоугольника. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][][]",
          "description": "Возвращает координаты многоугольника. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки многоугольника. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество контуров в многоугольнике. Унаследован от IPixelPolygonGeometry."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "geometry.Polygon.fromEncodedCoordinates",
    "url": "geometry.Polygon.fromEncodedCoordinates.xml",
    "def": {
      "name": "geometry.Polygon.fromEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.Polygon",
    "url": "geometry.Polygon.xml",
    "def": {
      "name": "geometry.Polygon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "property": "",
          "type": "Number[][][]",
          "description": "Координаты геометрии. Значение по умолчанию: []"
        },
        {
          "param": "fillRule",
          "property": "",
          "type": "String",
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри. Значение по умолчанию: \"evenOdd\""
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции геометрии.",
          "properties": [
            {
              "param": "coordRendering",
              "type": "String",
              "description": "Строковый идентификатор, определяющий алгоритм пересчета координат геометрии в пиксельные координаты. Может принимать одно из двух значений: shortestPath - алгоритм, учитывающий зацикленность проекции по осям, и формирующий пиксельные координаты так, чтобы расстояние между двумя соседними точками было минимальным; straightPath - алгоритм, не учитывающий зацикленность проекции. Значение по умолчанию: \"shortestPath\""
            },
            {
              "param": "geodesic",
              "type": "Boolean",
              "description": "Включает отображение с учетом геодезии. Значение по умолчанию: false"
            },
            {
              "param": "pixelRendering",
              "type": "String",
              "description": "Метод расчета пиксельных координат отображения в зацикленных проекциях. Опция может принимать одно из следующих значений: jumpy - отображение располагается как можно ближе к центру области показа карты и может скачкообразно перемещается во время движения карты; static - отображение всегда располагается в начальном мире и не перемещается при движении карты. Значение по умолчанию: \"jumpy\""
            },
            {
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            },
            {
              "param": "simplification",
              "type": "Boolean",
              "description": "Включает симплификацию при рендеринге пиксельной геометрии. Значение по умолчанию: true"
            }
          ]
        }
      ],
      "inherits": [
        "IPolygonGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри многоугольника. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[][]",
          "description": "Возвращает координаты контура с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "ILinearRingGeometryAccess",
          "description": "Создает и возвращает объект ILinearRingGeometryAccess для заданного контура. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][][]",
          "description": "Возвращает массив координат геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество контуров в геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Polygon\". Унаследован от IPolygonGeometry."
        },
        {
          "name": "insert",
          "return": "IPolygonGeometryAccess",
          "description": "Добавляет новый контур с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "ILinearRingGeometryAccess",
          "description": "Удаляет контур с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "set",
          "return": "IPolygonGeometryAccess",
          "description": "Задает координаты контура c заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "IPolygonGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setFillRule",
          "return": "IPolygonGeometryAccess",
          "description": "Задает алгоритм заливки многоугольника. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        },
        {
          "name": "splice",
          "return": "ILinearRingGeometryAccess[]",
          "description": "Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "geometry.Polygon.toEncodedCoordinates",
    "url": "geometry.Polygon.toEncodedCoordinates.xml",
    "def": {
      "name": "geometry.Polygon.toEncodedCoordinates",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "geometry.Rectangle",
    "url": "geometry.Rectangle.xml",
    "def": {
      "name": "geometry.Rectangle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "property": "",
          "type": "Number[][]|null",
          "description": "Массив, содержащий координаты двух противоположных углов прямоугольника. Значение по умолчанию: null"
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции геометрии.",
          "properties": [
            {
              "param": "coordRendering",
              "type": "String",
              "description": "Строковый идентификатор, определяющий алгоритм пересчета координат геометрии в пиксельные координаты. Для геометрии \"Прямоугольник\" может принимать одно из трех значений: shortestPath - алгоритм, учитывающий зацикленность проекции по осям, и формирующий пиксельные координаты так, чтобы расстояние между противоположными углами было минимальным; straightPath - алгоритм, не учитывающий зацикленность проекции; boundsPath - алгоритм, трактующий координаты углов прямоугольника, как координаты соответственно нижнего и верхнего углов ограничивающей области. При расчете диагонали по зацикленным осям проекции всегда выбирается направление обхода против часовой стрелки."
            },
            {
              "param": "geodesic",
              "type": "Boolean",
              "description": "Включает отображение с учетом геодезии. Значение по умолчанию: false"
            },
            {
              "param": "pixelRendering",
              "type": "String",
              "description": "Метод расчета пиксельных координат отображения в зацикленных проекциях. Опция может принимать одно из следующих значений: jumpy - отображение располагается как можно ближе к центру области показа карты и может скачкообразно перемещается во время движения карты; static - отображение всегда располагается в начальном мире и не перемещается при движении карты. Значение по умолчанию: \"jumpy\""
            },
            {
              "param": "projection",
              "type": "IProjection",
              "description": "Проекция."
            }
          ]
        }
      ],
      "inherits": [
        "IRectangleGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре прямоугольника точку, ближайшую к anchorPosition. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Rectangle\". Унаследован от IRectangleGeometry."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Задает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "geometryEditor.LineString",
    "url": "geometryEditor.LineString.xml",
    "def": {
      "name": "geometryEditor.LineString",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "ILineStringGeometry",
          "required": true,
          "description": "Геометрия \"Ломаная линия\"."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого редактора, так и опции его составных частей: опции направляющих линий с префиксом guideLines.",
          "properties": [
            {
              "param": "dblClickHandler",
              "type": "Function",
              "required": false,
              "description": "Обработчик двойного щелчка по вершине. Принимает ссылку на модель редактируемой вершины. По умолчанию, обработчик определен функцией, удаляющей соответствующую вершину."
            },
            {
              "param": "drawingCursor",
              "type": "Boolean",
              "required": false,
              "description": "Курсор мыши в режиме добавления новых вершин. Значение по умолчанию: \"arrow\""
            },
            {
              "param": "drawOver",
              "type": "Boolean",
              "required": false,
              "description": "Разрешает ставить точки поверх объектов карты в режиме добавления новых вершин. Значение по умолчанию: true"
            },
            {
              "param": "edgeLayout",
              "type": "Function",
              "required": false,
              "description": "Класс макета для промежуточных меток."
            },
            {
              "param": "maxPoints",
              "type": "Number",
              "required": false,
              "description": "Максимально допустимое число вершин в ломаной линии. Значение по умолчанию: Infinity"
            },
            {
              "param": "menuManager",
              "type": "Function",
              "required": false,
              "description": "Диспетчер контекстного меню, открывающегося при щелчке по вершине. Принимает два аргумента: массив объектов, описывающих пункты контекстного меню для этой вершины; ссылку на модель редактируемой вершины. Диспетчер может изменять данные в переданном массиве. Должен возвращать массив объектов, описывающих пункты контекстного меню."
            },
            {
              "param": "vertexLayout",
              "type": "Function",
              "required": false,
              "description": "Класс макета для меток на вершинах ломаной линии."
            }
          ]
        }
      ],
      "inherits": [
        "IGeometryEditor"
      ],
      "methods": [
        {
          "name": "startDrawing",
          "description": "Включает режим добавления новых точек в ломаную линию."
        },
        {
          "name": "startEditing",
          "description": "Включает режим редактирования. Унаследован от IGeometryEditor."
        },
        {
          "name": "stopDrawing",
          "description": "Отключает режим добавления новых точек в ломаную линию."
        },
        {
          "name": "stopEditing",
          "description": "Отключает режим редактирования. Унаследован от IGeometryEditor."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Менеджер состояния редактора геометрии. Поля данных, доступные посредством методов get и set: editing - определяет включен ли редактор. Тип - Boolean. Значение по умолчанию - false. drawing - определяет включен ли режим добавления новых точек. Тип - Boolean. Значение по умолчанию - false. drawingFrom - определяет то, как добавляются новые точки в режиме добавления. Может принимать одно из двух строковых значений: \"begin\" - точки добавляются в начало ломаной линии, \"end\"- точки добавляются в конец. Значение по умолчанию - \"end\"."
        }
      ]
    }
  },
  {
    "name": "geometryEditor.Point",
    "url": "geometryEditor.Point.xml",
    "def": {
      "name": "geometryEditor.Point",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPointGeometry",
          "required": true,
          "description": "Геометрия \"Точка\"."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого редактора, так и опции его составных частей: опции направляющих линий с префиксом guideLines.",
          "properties": [
            {
              "param": "dblClickHandler",
              "type": "Function",
              "required": false,
              "description": "Обработчик двойного щелчка по вершине. Принимает ссылку на модель редактируемой вершины. По умолчанию, обработчик определен функцией, удаляющей соответствующую вершину."
            },
            {
              "param": "drawingCursor",
              "type": "Boolean",
              "required": false,
              "description": "Курсор мыши в режиме рисования. Значение по умолчанию: \"arrow\""
            },
            {
              "param": "drawOver",
              "type": "Boolean",
              "required": false,
              "description": "Разрешает ставить точки поверх объектов карты в режиме рисования. Значение по умолчанию: true"
            }
          ]
        }
      ],
      "inherits": [
        "IGeometryEditor"
      ],
      "methods": [
        {
          "name": "startDrawing",
          "description": "Включает режим рисования точки."
        },
        {
          "name": "startEditing",
          "description": "Включает режим редактирования. Унаследован от IGeometryEditor."
        },
        {
          "name": "stopDrawing",
          "description": "Отключает режим рисования точки."
        },
        {
          "name": "stopEditing",
          "description": "Отключает режим редактирования. Унаследован от IGeometryEditor."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Менеджер состояния редактора геометрии. Поля данных, доступные посредством методов get и set: editing - определяет включен ли редактор. Тип - Boolean. Значение по умолчанию - false. drawing - определяет включен ли режим рисования. Тип - Boolean. Значение по умолчанию - false."
        }
      ]
    }
  },
  {
    "name": "geometryEditor.Polygon",
    "url": "geometryEditor.Polygon.xml",
    "def": {
      "name": "geometryEditor.Polygon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPolygonGeometry",
          "required": true,
          "description": "Геометрия \"Многоугольник\"."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого редактора, так и опции его составных частей: опции направляющих линий с префиксом guideLines.",
          "properties": [
            {
              "param": "dblClickHandler",
              "type": "Function",
              "required": false,
              "description": "Обработчик двойного щелчка по вершине. Принимает ссылку на модель редактируемой вершины. По умолчанию, обработчик определен функцией, удаляющей соответствующую вершину."
            },
            {
              "param": "drawingCursor",
              "type": "Boolean",
              "required": false,
              "description": "Курсор мыши в режиме добавления новых вершин. Значение по умолчанию: \"arrow\""
            },
            {
              "param": "drawOver",
              "type": "Boolean",
              "required": false,
              "description": "Разрешает ставить точки поверх объектов карты в режиме добавления новых вершин. Значение по умолчанию: true"
            },
            {
              "param": "edgeLayout",
              "type": "Function",
              "required": false,
              "description": "Класс макета для промежуточных меток."
            },
            {
              "param": "maxPoints",
              "type": "Number",
              "required": false,
              "description": "Максимально допустимое число вершин в многоугольнике. Значение по умолчанию: Infinity"
            },
            {
              "param": "menuManager",
              "type": "Function",
              "required": false,
              "description": "Диспетчер контекстного меню, открывающегося при щелчке по вершине. Принимает два аргумента: массив объектов, описывающих пункты контекстного меню для этой вершины; ссылку на модель редактируемой вершины. Диспетчер может изменять данные в переданном массиве. Должен возвращать массив объектов, описывающих пункты контекстного меню."
            },
            {
              "param": "vertexLayout",
              "type": "Function",
              "required": false,
              "description": "Класс макета для меток на вершинах многоугольника."
            }
          ]
        }
      ],
      "inherits": [
        "IGeometryEditor"
      ],
      "methods": [
        {
          "name": "startDrawing",
          "description": "Включает режим добавления новых точек в многоугольник."
        },
        {
          "name": "startEditing",
          "description": "Включает режим редактирования. Унаследован от IGeometryEditor."
        },
        {
          "name": "stopDrawing",
          "description": "Отключает режим добавления новых точек в многоугольник."
        },
        {
          "name": "stopEditing",
          "description": "Отключает режим редактирования. Унаследован от IGeometryEditor."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Менеджер состояния редактора геометрии. Поля данных, доступные посредством методов get и set: editing - определяет включен ли редактор. Тип - Boolean. Значение по умолчанию - false. drawing - определяет включен ли режим добавления новых точек. Тип - Boolean. Значение по умолчанию - false. drawingFrom - определяет то, как добавляются новые точки в режиме добавления. Может принимать одно из двух строковых значений: \"begin\" - точки добавляются в начало многоугольника, \"end\"- точки добавляются в конец. drawingFromIndex - индекс вершины многоугольника, после которой будут добавляться новые точки в режиме добавления. Данное поле доступно только на запись, т.к. факт записи приводит к изменению порядка точек в многоугольнике, так чтобы точка с заданным индексом стала последней по счету. Тип - целое число. drawingPath - индекс контура многоугольника, в который добавляются новые точки в режиме добавления. Тип - целое число. Значение по умолчанию - 0."
        }
      ]
    }
  },
  {
    "name": "GeoObject",
    "url": "GeoObject.xml",
    "def": {
      "name": "GeoObject",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "feature",
          "property": "",
          "type": "Object",
          "description": "Описание геообъекта.",
          "properties": [
            {
              "param": "geometry",
              "type": "IGeometry|Object",
              "description": "Геометрия геообъекта. Может задаваться как экземпляр класса, реализующего интерфейс IGeometry, либо в виде хэша с полями type и coordinates."
            },
            {
              "param": "properties",
              "type": "IDataManager|Object",
              "description": "Данные геообъекта. Могут задаваться как экземпляр класса, реализующего интерфейс IDataManager, либо в виде хэша. При значениях опций по умолчанию, геообъектом трактуются следующие поля данных: iconContent - содержимое иконки геообъекта; hintContent - содержимое всплывающей подсказки геообъекта; balloonContent - содержимое балуна геообъекта; balloonContentHeader - содержимое заголовка балуна геообъекта; balloonContentBody - содержимое основой части балуна геообъекта; balloonContentFooter - содержимое нижней части балуна геообъекта. Поле balloonContent является кратким обозначением для поля balloonContentBody, но при одновременном задании balloonContentBody более приоритетен. Также вы можете дополнить данные геообъекта своими собственными полями и использовать их везде, где это возможно. Например в макете метки или макете балуна."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции геообъекта. Используя этот параметр можно задавать как опции самого геообъекта, так и опции его составных частей: Опции балуна геообъекта с префиксом balloon. Опции всплывающей подсказки геообъекта с префиксом hint. Опции редактора геометрии геообъекта с префиксом editor. Тип редактора и перечень доступных опций зависит от типа геометрии геообъекта. Смотрите описание классов geometryEditor.LineString, geometryEditor.Polygon, geometryEditor.Point. Опции геометрии могут задаваться без префикса. Смотрите описание классов IGeometry геометрий geometry.Point, geometry.Polygon и др.",
          "properties": [
            {
              "param": "cursor",
              "type": "String",
              "description": "Вид курсора над геообъектом. Значение по умолчанию: \"pointer\""
            },
            {
              "param": "draggable",
              "type": "Boolean",
              "description": "Определяет возможность перетаскивания геообъекта. Значение по умолчанию: false"
            },
            {
              "param": "fill",
              "type": "Boolean",
              "description": "Наличие заливки фигуры. Значение по умолчанию: true"
            },
            {
              "param": "fillColor",
              "type": "String",
              "description": "Цвет заливки. Значение по умолчанию: \"0066ff99\""
            },
            {
              "param": "fillOpacity",
              "type": "Number",
              "description": "Прозрачность заливки. Значение по умолчанию: 1"
            },
            {
              "param": "hasBalloon",
              "type": "Boolean",
              "description": "Определяет наличие поля balloon у геообъекта. Значение по умолчанию: true"
            },
            {
              "param": "hasHint",
              "type": "Boolean",
              "description": "Определяет наличие поля hint у геообъекта. Значение по умолчанию: true"
            },
            {
              "param": "hideIconOnBalloonOpen",
              "type": "Boolean",
              "description": "Скрывать иконку при открытии балуна. Значение по умолчанию: true"
            },
            {
              "param": "iconColor",
              "type": "String",
              "description": "Цвет иконки (для растягивающихся под содержимое иконок)."
            },
            {
              "param": "iconContentLayout",
              "type": "Function|String",
              "description": "Макет содержимого иконки. (Тип: конструктор объекта с интерфейсом ILayout или его ключ в хранилище)."
            },
            {
              "param": "iconContentOffset",
              "type": "Number[]",
              "description": "Пиксельный сдвиг содержимого иконки относительно родительского элемента. Используется в макете default#imageWithContent."
            },
            {
              "param": "iconContentPadding",
              "type": "Number[]",
              "description": "Отступ для содержимого в иконке."
            },
            {
              "param": "iconContentSize",
              "type": "Number[]",
              "description": "Размер содержимого. Используется в макете default#imageWithContent."
            },
            {
              "param": "iconImageClipRect",
              "type": "Number[][]",
              "description": "Прямоугольная область (указывается левый верхний и правый нижний углы), которая будет вырезана из исходного графического файла и смасштабирована под размеры иконки (например для использования спрайтов). По умолчанию исходная картинка подставляется полностью. Значение по умолчанию: [[0, 0], [{imageWidth}, {imageHeight}]]"
            },
            {
              "param": "iconImageHref",
              "type": "String",
              "description": "URL графического файла иконки."
            },
            {
              "param": "iconImageOffset",
              "type": "Number[]",
              "description": "Пиксельный сдвиг изображения иконки внутри родительского элемента."
            },
            {
              "param": "iconImageSize",
              "type": "Number[]",
              "description": "Размер иконки в пикселах."
            },
            {
              "param": "iconLayout",
              "type": "Function|String",
              "description": "Макет иконки. (Тип: конструктор объекта с интерфейсом ILayout или его ключ в хранилище)."
            },
            {
              "param": "iconMaxHeight",
              "type": "String",
              "description": "Максимальная высота иконки с содержимым."
            },
            {
              "param": "iconMaxWidth",
              "type": "String",
              "description": "Максимальная ширина иконки с содержимым."
            },
            {
              "param": "iconOffset",
              "type": "Number[]",
              "description": "Пиксельное смещение иконки относительно заданной позиции."
            },
            {
              "param": "iconShadow",
              "type": "Boolean",
              "description": "Флаг наличия тени у иконки. Значение по умолчанию: false"
            },
            {
              "param": "iconShadowImageHref",
              "type": "String",
              "description": "URL графического файла тени иконки."
            },
            {
              "param": "iconShadowImageOffset",
              "type": "String",
              "description": "Пиксельный сдвиг изображения тени иконки внутри родительского элемента."
            },
            {
              "param": "iconShadowImageSize",
              "type": "String",
              "description": "Размер тени иконки."
            },
            {
              "param": "iconShadowLayout",
              "type": "Function|String",
              "description": "Макет тени иконки. (Тип: конструктор объекта с интерфейсом ILayout или его ключ в хранилище)."
            },
            {
              "param": "iconShadowOffset",
              "type": "String",
              "description": "Пиксельное смещение тени иконки относительно заданной позиции."
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "description": "Модель интерактивности. Доступные ключи и их значения перечислены в описании interactivityModel.storage. Значение по умолчанию: \"default#geoObject\""
            },
            {
              "param": "opacity",
              "type": "Number",
              "description": "Прозрачность. Значение по умолчанию: 1"
            },
            {
              "param": "openBalloonOnClick",
              "type": "Boolean",
              "description": "Определяет показывать ли балун при щелчке на геообъекте. Значение по умолчанию: true"
            },
            {
              "param": "openEmptyBalloon",
              "type": "Boolean",
              "description": "Определяет показывать ли пустой балун при щелчке на геообъекте. Значение по умолчанию: false"
            },
            {
              "param": "overlayFactory",
              "type": "String|IOverlayFactory",
              "description": "Фабрика оверлеев. На основе типа геометрии геообъекта создает те или иные оверлеи для отображения геообъекта. Список доступных фабрик смотрите в описании geoObject.overlayFactory.storage. Значение по умолчанию: \"default#interactive\""
            },
            {
              "param": "pane",
              "type": "IPane|String",
              "description": "Контейнер оверлея геообъекта. Значение по умолчанию: \"overlays\""
            },
            {
              "param": "preset",
              "type": "String",
              "description": "Ключ предустановленных опций геообъекта. Список ключей, доступных в пакетах package.standard и package.full, содержится в описании option.presetStorage."
            },
            {
              "param": "showEmptyHint",
              "type": "Boolean",
              "description": "Определяет показывать ли пустой хинт при наведении указателя мыши на геообъект. Значение по умолчанию: false"
            },
            {
              "param": "showHintOnHover",
              "type": "Boolean",
              "description": "Определяет показывать ли хинт при наведении указателя мыши на геообъект. Значение по умолчанию: true"
            },
            {
              "param": "stroke",
              "type": "Boolean",
              "description": "Наличие обводки фигуры. Значение по умолчанию: true"
            },
            {
              "param": "strokeColor",
              "type": "String",
              "description": "Цвет линии или обводки. Значение по умолчанию: \"0066ffff\""
            },
            {
              "param": "strokeOpacity",
              "type": "Number",
              "description": "Прозрачность линии или обводки. Значение по умолчанию: 1"
            },
            {
              "param": "strokeStyle",
              "type": "String",
              "description": "Стиль линии или обводки."
            },
            {
              "param": "strokeWidth",
              "type": "Number",
              "description": "Толщина линии или обводки. Значение по умолчанию: 1"
            },
            {
              "param": "visible",
              "type": "Boolean",
              "description": "Определяет видимость геообъекта. Значение по умолчанию: true"
            },
            {
              "param": "zIndex",
              "type": "Number",
              "description": "z-index геообъекта в обычном состоянии. Наименее приоритетный."
            },
            {
              "param": "zIndexActive",
              "type": "Number",
              "description": "z-index геообъекта с открытым балуном. Наиболее приоритетный."
            },
            {
              "param": "zIndexDrag",
              "type": "Number",
              "description": "z-index геообъекта при перетаскивании."
            },
            {
              "param": "zIndexHover",
              "type": "Number",
              "description": "z-index геообъекта при наведении на него указателя мыши."
            }
          ]
        }
      ],
      "inherits": [
        "IGeoObject"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта."
        },
        {
          "name": "editor",
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "hint",
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "geoObject.Hint",
    "url": "geoObject.Hint.xml",
    "def": {
      "name": "geoObject.Hint",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geoObject",
          "type": "Object",
          "required": true,
          "description": "Геообъект."
        }
      ],
      "methods": [
        {
          "name": "hide",
          "return": "",
          "description": "Скрывает хинт.",
          "params": [
            {
              "param": "callback",
              "type": "",
              "required": true,
              "description": ""
            },
            {
              "param": "urgently",
              "type": "",
              "required": true,
              "description": ""
            }
          ]
        },
        {
          "name": "isShown",
          "return": "Boolean",
          "description": "Проверяет состояние хинта на карте."
        },
        {
          "name": "move",
          "return": "",
          "description": "Передвигает хинт, если он в данный момент показан.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Новая позиция хинта в глобальных пиксельных координатах."
            }
          ]
        },
        {
          "name": "show",
          "return": "Hint",
          "description": "Показывает хинт.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Позиция хинта в глобальных пиксельных координатах."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий хинта геообъекта."
        }
      ]
    }
  },
  {
    "name": "geoObject.Balloon",
    "url": "geoObject.Balloon.xml",
    "def": {
      "name": "geoObject.Balloon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geoObject",
          "type": "Object",
          "required": true,
          "description": "Геообъект."
        }
      ],
      "methods": [
        {
          "name": "calculatePixelPosition",
          "return": "",
          "description": "Определяет пиксельные координаты точки геообъекта.",
          "params": [
            {
              "param": "anchorPixels",
              "type": "Number[]",
              "description": "Координаты точки привязки. Если указать данный параметр, то результатом работы функции будет точка геообъекта, которая является ближайшей к заданной точке."
            }
          ]
        },
        {
          "name": "close",
          "return": "",
          "description": "Закрывает балун.",
          "params": [
            {
              "param": "callback",
              "type": "",
              "required": true,
              "description": ""
            }
          ]
        },
        {
          "name": "isOpen",
          "return": "Boolean",
          "description": "Проверяет, открыт ли балун в данный момент."
        },
        {
          "name": "open",
          "return": "Balloon",
          "description": "Открывает балун.",
          "params": [
            {
              "param": "anchorPixels",
              "type": "Number[]",
              "description": "Точка привязки балуна в глобальных пиксельных координатах. По умолчанию используются текущие координаты центра карты."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий балуна геообъекта."
        }
      ]
    }
  },
  {
    "name": "geoObject.overlayFactory.hotspot",
    "url": "geoObject.overlayFactory.hotspot.xml",
    "def": {
      "name": "geoObject.overlayFactory.hotspot",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "createOverlay",
          "return": "IOverlay",
          "description": "Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "geoObject.overlayFactory.interactiveGraphics",
    "url": "geoObject.overlayFactory.interactiveGraphics.xml",
    "def": {
      "name": "geoObject.overlayFactory.interactiveGraphics",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "createOverlay",
          "return": "IOverlay",
          "description": "Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "geoObject.overlayFactory.staticGraphics",
    "url": "geoObject.overlayFactory.staticGraphics.xml",
    "def": {
      "name": "geoObject.overlayFactory.staticGraphics",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "createOverlay",
          "return": "IOverlay",
          "description": "Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "geoObject.overlayFactory.interactive",
    "url": "geoObject.overlayFactory.interactive.xml",
    "def": {
      "name": "geoObject.overlayFactory.interactive",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "createOverlay",
          "return": "IOverlay",
          "description": "Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "geoObject.overlayFactory.storage",
    "url": "geoObject.overlayFactory.storage.xml",
    "def": {
      "name": "geoObject.overlayFactory.storage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "geoObject.OverlayFactory",
    "url": "geoObject.OverlayFactory.xml",
    "def": {
      "name": "geoObject.OverlayFactory",
      "hasCtor": true,
      "inherits": [
        "IOverlayFactory",
        "util.Storage"
      ],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище. Унаследован от util.Storage."
        },
        {
          "name": "createOverlay",
          "return": "IOverlay",
          "description": "Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии. Унаследован от IOverlayFactory."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом. Унаследован от util.Storage."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища. Унаследован от util.Storage."
        }
      ]
    }
  },
  {
    "name": "geoXml.load",
    "url": "geoXml.load.xml",
    "def": {
      "name": "geoXml.load",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "graphics.style.color",
    "url": "graphics.style.color.xml",
    "def": {
      "name": "graphics.style.color",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "GeoObjectCollection",
    "url": "GeoObjectCollection.xml",
    "def": {
      "name": "GeoObjectCollection",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "feature",
          "property": "",
          "type": "Object",
          "description": "Описание коллекции. Функционально соответствует описанию геообъекта. Смотрите GeoObject.",
          "properties": [
            {
              "param": "geometry",
              "type": "IGeometry|Object",
              "description": "Геометрия коллекции."
            },
            {
              "param": "properties",
              "type": "IDataManager|Object",
              "description": "Данные коллекции."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции коллекции. Здесь можно задавать все опции описанные в классе GeoObject. Значения опций будут применяться как к самой коллекции, так и к ее дочерним объектам, если для них данные опции не заданы."
        }
      ],
      "inherits": [
        "IGeoObject",
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "name": "add",
          "return": "GeoObjectCollection",
          "description": "Добавляет геообъект в коллекцию.",
          "params": [
            {
              "param": "child",
              "type": "IGeoObject",
              "required": true,
              "description": "Дочерний геообъект."
            }
          ]
        },
        {
          "name": "each",
          "return": "",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст выполнения функции."
            }
          ]
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает географические координаты области, охватывающей коллекцию и все ее дочерние геообъекты."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество геообъектов в коллекции."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getPixelBounds",
          "return": "Number[][]|null",
          "description": "Возвращает глобальные пиксельные координаты области, охватывающей коллекцию и все ее дочерние геообъекты."
        },
        {
          "name": "remove",
          "return": "GeoObjectCollection",
          "description": "Удаляет геообъект из коллекции.",
          "params": [
            {
              "param": "child",
              "type": "IGeoObject",
              "required": true,
              "description": "Дочерний геообъект."
            }
          ]
        },
        {
          "name": "removeAll",
          "return": "GeoObjectCollection",
          "description": "Удаляет из коллекции все геообъекты."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "GeoObjectArray",
    "url": "GeoObjectArray.xml",
    "def": {
      "name": "GeoObjectArray",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "feature",
          "property": "",
          "type": "Object",
          "description": "Описание группы. Функционально соответствует описанию геообъекта. Смотрите GeoObject.",
          "properties": [
            {
              "param": "geometry",
              "type": "IGeometry|Object",
              "description": "Геометрия группы."
            },
            {
              "param": "properties",
              "type": "IDataManager|Object",
              "description": "Данные группы."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции группы. Здесь можно задавать все опции описанные в классе GeoObject. Значения опций будут применяться как к самой группе, так и к ее дочерним объектам, если для них данные опции не заданы."
        }
      ],
      "inherits": [
        "IGeoObject",
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "name": "add",
          "return": "GeoObjectArray",
          "description": "Добавляет геообъект в группу.",
          "params": [
            {
              "param": "child",
              "type": "IGeoObject",
              "required": true,
              "description": "Дочерний геообъект."
            },
            {
              "param": "index",
              "type": "Integer",
              "required": false,
              "description": "Индекс, в который добавляется новый объект. Если индекс не задан, то объект будет добавлен в конец группы."
            }
          ]
        },
        {
          "name": "each",
          "return": "",
          "description": "Перебирает все элементы группы, вызывая для каждого функцию-обработчик.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст выполнения функции."
            }
          ]
        },
        {
          "name": "get",
          "return": "IGeoObject|null",
          "description": "Возвращает ссылку на дочерний геообъект, либо null, если объекта с заданным индексом нет в группе.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс дочернего геообъекта."
            }
          ]
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает географические координаты области, охватывающей группу и все ее дочерние геообъекты."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по группе."
        },
        {
          "name": "getLength",
          "return": "GeoObjectArray",
          "description": "Возвращает количество геообъектов в группе."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getPixelBounds",
          "return": "Number[][]|null",
          "description": "Возвращает глобальные пиксельные координаты области, охватывающей группу и все ее дочерние геообъекты."
        },
        {
          "name": "indexOf",
          "return": "Integer",
          "description": "Возвращает индекс геообъекта в группе или -1, если объект не найден.",
          "params": [
            {
              "param": "object",
              "type": "Object",
              "required": true,
              "description": "Геообъект."
            }
          ]
        },
        {
          "name": "remove",
          "return": "GeoObjectArray",
          "description": "Удаляет геообъект из группы.",
          "params": [
            {
              "param": "child",
              "type": "IGeoObject",
              "required": true,
              "description": "Дочерний геообъект."
            }
          ]
        },
        {
          "name": "removeAll",
          "return": "GeoObjectArray",
          "description": "Удаляет из группы все геообъекты."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "splice",
          "return": "IGeoObject[]",
          "description": "Удаляет геообъекты из группы. Если необходимо, вставляет на их место другие. Объекты, которые будут вставлены вместо удаляемых, передаются как дополнительные параметры (после параметра number).",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс геообъекта, с которого начинается удаление."
            },
            {
              "param": "number",
              "type": "Integer",
              "required": true,
              "description": "Количество удаляемых геообъектов."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "graphics.style.stroke",
    "url": "graphics.style.stroke.xml",
    "def": {
      "name": "graphics.style.stroke",
      "hasCtor": false,
      "params": [],
      "props": [
        {
          "name": "dash",
          "type": "",
          "description": "Тире"
        },
        {
          "name": "dashdot",
          "type": "",
          "description": "Длинное тире-короткое тире"
        },
        {
          "name": "dot",
          "type": "",
          "description": "Точки"
        },
        {
          "name": "longdash",
          "type": "",
          "description": "Длинные тире"
        },
        {
          "name": "longdashdot",
          "type": "",
          "description": "Очень длинное тире - точка"
        },
        {
          "name": "longdashdotdot",
          "type": "",
          "description": "Длинное тире-точка-точка"
        },
        {
          "name": "shortdash",
          "type": "",
          "description": "Короткие тире"
        },
        {
          "name": "shortdashdot",
          "type": "",
          "description": "Тире-точка"
        },
        {
          "name": "shortdashdotdot",
          "type": "",
          "description": "Тире-точка-точка"
        },
        {
          "name": "shortdot",
          "type": "",
          "description": "Точки через двойной интервал"
        },
        {
          "name": "solid",
          "type": "",
          "description": "Сплошная линия"
        }
      ]
    }
  },
  {
    "name": "hotspot.layer.Balloon",
    "url": "hotspot.layer.Balloon.xml",
    "def": {
      "name": "hotspot.layer.Balloon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "layer",
          "type": "hotspot.Layer",
          "required": true,
          "description": "Слой, на котором ведется работа с балунами."
        }
      ],
      "methods": [
        {
          "name": "close",
          "return": "",
          "description": "Закрывает балун слоя хотспотов, если он открыт на карте."
        },
        {
          "name": "isOpen",
          "return": "Boolean",
          "description": "Проверяет, открыт ли балун хотспотного слоя на карте."
        },
        {
          "name": "open",
          "return": "Balloon",
          "description": "Открывает балун в заданной точке.",
          "params": [
            {
              "param": "globalPixelPosition",
              "type": "Number[]",
              "required": true,
              "description": "Пиксельные координаты точки, в которой требуется открыть балун."
            },
            {
              "param": "data",
              "type": "Object",
              "required": false,
              "description": "Данные балуна."
            },
            {
              "param": "options",
              "type": "Object",
              "required": false,
              "description": "Опции балуна."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "Hint",
    "url": "Hint.xml",
    "def": {
      "name": "Hint",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "property": "",
          "type": "Map",
          "required": true,
          "description": "Ссылка на объект карты."
        },
        {
          "param": "data",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "contentLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет для содержимого хинта. (Тип: конструктор объекта с интерфейсом ILayout)."
            },
            {
              "param": "fitPane",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, заставляющий хинт сдвигать свою позицию, чтобы не выходить за границы контейнера. Значение по умолчанию: true"
            },
            {
              "param": "hideTimeout",
              "type": "Number",
              "required": false,
              "description": "Задержка закрытия (в мс). Значение по умолчанию: 700"
            },
            {
              "param": "holdByMouse",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, оменяющий закрытие хинта, находящегося под курсором. Значение по умолчанию: true"
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Ключ модели интерактивности. Доступные ключи и их значения перечислены в описании interactivityModel.storage. Значение по умолчанию: 'default#opaque'"
            },
            {
              "param": "layout",
              "type": "Function|String",
              "required": false,
              "description": "Внешний макет хинта. (Тип: конструктор объекта с интерфейсом ILayout)."
            },
            {
              "param": "overlay",
              "type": "IOverlay",
              "required": false,
              "description": "Класс оверлея. Значение по умолчанию: overlay.Label"
            },
            {
              "param": "pane",
              "type": "IPane|String",
              "required": false,
              "description": "Контейнер оверлея хинта. \"outers\" - вне карты, \"floats\" - в пределах карты. Значение по умолчанию: outers"
            },
            {
              "param": "showTimeout",
              "type": "Number",
              "required": false,
              "description": "Задержка открытия (в мс). Значение по умолчанию: 150"
            }
          ]
        }
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "Hint",
          "description": "Уничтожает хинт. Предварительно генерирует событие beforedestroy, при отмене которого уничтожения хинта не произойдет. После уничтожения хинта генерируется событие destroy.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": false,
              "description": "Функция, которая будет вызвана после уничтожения балуна. Если событие beforedestroy было отменено, в функцию первым параметром будет передано сообщение о том, что хинт не был уничтожен."
            },
            {
              "param": "urgently",
              "type": "Boolean",
              "required": true,
              "description": "Скрыть хинт сразу, без временной задержки и без учета положения курсора."
            }
          ]
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает данные хинта."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay",
          "description": "Возвращает оверлей хинта."
        },
        {
          "name": "getPosition",
          "return": "Number[]",
          "description": "Возвращает позицию хинта."
        },
        {
          "name": "hide",
          "return": "Hint",
          "description": "Скрывает хинт.",
          "params": [
            {
              "param": "urgently",
              "type": "Boolean",
              "required": true,
              "description": "Скрыть хинт сразу, без временной задержки и без учета положения курсора."
            }
          ]
        },
        {
          "name": "isShown",
          "return": "Boolean",
          "description": "Возвращает состояние хинта: открыт/скрыт."
        },
        {
          "name": "setData",
          "return": "Hint",
          "description": "Устанавливает данные хинта.",
          "params": [
            {
              "param": "data",
              "type": "Object",
              "required": true,
              "description": "Данные."
            }
          ]
        },
        {
          "name": "setPosition",
          "return": "Hint",
          "description": "Устанавливает координаты хинта в проекции, заданной в опциях.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Новая позиция."
            }
          ]
        },
        {
          "name": "show",
          "return": "Hint",
          "description": "Отображает хинт на карте в точке с заданными координатами. Если хинт уже отображен, перемещает его в указанную точку.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "description": "Координаты хинта."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "hotspot.Layer",
    "url": "hotspot.Layer.xml",
    "def": {
      "name": "hotspot.Layer",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "objectSource",
          "property": "",
          "type": "IHotspotObjectSource",
          "required": true,
          "description": "Источник объектов слоя."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции слоя. Опции для балунов Balloon и хинтов Hint хотспотного слоя нужно указывать с префиксами 'balloon' и 'hint'.",
          "properties": [
            {
              "param": "cursor",
              "type": "String",
              "required": false,
              "description": "Тип курсора. Значение по умолчанию: 'pointer'"
            },
            {
              "param": "dontChangeCursor",
              "type": "Boolean",
              "required": false,
              "description": "Опция, позволяющая запретить изменение курсора при наведении на объект слоя. По умолчанию курсоры изменяются. Значение по умолчанию: false"
            },
            {
              "param": "hasBalloon",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, показывающий, есть ли у слоя балуны. Если значение флага false, у слоя не будет создано поле .balloon. Значение по умолчанию: true"
            },
            {
              "param": "hasHint",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, показывающий, есть ли у слоя хинты. Если значение флага false, у слоя не будет создано поле .hint. Значение по умолчанию: true"
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Модель интерактивности слоя. Доступные ключи и их значения перечислены в описании interactivityModel.storage. Значение по умолчанию: 'default#layer'"
            },
            {
              "param": "openBalloonOnClick",
              "type": "Boolean",
              "required": false,
              "description": "Опция, позволяющая запретить открытие балуна при клике на хотспотном объекте. По умолчанию открытие балуна разрешено. Значение по умолчанию: true"
            },
            {
              "param": "openEmptyBalloon",
              "type": "String",
              "required": false,
              "description": "Открывать балун с пустым содержимым. Значение по умолчанию: false"
            },
            {
              "param": "showEmptyHint",
              "type": "String",
              "required": false,
              "description": "Показывать всплывающую подсказку с пустым содержимым. Значение по умолчанию: false"
            },
            {
              "param": "showHintOnHover",
              "type": "Boolean",
              "required": false,
              "description": "Опция, позволяющая запретить показ хинта при наведении на хотспотный объект. По умолчанию показ хинтов разрешен. Значение по умолчанию: true"
            },
            {
              "param": "zIndex",
              "type": "Number",
              "required": false,
              "description": "Значение zIndex слоя. Когда активный объект ищется в пределах одного слоя, то при одновременном попадании курсора в два объекта выбирается объект с наибольшми значением zIndex. При дальнейшей работе - например при определении, фигура какого слоя является более приоритетной, используется значение zIndex слоя."
            }
          ]
        }
      ],
      "inherits": [
        "IChildOnMap",
        "ICustomizable"
      ],
      "methods": [
        {
          "name": "getObjectSource",
          "return": "IHotspotObjectSource",
          "description": "Возвращает источник объектов слоя активных областей."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "update",
          "return": "",
          "description": "Обновляет слой активных областей. После выполнения этой команды загруженные ранее объекты удаляются из контейнера и запрашиваются новые данные."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "hotspot.layer.Balloon",
          "description": "Объект для управления балунами слоя хотспотов."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "hint",
          "type": "hotspot.layer.Hint",
          "description": "Пространство имен для работы с хинтами слоя хотспотов."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "hotspot.layer.Hint",
    "url": "hotspot.layer.Hint.xml",
    "def": {
      "name": "hotspot.layer.Hint",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "layer",
          "type": "hotspot.Layer",
          "required": true,
          "description": "Слой активных областей."
        }
      ],
      "methods": [
        {
          "name": "hide",
          "return": "",
          "description": "Скрывает хинт.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция, которая вызывается при закрытии балуна."
            },
            {
              "param": "urgently",
              "type": "Boolean",
              "required": true,
              "description": "Спрятать хинт немедленно. При значении false хинт спрячется по таймауту."
            }
          ]
        },
        {
          "name": "isShown",
          "return": "Boolean",
          "description": "Проверяет состояние хинта на карте."
        },
        {
          "name": "show",
          "return": "Hint",
          "description": "Показывает хинт.",
          "params": [
            {
              "param": "globalPixelPosition",
              "type": "Number[]",
              "required": true,
              "description": "Позиция хинта в глобальных пиксельных координатах."
            },
            {
              "param": "data",
              "type": "Object",
              "required": false,
              "description": "Данные."
            },
            {
              "param": "options",
              "type": "Object",
              "required": false,
              "description": "Опции."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "hotspot.Shape",
    "url": "hotspot.Shape.xml",
    "def": {
      "name": "hotspot.Shape",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "feature",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "",
          "properties": [
            {
              "param": "geometry",
              "type": "Object|IGeometry",
              "required": false,
              "description": "Реальная геометрия объекта."
            },
            {
              "param": "pixelGeometry",
              "type": "IPixelGeometry",
              "required": false,
              "description": "Пиксельные координаты фигуры."
            },
            {
              "param": "properties",
              "type": "Object|IDataManager",
              "required": false,
              "description": "Данные объекта."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Данные объекта.",
          "properties": [
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Ключ модели интерактивности фигуры. Доступные ключи и их значения перечислены в описании interactivityModel.Storage. Значение по умолчанию: 'default#layer'"
            },
            {
              "param": "zIndex",
              "type": "Number",
              "required": false,
              "description": "zIndex фигуры."
            }
          ]
        }
      ],
      "inherits": [
        "IHotspotShape"
      ],
      "methods": [
        {
          "name": "getContainer",
          "return": "IHotspotContainer",
          "description": "Возвращает контейнер хотспотных шейпов. Унаследован от IHotspotShape."
        },
        {
          "name": "getGeometry",
          "return": "Object",
          "description": "Метод для получения реальной геометрии объекта. Унаследован от IHotspotShape."
        },
        {
          "name": "getId",
          "return": "Number",
          "description": "Возвращает идентификатор объекта. Унаследован от IHotspotShape."
        },
        {
          "name": "getProperties",
          "return": "Object",
          "description": "Возвращает данные объекта. Унаследован от IHotspotShape."
        },
        {
          "name": "getRenderedGeometry",
          "return": "IHotspotShapeGeometry",
          "description": "Возвращает пиксельную геометрию хотспотного объекта. Унаследован от IHotspotShape."
        },
        {
          "name": "setContainer",
          "return": "",
          "description": "Метод для добавления хотспотного шейпа в контейнер. Унаследован от IHotspotShape."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Метод для задания реальной геометрии объекта. Унаследован от IHotspotShape."
        },
        {
          "name": "setId",
          "return": "",
          "description": ""
        },
        {
          "name": "setProperties",
          "return": "",
          "description": ""
        },
        {
          "name": "setRenderedGeometry",
          "return": "",
          "description": ""
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "hotspot.ObjectSource",
    "url": "hotspot.ObjectSource.xml",
    "def": {
      "name": "hotspot.ObjectSource",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "tileUrlTemplate",
          "property": "",
          "type": "String|Function",
          "required": true,
          "description": "Шаблон URL данных, соответствующих тайлу. Поддерживаются специальные конструкции и возможность использования функции по аналогии с Layer."
        },
        {
          "param": "keyTemplate__Function",
          "property": "",
          "type": "String",
          "required": false,
          "description": "Шаблон идентификатора тайла. Используется для формирования padding в jsonp-запросе за данными. Задается по аналогии с предыдущим параметром. Все символы, не являющиеся буквой, цифрой или символом '_', будут заменены на '_'. Если параметр не задан, то padding запроса будет сгенерирован автоматически. Примеры преобразований при tileNumber=[3, 1], zoom=9: 'myCallback=%x' - 'myCallback_3' '%c' - 'x_3_y_1_z_9' 'callback2_%c' - 'callback2_x_3_y_1_z_9' 'callback%test' - 'callback_test'"
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции источника данных.",
          "properties": [
            {
              "param": "bounds",
              "type": "Bounds",
              "required": false,
              "description": "Область на карте, для которой есть данные или null, если данные есть везде. Опция для стандартной реализации метода restrict. Значение по умолчанию: null"
            },
            {
              "param": "maxZoom",
              "type": "Bounds",
              "required": false,
              "description": "Максимальный уровень масштабирования, для которого делаются запросы за данными. Опция для стандартной реализации метода restrict. Значение по умолчанию: 0"
            },
            {
              "param": "minZoom",
              "type": "Bounds",
              "required": false,
              "description": "Минимальный уровень масштабирования, для которого делаются запросы за данными. Опция для стандартной реализации метода restrict. Значение по умолчанию: 0"
            },
            {
              "param": "noCache",
              "type": "Boolean",
              "required": false,
              "description": "false - использовать встроенный кэш браузера, true - не использовать (к каждому URL будет автоматически приписываться случайный GET-параметр, чтобы исключить кэширование тайлов браузером). Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "IHotspotObjectSource"
      ],
      "methods": [
        {
          "name": "cancelLastRequest",
          "return": "",
          "description": "Отменяет последний запрос за данными. Унаследован от IHotspotObjectSource."
        },
        {
          "name": "getKey",
          "return": "String",
          "description": "Возвращает имя callback-функции (padding) в jsonp-запросе, если оно статическое, либо null, если можно использовать динамический jsonp-callback. Шаблоны поддерживают те же подстановки, что и в шаблоне url тайла. Все символы, не являющиеся буквой, цифрой или символом '_', будут заменены на '_'.",
          "params": [
            {
              "param": "tileNumber",
              "type": "Number[]",
              "required": true,
              "description": "Номер тайла (тайловые координаты)."
            },
            {
              "param": "zoom",
              "type": "Integer",
              "required": true,
              "description": "Уровень масштаба."
            }
          ]
        },
        {
          "name": "getKeyTemplate",
          "return": "String",
          "description": "Возвращает шаблон идентификатора тайла."
        },
        {
          "name": "getTileUrl",
          "return": "String",
          "description": "Возвращает URL данных для конкретного тайла.",
          "params": [
            {
              "param": "tileNumber",
              "type": "Number[]",
              "required": true,
              "description": "Номер тайла (тайловые координаты)."
            },
            {
              "param": "zoom",
              "type": "Integer",
              "required": true,
              "description": "Уровень масштабирования."
            }
          ]
        },
        {
          "name": "getTileUrlTemplate",
          "return": "String",
          "description": "Возвращает шаблон URL данных для тайла."
        },
        {
          "name": "parseResponse",
          "return": "",
          "description": "Разбирает ответ сервера. Возвращает в callback массив объектов-активных областей, сформированных по json-описанию.",
          "params": [
            {
              "param": "layer",
              "type": "hotspot.Layer",
              "required": true,
              "description": "Слой, которому принадлежат объекты."
            },
            {
              "param": "res",
              "type": "Object",
              "required": true,
              "description": "Ответ сервера."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "tileNumber",
              "type": "Number[]",
              "required": true,
              "description": "Номер тайла, для которого пришел ответ."
            },
            {
              "param": "zoom",
              "type": "Number",
              "required": true,
              "description": "Коэффициент масштабирования, для которого пришел ответ. массива объектов."
            }
          ]
        },
        {
          "name": "requestObjects",
          "return": "",
          "description": "Строит массив объектов IHotspotShape, соответствующих определенному слою, тайлу и коэффициенту масштабирования карты, и передает его в функцию callback. Унаследован от IHotspotObjectSource."
        },
        {
          "name": "restrict",
          "return": "Boolean",
          "description": "Метод, который вызывается перед тем, как отправить запрос за данными для тайла. Если метод возвращает true, то запрос на сервер посылаться не будет, и в качестве ответа вернется пустой массив объектов.",
          "params": [
            {
              "param": "layer",
              "type": "hotspot.Layer",
              "required": true,
              "description": "Слой активных областей."
            },
            {
              "param": "tileNumber",
              "type": "Number[]",
              "required": true,
              "description": "Номер тайла."
            },
            {
              "param": "zoom",
              "type": "Integer",
              "required": true,
              "description": "Коэффициент масштабирования."
            }
          ]
        },
        {
          "name": "setKeyTemplate",
          "return": "",
          "description": "Задает новый шаблон идентификатора тайла.",
          "params": [
            {
              "param": "template",
              "type": "String",
              "required": true,
              "description": "Шаблон идентификатора."
            }
          ]
        },
        {
          "name": "setTileUrlTemplate",
          "return": "",
          "description": "Задает новый шаблон URL данных для тайла.",
          "params": [
            {
              "param": "template",
              "type": "String",
              "required": true,
              "description": "Шаблон URL"
            }
          ]
        }
      ],
      "props": [
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "interactivityModel.storage",
    "url": "interactivityModel.storage.xml",
    "def": {
      "name": "interactivityModel.storage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "layer.tileContainer.DomContainer",
    "url": "layer.tileContainer.DomContainer.xml",
    "def": {
      "name": "layer.tileContainer.DomContainer",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "layer",
          "property": "",
          "type": "ILayer",
          "required": true,
          "description": "Слой."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции контейнера.",
          "properties": [
            {
              "param": "notFoundTile",
              "type": "String|IDomTile",
              "required": false,
              "description": "Опция, указывающая, какой тайл нужно отображать на карте, если слой не имеет данных для указанной области. Может быть либо строкой - URL картинки, которую нужно показать, либо конструктором тайла. Значение по умолчанию: null"
            },
            {
              "param": "tileClass",
              "type": "Function",
              "required": false,
              "description": "Класс тайлов, используемых контейнером. Должен реализовывать интерфейс IDomTile. Значение по умолчанию: imports.layer.DomTile"
            },
            {
              "param": "tileTransparent",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, показывающий, являются ли тайлы контейнера прозрачными. Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "IChildOnMap"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getTile",
          "return": "IDomTile",
          "description": "Фабричная функция создания тайлов.",
          "params": [
            {
              "param": "tileNumber",
              "type": "Number[]",
              "required": true,
              "description": "Номер тайла."
            },
            {
              "param": "tileZoom",
              "type": "Number",
              "required": true,
              "description": "Масштаб тайла."
            },
            {
              "param": "priority",
              "type": "Number",
              "required": true,
              "description": "Приоритет загрузки."
            }
          ]
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "layer.storage",
    "url": "layer.storage.xml",
    "def": {
      "name": "layer.storage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "layout.Image",
    "url": "layout.Image.xml",
    "def": {
      "name": null,
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "layer.DomTile",
    "url": "layer.DomTile.xml",
    "def": {
      "name": "layer.DomTile",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "url",
          "property": "",
          "type": "String",
          "required": true,
          "description": "URL изображения."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "tileAnimationDuration",
              "type": "Number",
              "required": false,
              "description": "Продолжительность анимации прозрачности изображения при рисовании в мс (применяется только в браузерах, поддерживающих CSS Transition для свойства opacity). Значение по умолчанию: 300"
            }
          ]
        }
      ],
      "inherits": [
        "IDomTile"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Уничтожает тайл. Унаследован от IDomTile."
        },
        {
          "name": "isReady",
          "return": "Boolean",
          "description": "Проверяет готовность тайла. Унаследован от IDomTile."
        },
        {
          "name": "renderAt",
          "return": "",
          "description": "Добавляет тайл в родительский HTML-элемент. Унаследован от IDomTile."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий тайла. Унаследовано от IDomTile."
        }
      ]
    }
  },
  {
    "name": "Layer",
    "url": "Layer.xml",
    "def": {
      "name": "Layer",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "tileUrlTemplate",
          "property": "",
          "type": "String|Function",
          "required": true,
          "description": "Строковый шаблон URL тайла или функция, которая генерирует URL тайла. Для строкового шаблона поддерживается подстановка: %c - заменяется на x=номер[0]&y=номер[1]&z=уровень масштабирования; %x - заменяется на номер[0] %y - заменяется на номер[1] %z - заменяется на уровень масштабирования %l - заменяется на lang=язык; %d или %d|n - заменяется на число от 1 до n, в зависимости от номера тайла. n - количество доменов. Используется для распределения нагрузки между несколькими доменами. В качестве n нужно указывать степени двойки (2, 4, 16 и т.д.). Если шаблон имеет вид %d, то n=4. Функция-шаблон получает на вход три параметра: tileNumber - массив из двух чисел, номера тайла по x и y; tileZoom - уровень масштабирования; Возвращает строку-URL."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "brightness",
              "type": "Number",
              "required": false,
              "description": "Яркость слоя. Задается числом от 0 до 1. 0 соответствует черному цвету, 1 - белому. Значение по умолчанию: 0.5"
            },
            {
              "param": "notFoundTile",
              "type": "String|IDomTile|null",
              "required": false,
              "description": "Опция, указывающая, какой тайл нужно отображать на карте, если слой не имеет данных для указанной области. Может быть либо строкой - URL картинки, которую нужно показать, либо конструктором тайла. Если значение null, то будет показан стандартный тайл с текстовым сообщением. Значение по умолчанию: null"
            },
            {
              "param": "pane",
              "type": "IPane",
              "required": false,
              "description": "Родительский контейнер слоёв. Значение по умолчанию: 'layers'"
            },
            {
              "param": "projection",
              "type": "Object",
              "required": false,
              "description": "Проекция слоя."
            },
            {
              "param": "tileSize",
              "type": "Number[]",
              "required": false,
              "description": "Размер тайлов слоя. Значение по умолчанию: [256, 256]"
            },
            {
              "param": "tileTransparent",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, показывающий, являются ли тайлы слоя прозрачными. Значение по умолчанию: false"
            },
            {
              "param": "zIndex",
              "type": "Number",
              "required": false,
              "description": "Z-index слоя в контейнере слоёв. Значение по умолчанию: constants.zIndex.layer"
            }
          ]
        }
      ],
      "inherits": [
        "ILayer",
        "IPositioningContext"
      ],
      "methods": [
        {
          "name": "clientPixelsToNumber",
          "return": "Number[]",
          "description": "Возвращает номер тайла, в который попадает указанная точка при заданном уровне масштаба тайлов.",
          "params": [
            {
              "param": "clientPixelPoint",
              "type": "Number",
              "required": true,
              "description": "Точка в клиентских пиксельных координатах."
            },
            {
              "param": "tileZoom",
              "type": "Number",
              "required": true,
              "description": "Уровень масштаба тайла."
            }
          ]
        },
        {
          "name": "fromClientPixels",
          "return": "Number[]",
          "description": "Преобразует клиентские пиксельные координаты в глобальные. Унаследован от IPositioningContext."
        },
        {
          "name": "getBrightness",
          "return": "Number",
          "description": "Необязательный метод. Возвращает яркость слоя. В зависимости от суммарной яркости слоев, добавленных на карту, выбирается цвет логотипа и копирайтов на карте. Унаследован от ILayer."
        },
        {
          "name": "getCopyrights",
          "return": "util.Promise",
          "description": "Необязательный метод. Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах. Унаследован от ILayer."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getTileSize",
          "return": "Number[]",
          "description": "Возвращает размеры тайлов в зависимости от масштаба.",
          "params": [
            {
              "param": "zoom",
              "type": "Number",
              "required": true,
              "description": "Значение коэффициента мастабирования."
            }
          ]
        },
        {
          "name": "getTileUrl",
          "return": "String",
          "description": "Возвращает URL тайла по его номеру и уровню масшиабирования.",
          "params": [
            {
              "param": "tileNumber",
              "type": "",
              "required": true,
              "description": ""
            },
            {
              "param": "tileZoom",
              "type": "",
              "required": true,
              "description": ""
            }
          ]
        },
        {
          "name": "getTileUrlTemplate",
          "return": "String|Function",
          "description": "Возвращает строковый шаблон URL тайла или функцию, которая его генерирует."
        },
        {
          "name": "getZoom",
          "return": "Number",
          "description": "Возвращает текущий уровень масштабирования, в котором работает контекст позиционирования. Унаследован от IPositioningContext."
        },
        {
          "name": "getZoomRange",
          "return": "util.Promise",
          "description": "Необязательный метод. Определяет доступный в указанной точке диапазон уровней масштабирования. Если данные есть, то возвращенный объект-promise будет подтвержден и передаст в качестве результата массив из двух чисел - минимальный и максимальный доступный в точке уровень масштабирования. Если данных нет, то promise отклоняется с указанием ошибки. Унаследован от ILayer."
        },
        {
          "name": "numberToClientBounds",
          "return": "Number[][]",
          "description": "Преобразует номер и уровень масштаба тайла в занимаемую тайлом область в клиентских координатах родительского контейнера.",
          "params": [
            {
              "param": "tileNumber",
              "type": "Integer[]",
              "required": true,
              "description": "Номер тайла."
            },
            {
              "param": "tileZoom",
              "type": "Integer",
              "required": true,
              "description": "Уровень масштаба тайла."
            }
          ]
        },
        {
          "name": "restrict",
          "return": "Integer[]|null",
          "description": "Накладывает ограничения на зону видимости тайлов (в том числе зацикленность карты по осям x, y).",
          "params": [
            {
              "param": "number",
              "type": "Integer[]",
              "required": true,
              "description": "Номер тайла."
            },
            {
              "param": "tileZoom",
              "type": "Integer",
              "required": true,
              "description": "Уровень масштабирования тайла."
            }
          ]
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setTileUrlTemplate",
          "return": "",
          "description": "",
          "params": [
            {
              "param": "tileUrlTemplate",
              "type": "String|Function",
              "required": true,
              "description": "Строковый шаблон URL тайла или функция, которая его генерирует."
            }
          ]
        },
        {
          "name": "toClientPixels",
          "return": "Number[]",
          "description": "Преобразует глобальные пиксельные координаты в клиентские. Унаследован от IPositioningContext."
        },
        {
          "name": "update",
          "return": "",
          "description": "Удаляет старые тайлы и запрашивает новые."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "LayerCollection",
    "url": "LayerCollection.xml",
    "def": {
      "name": "LayerCollection",
      "hasCtor": true,
      "inherits": [
        "ILayer",
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "name": "add",
          "return": "ICollection",
          "description": "Добавляет в коллекцию дочерний объект. Унаследован от ICollection."
        },
        {
          "name": "each",
          "return": "",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст выполнения функции."
            }
          ]
        },
        {
          "name": "getBrightness",
          "return": "Number",
          "description": "Возвращает яркость слоя в виде числа от 0 до 1."
        },
        {
          "name": "getCopyrights",
          "return": "util.Promise",
          "description": "Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах. Если точка и коэффициент масштабирования не указаны, будут использованы центр и коэффициент масштабирования карты.",
          "params": [
            {
              "param": "coords",
              "type": "Number[]",
              "description": "Точка на карте, для которой запрашивается информация об авторских правах."
            },
            {
              "param": "zoom",
              "type": "Number",
              "description": "Уровень масштабирования, для которого запрашивается информация об авторских правах."
            }
          ]
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getZoomRange",
          "return": "util.Promise",
          "description": "Определяет доступный в указанной точке диапазон уровней масштабирования. Если данные есть, то возвращенный объект-promise будет подтвержден и передаст в качестве результата массив из двух чисел - минимальный и максимальный доступный в точке уровень масштабирования. Если данных нет, то promise отклоняется с указанием ошибки. Если у коллекции нет ни одного потомка, предоставляющего информацию о диапазоне уровней масштабирования, то promise будет отклонён с сообщением 'noProvider'."
        },
        {
          "name": "remove",
          "return": "ICollection",
          "description": "Удаляет из коллекции дочерний объект. Унаследован от ICollection."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "layout.storage",
    "url": "layout.storage.xml",
    "def": {
      "name": "layout.storage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "map.action.Continuous",
    "url": "map.action.Continuous.xml",
    "def": {
      "name": "map.action.Continuous",
      "hasCtor": true,
      "inherits": [
        "IMapAction"
      ],
      "methods": [
        {
          "name": "begin",
          "return": "",
          "description": "Запускает движение на исполнение картой. Этот метод автоматически вызывается менеджером движений карты. С момента вызова IMapAction.begin карта слушает события IMapAction.tick и IMapAction.end и исполняет их. Унаследован от IMapAction."
        },
        {
          "name": "end",
          "return": "",
          "description": "Останавливает движение. Унаследован от IMapAction."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту, на которой выполняется действие."
        },
        {
          "name": "isActive",
          "return": "Boolean",
          "description": "Возвращает true, если движение в данный момент исполняется картой, false в противном случае."
        },
        {
          "name": "tick",
          "return": "map.action.Continuous",
          "description": "Выполняет один шаг движения карты.",
          "params": [
            {
              "param": "tick",
              "property": "",
              "type": "Object",
              "required": true,
              "description": "Параметры движения.",
              "properties": [
                {
                  "param": "duration",
                  "type": "Number",
                  "required": false,
                  "description": "Длительность исполнения движения, в миллисекундах. Значение по умолчанию: 0"
                },
                {
                  "param": "globalPixelCenter",
                  "type": "Number[]",
                  "required": false,
                  "description": "Новый центр карты в глобальных пикселах. Должен быть задан один из параметров: либо pixelOffset, либо globalPixelCenter"
                },
                {
                  "param": "pixelOffset",
                  "type": "Number[]",
                  "required": false,
                  "description": "Смещение в пикселях относительно предыдущего центра. Должен быть задан один из параметров: либо pixelOffset, либо globalPixelCenter."
                },
                {
                  "param": "timingFunction",
                  "type": "String",
                  "required": false,
                  "description": "Тайминг-функция. Значение по умолчанию: 'linear'"
                },
                {
                  "param": "zoom",
                  "type": "Number",
                  "required": false,
                  "description": "Новый коэффициент масштабирования карты. Если не указан, масштаб карты не изменяется."
                }
              ]
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "load",
    "url": "load.xml",
    "def": {
      "name": "load",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "layout.templateBased.Base",
    "url": "layout.templateBased.Base.xml",
    "def": {
      "name": "layout.templateBased.Base",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "dataSet",
          "type": "Object",
          "required": true,
          "description": "Набор разнородных данных, на основе которых строится макет."
        }
      ],
      "inherits": [
        "ILayout"
      ],
      "methods": [
        {
          "name": "build",
          "return": "",
          "description": "Строит экземпляр макета на основе шаблона и добавляет его в родительский HTML-элемент."
        },
        {
          "name": "clear",
          "return": "",
          "description": "Удаляет содержимое макета из DOM."
        },
        {
          "name": "destroy",
          "return": "",
          "description": "Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout."
        },
        {
          "name": "getChildContainerElement",
          "return": "Object",
          "description": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout."
        },
        {
          "name": "getClientBoundingRect",
          "return": "Number[][]",
          "description": "Возвращает размеры и позицию относительно родителя. Унаследован от ILayout."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от ILayout."
        },
        {
          "name": "getParentElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский html-элемент. Унаследован от ILayout."
        },
        {
          "name": "isEmpty",
          "return": "Boolean",
          "description": "Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout."
        },
        {
          "name": "rebuild",
          "return": "",
          "description": "Перестраивает макет."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные макета. Унаследован от ILayout."
        },
        {
          "name": "setParentElement",
          "return": "",
          "description": "Добавляет макет в DOM-дерево. Унаследован от ILayout."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        }
      ]
    }
  },
  {
    "name": "map.action.Manager",
    "url": "map.action.Manager.xml",
    "def": {
      "name": "map.action.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Карта."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "execute",
          "return": "",
          "description": "Запускает выполнение действия на карте. Если в этот момент на карте выполняется какое-то другое движение, то оно останавливается (вызывается метод end). Новое движение запускается посредством вызова метода begin.",
          "params": [
            {
              "param": "action",
              "type": "IMapAction",
              "required": true,
              "description": "Действие."
            }
          ]
        },
        {
          "name": "getCurrentState",
          "return": "Object",
          "description": "Определяет состояние карты в момент ее плавного движения."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту."
        },
        {
          "name": "stop",
          "return": "",
          "description": "Останавливает выполнение действия на карте."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "map.action.Single",
    "url": "map.action.Single.xml",
    "def": {
      "name": "map.action.Single",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "tick",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Параметры движения.",
          "properties": [
            {
              "param": "callback",
              "type": "Function",
              "required": false,
              "description": "Функция, которая будет вызвана после выполнения действия. Принимает в качестве параметра признак ошибки error. Если error=null, то действие успешно выполнилось."
            },
            {
              "param": "center",
              "type": "Number[]",
              "required": false,
              "description": "Новый центр карты (в геокоординатах)."
            },
            {
              "param": "checkZoomRange",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, показывающий, нужно ли проверять новый коэффициент мастабирования карты. Если значение флага true, то перед выполнением действия будет запрошен интервал допустимых коэффициентов масштабирования в новой точке. Если указанный коэффициент выходит за интервал допустимых значений, он будет скорректирован. При этом будет изменено значение нового центра карты в глобальных пиксельных координатах. Значение по умолчанию: false"
            },
            {
              "param": "duration",
              "type": "Number",
              "required": false,
              "description": "Время исполнения движения, в миллисекундах. Значение по умолчанию: 0"
            },
            {
              "param": "globalPixelCenter",
              "type": "Number[]",
              "required": false,
              "description": "Новый центр карты в глобальных пикселах. Одновременно может быть задан только один из параметров - center или globalPixelCenter."
            },
            {
              "param": "timingFunction",
              "type": "String",
              "required": false,
              "description": "Тайминг-функция. Значение по умолчанию: 'linear'"
            },
            {
              "param": "zoom",
              "type": "Number",
              "required": false,
              "description": "Новый коэффициент масштабирования карты."
            }
          ]
        }
      ],
      "inherits": [
        "IMapAction"
      ],
      "methods": [
        {
          "name": "begin",
          "description": "Запускает движение на исполнение картой. Этот метод автоматически вызывается менеджером движений карты. С момента вызова IMapAction.begin карта слушает события IMapAction.tick и IMapAction.end и исполняет их. Унаследован от IMapAction."
        },
        {
          "name": "end",
          "description": "Останавливает движение. Унаследован от IMapAction."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "map.Balloon",
    "url": "map.Balloon.xml",
    "def": {
      "name": "map.Balloon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Ссылка на объект карты."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "close",
          "return": "",
          "description": "Закрывает балун.",
          "params": [
            {
              "param": "callback",
              "type": "",
              "required": true,
              "description": ""
            }
          ]
        },
        {
          "name": "isOpen",
          "return": "Boolean",
          "description": "Проверяет состояние балуна на карте."
        },
        {
          "name": "open",
          "return": "Balloon",
          "description": "Открывает балун на карте в заданной точке.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Позиция балуна. Указывается в гео-координатах текущей проекции."
            },
            {
              "param": "data",
              "type": "Object|String",
              "required": false,
              "description": "Данные для отображения."
            },
            {
              "param": "options",
              "type": "Object",
              "required": false,
              "description": "Опции."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "map.behavior.Manager",
    "url": "map.behavior.Manager.xml",
    "def": {
      "name": "map.behavior.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Карта."
        },
        {
          "param": "behaviors",
          "type": "String|String[]",
          "required": false,
          "description": "Список поведений карты, включенных сразу при создании карты. По умолчанию - \"drag\", \"dblClickZoom\", \"rightMouseButtonMagnifier\" для настольных браузеров, \"drag\", \"dblClickZoom\" и \"multiTouch\" - для мобильных. Возможные значения ключей: \"default\" - короткий синоним для включения/отключения поведений карты по умолчанию; \"drag\" - перемещание карты при нажатой левой кнопке мыши либо одиночным касанием behavior.Drag; \"scrollZoom\" - изменение масштаба колесом мыши behavior.ScrollZoom; \"dblClickZoom\" - масштабирование карты двойным щелчком кнопки мыши behavior.DblClickZoom; \"multiTouch\" - масштабирование карты двойным касанием (например, пальцами на сенсорном экране) behavior.MultiTouch; \"rightMouseButtonMagnifier\" - увеличение области, выделенной правой кнопкой мыши (только для настольных браузеров), behavior.RightMouseButtonMagnifier; \"leftMouseButtonMagnifier\" - увеличение области, выделенной левой кнопкой мыши либо одиночным касанием, behavior.LeftMouseButtonMagnifier; \"ruler\" - измерение расстояния behavior.Ruler; \"routeEditor\" - редактор маршрутов behavior.RouteEditor; Добавлять и удалять классы поведений можно через хранилище поведений behavior.storage."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции поведений. Можно задавать следующие опции: опции поведения behavior.Drag с префиксом drag; опции поведения behavior.ScrollZoom с префиксом scrollZoom; опции поведения behavior.DblClickZoom с префиксом dblClickZoom; опции поведения behavior.MultiTouch с префиксом multiTouch; опции поведения magnifier.RightMouseButtonMagnifier, с префиксом rightMouseButtonMagnifier; опции поведения behavior.LeftMouseButtonMagnifier, с префиксом leftMouseButtonMagnifier; опции поведения behavior.Ruler с префиксом ruler."
        }
      ],
      "inherits": [
        "ICustomizable",
        "IEventEmitter",
        "IParentOnMap"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "map.behavior.Manager",
          "description": "Отключает поведения на карте.",
          "params": [
            {
              "param": "behaviors",
              "type": "String|String[]",
              "required": true,
              "description": "Список отключаемых поведений."
            }
          ]
        },
        {
          "name": "enable",
          "return": "map.behavior.Manager",
          "description": "Включает поведения на карте.",
          "params": [
            {
              "param": "behaviors",
              "type": "String|String[]",
              "required": true,
              "description": "Список подключаемых поведений."
            }
          ]
        },
        {
          "name": "get",
          "return": "IBehavior",
          "description": "Возвращает экземпляр поведения по ключу.",
          "params": [
            {
              "param": "behaviorName",
              "type": "String",
              "required": true,
              "description": "Имя поведения."
            }
          ]
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли в настоящий момент поведение.",
          "params": [
            {
              "param": "behaviorName",
              "type": "String",
              "required": true,
              "description": "Идентификатор поведения."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "map.Container",
    "url": "map.Container.xml",
    "def": {
      "name": "map.Container",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "parentElement",
          "type": "String|HTMLElement",
          "required": true,
          "description": "HTML-элемент, в котором будет создана карта или его id."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "fitToViewport",
          "return": "",
          "description": "Вызывается при изменении размера контейнера карты для того, чтобы карта применила новый размер.",
          "params": [
            {
              "param": "preservePixelPosition",
              "type": "Boolean",
              "description": "Сохранять положение центра карты."
            }
          ]
        },
        {
          "name": "getElement",
          "return": "HTMLElement",
          "description": "Возвращает HTML-элемент карты."
        },
        {
          "name": "getOffset",
          "return": "Number[]",
          "description": "Возвращает смещение контейнера карты в пикселях относительно левого верхнего угла документа."
        },
        {
          "name": "getSize",
          "return": "Number[]",
          "description": "Возвращает размеры контейнера карты в пикселях."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "map.control.Manager",
    "url": "map.control.Manager.xml",
    "def": {
      "name": "map.control.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Ссылка на объект карты."
        },
        {
          "param": "controls",
          "type": "String[]|IControl[]",
          "required": true,
          "description": "Элементы управления, заданные экземплярами классов, реализующих интерфейс IControl либо ключами. Возможные значения ключей: \"mapTools\" - стандартный тулбар с кнопками \"Навигация\", \"Выделение\" и \"Линейка\" control.MapTools; \"miniMap\" - обзорная карта control.MiniMap; \"scaleLine\" - масштабный отрезок control.ScaleLine; \"searchControl\" - панель поиска control.SearchControl; \"trafficControl\" - панель пробок control.TrafficControl; \"typeSelector\" - панель переключения типа карты control.TypeSelector; \"zoomControl\" - ползунок масштаба control.ZoomControl; \"smallZoomControl\" - простой ползунок масштаба control.SmallZoomControl."
        }
      ],
      "inherits": [
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "name": "each",
          "return": "",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст выполнения функции."
            }
          ]
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "remove",
          "return": "map.control.Manager",
          "description": "Удаляет элемент управления с карты.",
          "params": [
            {
              "param": "control",
              "type": "IControl|String",
              "required": true,
              "description": "Элемент управления или его ключ."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "add",
          "type": "map.control.Manager",
          "description": "Добавляет элемент управления на карту."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "map.Converter",
    "url": "map.Converter.xml",
    "def": {
      "name": "map.Converter",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Ссылка на карту."
        }
      ],
      "methods": [
        {
          "name": "globalToPage",
          "return": "Number[]",
          "description": "Преобразовывает глобальные пиксельные координаты точки в локальные.",
          "params": [
            {
              "param": "globalPixelPoint",
              "type": "Number[]",
              "required": true,
              "description": "Пиксельные координаты точки, которые необходимо преобразовать."
            }
          ]
        },
        {
          "name": "pageToGlobal",
          "return": "Number[]",
          "description": "Преобразовывает локальные пиксельные координаты точки в глобальные.",
          "params": [
            {
              "param": "pagePixelPoint",
              "type": "Number[]",
              "required": true,
              "description": "Пиксельные координаты точки, которые необходимо преобразовать."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "map.Copyrights",
    "url": "map.Copyrights.xml",
    "def": {
      "name": "map.Copyrights",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Карта."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "add",
          "return": "ICopyrightsAccessor",
          "description": "Добавляет на карту статическую (не зависящую от текущего центра и масштаба карты) информацию об авторских правах.",
          "params": [
            {
              "param": "customCopyrights",
              "type": "String|HTMLElement|String[]|HTMLElement[]",
              "required": true,
              "description": "Информация об авторских правах в виде строки, DOM-элемента либо массива строк/DOM-элементов."
            }
          ]
        },
        {
          "name": "addProvider",
          "return": "map.Copyrights",
          "description": "Добавляет нового провайдера информации об авторских правах.",
          "params": [
            {
              "param": "provider",
              "type": "ICopyrightsProvider",
              "required": true,
              "description": "Провайдер."
            }
          ]
        },
        {
          "name": "get",
          "return": "util.Promise",
          "description": "Определяет информацию об авторских правах в указанной точке. Возвращает объект-promise, который будет подтверждён и передаст в качестве параметра массив строк/DOM-элементов.",
          "params": [
            {
              "param": "point",
              "type": "Number[]",
              "description": "Точка (в географических координатах), для которой требуется определить информацию об авторских правах. Если не указана, берётся текущий центр карты."
            },
            {
              "param": "zoom",
              "type": "Number",
              "description": "Уровень масштабирования, для которого требуется определить информацию об авторских правах. Если не указан, берётся текущий уровень масштабирования карты."
            }
          ]
        },
        {
          "name": "removeProvider",
          "return": "map.Copyrights",
          "description": "Удаляет провайдера информации об авторских правах.",
          "params": [
            {
              "param": "provider",
              "type": "ICopyrightsProvider",
              "required": true,
              "description": "Провайдер."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "map.GeoObjects",
    "url": "map.GeoObjects.xml",
    "def": {
      "name": "map.GeoObjects",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Карта"
        },
        {
          "param": "options",
          "type": "Object",
          "required": true,
          "description": "Опции геообъектов. Через опции map.geoObjects можно задавать настройки геообъектов, добавленных на карту: опции кластеризаторов с префиксом clusterer; опции кластеров с префиксом cluster;"
        }
      ],
      "inherits": [
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "name": "add",
          "return": "ICollection",
          "description": "Добавляет в коллекцию дочерний объект. Унаследован от ICollection."
        },
        {
          "name": "each",
          "return": "",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст выполнения функции."
            }
          ]
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает географические координаты области, охватывающей все геообъекты."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getPixelBounds",
          "return": "Number[][]|null",
          "description": "Возвращает глобальные пиксельные координаты области, охватывающей все геообъекты."
        },
        {
          "name": "remove",
          "return": "ICollection",
          "description": "Удаляет из коллекции дочерний объект. Унаследован от ICollection."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "map.Hint",
    "url": "map.Hint.xml",
    "def": {
      "name": "map.Hint",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Ссылка на объект карты."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "hide",
          "return": "",
          "description": "Скрывает всплывающую подсказку.",
          "params": [
            {
              "param": "callback",
              "type": "",
              "required": true,
              "description": ""
            },
            {
              "param": "urgently",
              "type": "",
              "required": true,
              "description": ""
            }
          ]
        },
        {
          "name": "isShown",
          "return": "Boolean",
          "description": "Проверяет состояние подсказки."
        },
        {
          "name": "show",
          "return": "Hint",
          "description": "Показывает хинт на карте в заданной точке.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Позиция привязки подсказки."
            },
            {
              "param": "data",
              "type": "Object|String",
              "required": false,
              "description": "Данные для отображения."
            },
            {
              "param": "options",
              "type": "Object",
              "required": false,
              "description": "Опции хинта."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "map.pane.Manager",
    "url": "map.pane.Manager.xml",
    "def": {
      "name": "map.pane.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Карта."
        }
      ],
      "methods": [
        {
          "name": "get",
          "return": "IPane",
          "description": "Возвращает контейнер карты с соответствующим ключом. Список ключей и контейнеров карты: 'controls': IPane - контейнер элементов управлениия карты; 'events': IPane - контейнер, на котором слушаются события карты; 'floats': IPane - контейнер элементов (например, хинтов), размещенных на карте; 'graphics': IPane - контейнер графики; 'layers': IPane - контейнер слоев карты; 'outers': IPane - контейнер элементов (например, хинтов), выступающих за границы карты; 'overlays': IPane - контейнер геообъектов карты; 'shadows': IPane - контейнер для размещения макетов теней объектов карты .",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": "Ключ."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "map.layer.Manager",
    "url": "map.layer.Manager.xml",
    "def": {
      "name": "map.layer.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "property": "",
          "type": "Map",
          "required": true,
          "description": "Карта"
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Опции слоев карты. Через опции map.layers можно задавать настройки слоев, добавленных на карту. Опции слоев хотспотов задаются с префиксом 'hotspotLayer'.",
          "properties": [
            {
              "param": "trafficImageZIndex",
              "type": "Number",
              "required": false,
              "description": "Z-index картиночного слоя пробок. Значение по умолчанию: 201"
            },
            {
              "param": "trafficInfoZIndex",
              "type": "Number",
              "required": false,
              "description": "Приоритет хотспотного слоя инфоточек. Значение по умолчанию: 1"
            },
            {
              "param": "trafficJamZIndex",
              "type": "Number",
              "required": false,
              "description": "Приоритет хотспотного слоя пробок. Значение по умолчанию: 0"
            }
          ]
        }
      ],
      "inherits": [
        "ILayer",
        "IMapObjectCollection"
      ],
      "methods": [
        {
          "name": "add",
          "return": "ICollection",
          "description": "Добавляет в коллекцию дочерний объект. Унаследован от ICollection."
        },
        {
          "name": "each",
          "return": "",
          "description": "Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.",
          "params": [
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст выполнения функции."
            }
          ]
        },
        {
          "name": "getBrightness",
          "return": "Number",
          "description": "Необязательный метод. Возвращает яркость слоя. В зависимости от суммарной яркости слоев, добавленных на карту, выбирается цвет логотипа и копирайтов на карте. Унаследован от ILayer."
        },
        {
          "name": "getCopyrights",
          "return": "util.Promise",
          "description": "Необязательный метод. Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах. Унаследован от ILayer."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getZoomRange",
          "return": "util.Promise",
          "description": "Необязательный метод. Определяет доступный в указанной точке диапазон уровней масштабирования. Если данные есть, то возвращенный объект-promise будет подтвержден и передаст в качестве результата массив из двух чисел - минимальный и максимальный доступный в точке уровень масштабирования. Если данных нет, то promise отклоняется с указанием ошибки. Унаследован от ILayer."
        },
        {
          "name": "remove",
          "return": "ICollection",
          "description": "Удаляет из коллекции дочерний объект. Унаследован от ICollection."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "MapEvent",
    "url": "MapEvent.xml",
    "def": {
      "name": "MapEvent",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "originalEvent",
          "type": "Object",
          "required": true,
          "description": "Данные, связанные с событием."
        },
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Карта, над которой произошло событие."
        }
      ],
      "inherits": [
        "Event"
      ],
      "methods": [
        {
          "name": "callMethod",
          "return": "Object",
          "description": "Вызывает указанный метод. Операция эквивалентна поиску поля через get и вызову с передачей в качестве контекста originalEvent. Все аргументы после первого передаются в качестве параметров вызываемому методу. Унаследован от Event."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает значение поля из originalEvent. originalEvent всегда имеет следующие поля: type - строковый тип события; target - ссылка на объект, породивший событие. Унаследован от Event."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает карту, над которой произошло событие."
        },
        {
          "name": "isDefaultPrevented",
          "return": "Boolean",
          "description": "Проверяет, отменена ли реакция по умолчанию на событие в рамках системы событий API Яндекс.Карт. Унаследован от Event."
        },
        {
          "name": "isImmediatePropagationStopped",
          "return": "Boolean",
          "description": "Определяет, прекращено ли распространение события в системе событий API Яндекс.Карт. Унаследован от Event."
        },
        {
          "name": "isPropagationStopped",
          "return": "Boolean",
          "description": "Проверяет, остановлено ли распространение события по иерархии объектов и коллекций в системе событий API Яндекс.Карт. Унаследован от Event."
        },
        {
          "name": "preventDefault",
          "return": "",
          "description": "Отменяет реакцию по умолчанию на событие в рамках системы событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву. Унаследован от Event."
        },
        {
          "name": "stopImmediatePropagation",
          "return": "",
          "description": "Прекращает распространение события в системе событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву. Унаследован от Event."
        },
        {
          "name": "stopPropagation",
          "return": "",
          "description": "Прекращает распространение события по иерархии объектов и коллекций в системе событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву. Унаследован от Event."
        }
      ]
    }
  },
  {
    "name": "map.ZoomRange",
    "url": "map.ZoomRange.xml",
    "def": {
      "name": "map.ZoomRange",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Карта."
        },
        {
          "param": "constraints",
          "type": "Number[]",
          "required": true,
          "description": "Массив, содержащий минимальный и максимальный зум карты."
        }
      ],
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "get",
          "return": "util.Promise",
          "description": "Определяет доступный в указанной точке диапазон уровней масштабирования. Возвращает объект-promise, который будет подтверждён и получит в качестве параметра массив из двух чисел - максимальный и минимальный уровень масштабирования в данной точке."
        },
        {
          "name": "getCurrent",
          "return": "Number[]",
          "description": "Возвращает текущее (последнее полученное) значение минимального и максимального уровня масштабирования карты."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "Map",
    "url": "Map.xml",
    "def": {
      "name": "Map",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "element",
          "property": "",
          "type": "Object|String",
          "required": true,
          "description": "Ссылка на HTML-элемент, в котором размещается карта, или идентификатор этого HTML-элемента."
        },
        {
          "param": "state",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Параметры карты.",
          "properties": [
            {
              "param": "behaviors",
              "type": "String[]",
              "required": false,
              "description": "Включенные поведения карты. По умолчанию включаются: перетаскивание карты, масштабирование карты мультисенсорным касанием и двойным кликом на устройствах с сенсорным экраном; перетаскивание карты мышью, масштабирование двойным щелчком и выделением области правой кнопкой мыши на остальных устройствах. Можно указывать любые ключи, которые поддерживаются map.behavior.Manager."
            },
            {
              "param": "center",
              "type": "Number[]",
              "required": true,
              "description": "Геокоординаты центра карты."
            },
            {
              "param": "type",
              "type": "String|MapType",
              "required": false,
              "description": "Тип карты. Может быть ключом или экземпляром класса MapType. Список доступных ключей: 'yandex#map' - тип карты \"схема\"; 'yandex#satellite' - тип карты \"спутник\"; 'yandex#hybrid' - тип карты \"гибрид\"; 'yandex#publicMap' - тип карты \"народная карта\"; 'yandex#publicMapHybrid' - тип карты \"народный гибрид\". Ключи 'yandex#publicMap' и 'yandex#publicMapHybrid' доступны только для России и Украины. Значение по умолчанию: 'yandex#map'"
            },
            {
              "param": "zoom",
              "type": "Number",
              "required": true,
              "description": "Коэффициент масштабирования карты."
            }
          ]
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции карты. Через опции карты можно задавать настройки как самой карты, так и добавленных на неё объектов: опции поведений карты; опции балуна карты с префиксом balloon; опции хинта карты с префиксом hint; опции гео-объектов с префиксом geoObject; опции слоев с префиксом layer; опции слоев хотспотов с префиксом hotspotLayer; Опции, которые трактует непосредственно сама карта, перечислены ниже.",
          "properties": [
            {
              "param": "avoidFractionalZoom",
              "type": "Boolean",
              "required": false,
              "description": "true - карта не будет останавливаться на дробных значениях коэффициента масштабирования, false - будет. Значение по умолчанию: true"
            },
            {
              "param": "maxAnimationZoomDifference",
              "type": "Number",
              "required": false,
              "description": "Максимальная разница между текущим и выставляемым коэффициентом масштабирования карты, при котором масштабирование будет происходить плавно. Значение по умолчанию: 5"
            },
            {
              "param": "maxZoom",
              "type": "Number",
              "required": false,
              "description": "Максимальный коэффициент масштабирования карты. Значение по умолчанию: 23"
            },
            {
              "param": "minZoom",
              "type": "Number",
              "required": false,
              "description": "Минимальный коэффициент масштабирования карты. Значение по умолчанию: 0"
            },
            {
              "param": "projection",
              "type": "IProjection",
              "required": false,
              "description": "Проекция карты. Значение по умолчанию: ymaps.projection.wgs84Mercator"
            }
          ]
        }
      ],
      "inherits": [
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Уничтожает карту."
        },
        {
          "name": "getBounds",
          "return": "Number[][]",
          "description": "Возвращает двумерный массив геокоординат левого нижнего и правого верхнего углов области показа карты."
        },
        {
          "name": "getCenter",
          "return": "Number[]",
          "description": "Возвращает географические координаты текущего центра карты."
        },
        {
          "name": "getGlobalPixelCenter",
          "return": "Number[]",
          "description": "Возвращает глобальные пиксельные координаты текущего центра карты."
        },
        {
          "name": "getType",
          "return": "String|MapType",
          "description": "Возвращает текущий тип карты."
        },
        {
          "name": "getZoom",
          "return": "Number",
          "description": "Возвращает текущий коэффициент масштабирования карты."
        },
        {
          "name": "panTo",
          "return": "Map",
          "description": "Устанавливает центр карты. Если передан массив точек, то карта будет перемещаться от одной точки к другой.",
          "params": [
            {
              "param": "center",
              "property": "",
              "type": "Number[]|Object[]",
              "required": true,
              "description": "Центр карты или массив точек для последовательного обхода."
            },
            {
              "param": "options",
              "property": "",
              "type": "Object",
              "required": true,
              "description": "Опции.",
              "properties": [
                {
                  "param": "callback",
                  "type": "Function",
                  "required": false,
                  "description": "Функция, которая вызывается после выставления границ карте. Ошибка передается в функцию в качестве параметра."
                },
                {
                  "param": "checkZoomRange",
                  "type": "Boolean",
                  "required": false,
                  "description": "Проверка возможности установить текущий коэффициент масштабирования при изменении центра карты. Если значение опции равно true, метод вызывается асинхронно. Производится обращение к серверу, который возвращает интервал допустимых для данного центра значений коэффициентов масштабирования. После этого выставляется указанный центр и корректный зум. Значение по умолчанию: false"
                },
                {
                  "param": "delay",
                  "type": "Number",
                  "required": false,
                  "description": "Время задержки выполнения очередного перемещения в милисекундах. Значение по умолчанию: 1000"
                },
                {
                  "param": "duration",
                  "type": "Number",
                  "required": false,
                  "description": "Время анимации в миллисекундах. Значение по умолчанию: 500"
                },
                {
                  "param": "flying",
                  "type": "Boolean",
                  "required": false,
                  "description": "Разрешить уменьшать и затем увеличивать зум карты при перемещении между точками. Если расстояние между точками не превышает двух размеров контейнера карты, то карта просто переместит центр в указанную точку. Если расстояние больше, то при включенной опции flying карта выставит себе меньший коэффициент масштабирования, затем сместится к конечной точке и выставит требуемый коэффициент масштабирования (эмуляция полета над картой). Если options.flying=false, то карта переместится в конечную точку мгновенно, без анимации. Значение по умолчанию: true"
                },
                {
                  "param": "timingFunction",
                  "type": "String",
                  "required": false,
                  "description": "Тайминг-функция. Может задаваться как с помощью отдельных коэффициентов: 'cubic-bezier(0,1,1,0)', так и строкой: 'linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out'. Значение по умолчанию: 'ease-in-out'"
                }
              ]
            }
          ]
        },
        {
          "name": "setBounds",
          "return": "Map",
          "description": "Позиционирует карту для показа переданного района.",
          "params": [
            {
              "param": "bounds",
              "property": "",
              "type": "Number[][]",
              "required": true,
              "description": "Границы области показа."
            },
            {
              "param": "options",
              "property": "",
              "type": "Object",
              "required": false,
              "description": "Опции.",
              "properties": [
                {
                  "param": "callback",
                  "type": "Function",
                  "required": false,
                  "description": "Функция, которая вызывается, если при выставлении границ произошла ошибка. Ошибка передается в функцию в качестве параметра."
                },
                {
                  "param": "checkZoomRange",
                  "type": "Boolean",
                  "required": false,
                  "description": "Проверка возможности установить указанный коэффициент масштабирования. Если значение опции равно true, метод вызывается асинхронно. Производится обращение к серверу, который возвращает интервал допустимых для данного центра значений коэффициентов масштабирования. После этого выставляется указанный центр и корректный зум. Значение по умолчанию: false"
                },
                {
                  "param": "duration",
                  "type": "Number",
                  "required": false,
                  "description": "Время анимации в миллисекундах. Значение по умолчанию: 0"
                },
                {
                  "param": "precizeZoom",
                  "type": "Boolean",
                  "required": false,
                  "description": "Возможность использования дробных коэффициентов масштабирования. Значение по умолчанию: false"
                },
                {
                  "param": "timingFunction",
                  "type": "Function",
                  "required": false,
                  "description": "Тайминг-функция."
                }
              ]
            }
          ]
        },
        {
          "name": "setCenter",
          "return": "Map",
          "description": "Устанавливает центр и коэффициент масштабирования карты. Центр задается в географических координатах.",
          "params": [
            {
              "param": "center",
              "property": "",
              "type": "Number[]",
              "required": true,
              "description": "Геокоординаты центра карты."
            },
            {
              "param": "zoom",
              "property": "",
              "type": "Number",
              "required": false,
              "description": "Коэффициент масштабирования карты."
            },
            {
              "param": "options",
              "property": "",
              "type": "Object",
              "required": false,
              "description": "Опции карты.",
              "properties": [
                {
                  "param": "callback",
                  "type": "Function",
                  "required": false,
                  "description": "Функция, которая вызывается, если при выставлении границ произошла ошибка. Ошибка передается в функцию в качестве параметра."
                },
                {
                  "param": "checkZoomRange",
                  "type": "Boolean",
                  "required": false,
                  "description": "Проверка возможности установить указанный коэффициент масштабирования. Если значение опции равно true, метод вызывается асинхронно. Производится обращение к серверу, который возвращает интервал допустимых для данного центра значений коэффициентов масштабирования. После этого выставляется указанный центр и корректный зум. Значение по умолчанию: false"
                },
                {
                  "param": "duration",
                  "type": "Number",
                  "required": false,
                  "description": "Время анимации в миллисекундах. Значение по умолчанию: 0"
                },
                {
                  "param": "timingFunction",
                  "type": "Function",
                  "required": false,
                  "description": "Тайминг-функция."
                }
              ]
            }
          ]
        },
        {
          "name": "setGlobalPixelCenter",
          "return": "Map",
          "description": "Устанавливает центр и коэффициент масштабирования карты. Центр задается в глобальных пиксельных координатах.",
          "params": [
            {
              "param": "globalPixelCenter",
              "property": "",
              "type": "Number[]",
              "required": true,
              "description": "Пиксельные координаты нового центра карты."
            },
            {
              "param": "zoom",
              "property": "",
              "type": "Number",
              "required": false,
              "description": "Коэффициент масштабирования карты."
            },
            {
              "param": "options",
              "property": "",
              "type": "Object",
              "required": false,
              "description": "Опции.",
              "properties": [
                {
                  "param": "callback",
                  "type": "Function",
                  "required": false,
                  "description": "Функция, которая вызывается, если при выставлении границ произошла ошибка. Ошибка передается в функцию в качестве параметра."
                },
                {
                  "param": "checkZoomRange",
                  "type": "Boolean",
                  "required": false,
                  "description": "Проверка возможности установить указанный коэффициент масштабирования. Если значение опции равно true, метод вызывается асинхронно. Производится обращение к серверу, который возвращает интервал допустимых для данного центра значений коэффициентов масштабирования. После этого выставляется указанный центр и корректный зум. Значение по умолчанию: false"
                },
                {
                  "param": "duration",
                  "type": "Number",
                  "required": false,
                  "description": "Время анимации в миллисекундах. Значение по умолчанию: 0"
                },
                {
                  "param": "timingFunction",
                  "type": "Function",
                  "required": false,
                  "description": "Тайминг-функция."
                }
              ]
            }
          ]
        },
        {
          "name": "setType",
          "return": "Map",
          "description": "Устанавливает тип карты.",
          "params": [
            {
              "param": "type",
              "type": "String|MapType",
              "required": true,
              "description": "Тип карты. Может быть ключом или или экземпляром класса MapType. Список доступных ключей: <ul> <li>'yandex#map' - тип карты \"схема\";</li> <li>'yandex#satellite' - тип карты \"спутник\";</li> <li>'yandex#hybrid' - тип карты \"гибрид\";</li> <li>'yandex#publicMap' - тип карты \"народная карта\";</li> <li>'yandex#publicMapHybrid' - тип карты \"народный гибрид\".</li> </ul> Ключи 'yandex#publicMap' и 'yandex#publicMapHybrid' доступны только для России и Украины."
            }
          ]
        },
        {
          "name": "setZoom",
          "return": "Map",
          "description": "Устанавливает коэффициент масштабирования карты.",
          "params": [
            {
              "param": "zoom",
              "property": "",
              "type": "Number",
              "required": true,
              "description": "Коэффициент масштабирования карты."
            },
            {
              "param": "options",
              "property": "",
              "type": "Object",
              "required": false,
              "description": "Опции.",
              "properties": [
                {
                  "param": "callback",
                  "type": "Function",
                  "required": false,
                  "description": "Функция, которая вызывается, если при выставлении коэффициента масштабирования произошла ошибка. Ошибка передается в функцию в качестве параметра."
                },
                {
                  "param": "checkZoomRange",
                  "type": "Number",
                  "required": false,
                  "description": "Проверка возможности установить указанный коэффициент масштабирования. Значение по умолчанию: false"
                },
                {
                  "param": "duration",
                  "type": "Number",
                  "required": false,
                  "description": "Время анимации в миллисекундах. Значение по умолчанию: 0"
                }
              ]
            }
          ]
        }
      ],
      "props": [
        {
          "name": "action",
          "type": "map.action.Manager",
          "description": "Менеджер действий карты."
        },
        {
          "name": "balloon",
          "type": "map.Balloon",
          "description": "Балун карты."
        },
        {
          "name": "behaviors",
          "type": "map.behavior.Manager",
          "description": "Менеджер поведений карты. Позволяет включать и выключать поведения, а также предоставляет доступ к их методам и свойствам."
        },
        {
          "name": "container",
          "type": "map.Container",
          "description": "Контейнер карты."
        },
        {
          "name": "controls",
          "type": "map.control.Manager",
          "description": "Элементы управления картой."
        },
        {
          "name": "converter",
          "type": "map.Converter",
          "description": "Преобразователь пиксельных точек карты из глобальных в локальные и наоборот."
        },
        {
          "name": "copyrights",
          "type": "map.Copyrights",
          "description": "Менеджер размещённой на карте информации об авторских правах."
        },
        {
          "name": "cursors",
          "type": "util.CursorManager",
          "description": "Менеджер курсоров карты."
        },
        {
          "name": "events",
          "type": "event.PriorityManager",
          "description": "Менеджер событий карты. Поддерживает подписку с приоритетами. Бросает события типа MapEvent."
        },
        {
          "name": "geoObjects",
          "type": "map.GeoObjects",
          "description": "Менеджер геообъектов карты."
        },
        {
          "name": "hint",
          "type": "map.Hint",
          "description": "Хинт карты."
        },
        {
          "name": "layers",
          "type": "map.layer.Manager",
          "description": "Менеджер слоёв карты."
        },
        {
          "name": "options",
          "type": "option.Manager",
          "description": "Опции карты."
        },
        {
          "name": "panes",
          "type": "map.pane.Manager",
          "description": "Менеджер контейнеров объектов карты."
        },
        {
          "name": "zoomRange",
          "type": "map.ZoomRange",
          "description": "Объект, предоставляющий доступ к информации о доступных в точке уровнях масштабирования."
        }
      ]
    }
  },
  {
    "name": "MapType",
    "url": "MapType.xml",
    "def": {
      "name": "MapType",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "name",
          "type": "String",
          "required": true,
          "description": "Название типа."
        },
        {
          "param": "layers",
          "type": "Function[]|String[]",
          "required": true,
          "description": "Массив, содержащий конструкторы слоев или ключи."
        }
      ],
      "methods": [
        {
          "name": "getLayers",
          "return": "Function[]|String[]",
          "description": "Возвращает список слоев данного типа карты - массив конструкторов или ключей для слоев."
        },
        {
          "name": "getName",
          "return": "String",
          "description": "Возвращает название типа карты.",
          "params": [
            {
              "param": "map",
              "type": "",
              "required": true,
              "description": ""
            }
          ]
        }
      ]
    }
  },
  {
    "name": "mapType.storage",
    "url": "mapType.storage.xml",
    "def": {
      "name": "mapType.storage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "Monitor",
    "url": "Monitor.xml",
    "def": {
      "name": "Monitor",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "dataManager",
          "type": "IDataManager|IOptionManager",
          "required": true,
          "description": "Менеджер данных."
        }
      ],
      "methods": [
        {
          "name": "add",
          "return": "Monitor",
          "description": "Включает наблюдение за определенным полем, либо группой полей данных.",
          "params": [
            {
              "param": "name",
              "property": "",
              "type": "String|String[]",
              "required": true,
              "description": "Имя, либо массив имен полей данных, за которыми устанавливается наблюдение."
            },
            {
              "param": "changeCallback",
              "property": "",
              "type": "Function",
              "required": true,
              "description": "Обработчик изменения поля данных, либо одного из полей данных группы."
            },
            {
              "param": "context",
              "property": "",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения обработчика изменений данных, а также опциональных обработчиков."
            },
            {
              "param": "params",
              "property": "",
              "type": "Object",
              "required": false,
              "description": "Опциональные параметры.",
              "properties": [
                {
                  "param": "compareCallback",
                  "type": "Function",
                  "required": false,
                  "description": "Обработчик сравнивающий старое и новое значения поля данных. Принимает два аргумента: старое значение, новое значение. Менее приоритетен по отношению к обработчикам заданным с помощью параметра compareCallbacks."
                },
                {
                  "param": "compareCallbacks",
                  "type": "Object",
                  "required": false,
                  "description": "Хэш вида {имя поля данных: ссылка на обработчик}. Данный параметр позволяет задать индивидуальные обработчики сравнения значений для различных полей данных в группе."
                },
                {
                  "param": "defaultValue",
                  "type": "Object",
                  "required": false,
                  "description": "Значение по умолчанию, используемое в том случае, если поле данных не определено."
                },
                {
                  "param": "defaultValues",
                  "type": "Object",
                  "required": false,
                  "description": "Хэш вида {имя поля данных: значение по умолчанию}. Данный параметр позволяет задать индивидуальные значения по умолчанию для различных полей данных в группе."
                },
                {
                  "param": "resolveCallback",
                  "type": "Function",
                  "required": false,
                  "description": "Обработчик разрешающий значение поля данных. Принимает два аргумента: имя поля данных, ссылку на менеджер данных. Менее приоритетен по отношению к обработчикам заданным с помощью параметра resolveCallbacks."
                },
                {
                  "param": "resolveCallbacks",
                  "type": "Object",
                  "required": false,
                  "description": "Хэш вида {имя поля данных: ссылка на обработчик}. Данный параметр позволяет задать индивидуальные обработчики разрешения значений для различных полей данных в группе."
                }
              ]
            }
          ]
        },
        {
          "name": "forceChange",
          "return": "Monitor",
          "description": "Инициирует проверку изменения значений наблюдаемых полей данных."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает текущее значение одного из наблюдаемых полей данных.",
          "params": [
            {
              "param": "name",
              "type": "String",
              "required": true,
              "description": "Имя поля данных."
            }
          ]
        },
        {
          "name": "remove",
          "return": "Monitor",
          "description": "Отключает наблюдение за определенным полем, либо группой полей данных.",
          "params": [
            {
              "param": "name",
              "type": "String|String[]",
              "required": true,
              "description": "Имя, либо массив имен полей данных, для которых отключается наблюдение."
            }
          ]
        },
        {
          "name": "removeAll",
          "return": "Monitor",
          "description": "Отключает наблюдение для всех полей данных."
        }
      ]
    }
  },
  {
    "name": "option.Manager",
    "url": "option.Manager.xml",
    "def": {
      "name": "option.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "type": "Object",
          "description": "Хэш опций."
        },
        {
          "param": "parent",
          "type": "IOptionManager",
          "description": "Родительский менеджер опций."
        },
        {
          "param": "name",
          "type": "String",
          "description": "Имя менеджера опций."
        }
      ],
      "inherits": [
        "IOptionManager"
      ],
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "",
          "description": "Возвращает значение заданной опции в контексте существующей иерархии наследования опций. При вызове данного метода сначала происходит поиск значения в текущем менеджере опций, а затем, если значение не определено, поиск продолжается в иерархии родительских менеджеров. Унаследован от IOptionManager."
        },
        {
          "name": "getAll",
          "return": "Object",
          "description": "Возвращает ссылку на внутренний хэш хранящий значения опций. Унаследован от IOptionManager."
        },
        {
          "name": "getName",
          "return": "String",
          "description": "Возвращает имя менеджера опций. Унаследован от IOptionManager."
        },
        {
          "name": "getNative",
          "return": "Object",
          "description": "Возвращает значение заданной опции, определенное на данном уровне иерархии опций, т.е. в данном менеджере. Унаследован от IOptionManager."
        },
        {
          "name": "getParent",
          "return": "IOptionManager|null",
          "description": "Возвращает родительский менеджер опций. Унаследован от IOptionManager."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "resolve",
          "return": "Object",
          "description": "Метод, предназначенный для вызова дочерними менеджерами опций. Унаследован от IOptionManager."
        },
        {
          "name": "set",
          "return": "option.Manager",
          "description": "Задает значения опций для данного менеджера. Поддерживаются две сигнатуры: один аргумент, представляющий собой хеш вида {\"имя опции\": \"значение опции\"}; два аргумента, первый из которых - имя опции, второй - значение.",
          "params": [
            {
              "param": "key",
              "type": "Object|String",
              "required": true,
              "description": "Имя опции, либо хеш вида {\"имя опции\": \"значение опции\"}."
            },
            {
              "param": "value",
              "type": "Object",
              "required": false,
              "description": "Значение опции, если в качестве первого аргумента было передано имя."
            }
          ]
        },
        {
          "name": "setName",
          "return": "",
          "description": "Задает имя менеджера опций. Унаследован от IOptionManager."
        },
        {
          "name": "setParent",
          "return": "IChild",
          "description": "Задает родительский менеджер опций. Унаследован от IOptionManager."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        },
        {
          "name": "unset",
          "return": "option.Manager",
          "description": "Стирает значения заданных опций в данном менеджере.",
          "params": [
            {
              "param": "key",
              "type": "String|String[]",
              "required": true,
              "description": "Имя опции или массив имен опций, значения которых должны быть аннулированы."
            }
          ]
        },
        {
          "name": "unsetAll",
          "return": "option.Manager",
          "description": "Стирает значения всех опции в данном менеджере."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта. Унаследовано от IFreezable."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Base",
    "url": "overlay.hotspot.Base.xml",
    "def": {
      "name": "overlay.hotspot.Base",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "param": "data",
          "property": "",
          "type": "IDataManager|Object",
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции.",
          "properties": [
            {
              "param": "cursor",
              "type": "String",
              "description": "Курсор при наведении мыши."
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "description": "Модель интерактивности. Доступные ключи и их значения перечислены в описании interactivityModel.Storage. Значение по умолчанию: 'default#geoObject'"
            }
          ]
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "createHotspotGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает новая пиксельная геометрия для хотспота.",
          "params": [
            {
              "param": "geometry",
              "type": "IPixelGeometry",
              "required": true,
              "description": "Пиксельная геометрия."
            },
            {
              "param": "data",
              "type": "IDataManager",
              "required": true,
              "description": "Менеджер данных."
            }
          ]
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "option.presetStorage",
    "url": "option.presetStorage.xml",
    "def": {
      "name": "option.presetStorage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Placemark",
    "url": "overlay.hotspot.Placemark.xml",
    "def": {
      "name": "overlay.hotspot.Placemark",
      "hasCtor": true,
      "inherits": [
        "overlay.hotspot.Base"
      ],
      "methods": [
        {
          "name": "createHotspotGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Circle",
    "url": "overlay.hotspot.Circle.xml",
    "def": {
      "name": "overlay.hotspot.Circle",
      "hasCtor": true,
      "inherits": [
        "overlay.hotspot.Base"
      ],
      "methods": [
        {
          "name": "createHotspotGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Polygon",
    "url": "overlay.hotspot.Polygon.xml",
    "def": {
      "name": "overlay.hotspot.Polygon",
      "hasCtor": true,
      "inherits": [
        "overlay.hotspot.Base"
      ],
      "methods": [
        {
          "name": "createHotspotGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Rectangle",
    "url": "overlay.hotspot.Rectangle.xml",
    "def": {
      "name": "overlay.hotspot.Rectangle",
      "hasCtor": true,
      "inherits": [
        "overlay.hotspot.Base"
      ],
      "methods": [
        {
          "name": "createHotspotGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.hotspot.Polyline",
    "url": "overlay.hotspot.Polyline.xml",
    "def": {
      "name": "overlay.hotspot.Polyline",
      "hasCtor": true,
      "inherits": [
        "overlay.hotspot.Base"
      ],
      "methods": [
        {
          "name": "createHotspotGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.html.Label",
    "url": "overlay.html.Label.xml",
    "def": {
      "name": "overlay.html.Label",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelPointGeometry",
          "required": true,
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "param": "data",
          "property": "",
          "type": "IDataManager|Object",
          "required": false,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "cursor",
              "type": "String",
              "required": false,
              "description": "Курсор при наведении мыши."
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Модель интерактивности. Доступные ключи и их значения перечислены в описании interactivityModel.Storage. Значение по умолчанию: 'default#geoObject'"
            },
            {
              "param": "layout",
              "type": "ILayout|String",
              "required": false,
              "description": "Макет. Значение по умолчанию: theme.twirl.label.Layout"
            },
            {
              "param": "pane",
              "type": "String",
              "required": false,
              "description": "Контейнер, в который будет помещен оверлей. Значение по умолчанию: \"overlays\""
            },
            {
              "param": "zIndex",
              "type": "Number",
              "required": false,
              "description": "z-index элемента. Значение по умолчанию: constants.zIndex.overlays"
            }
          ]
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский элемент макета хинта."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getLayout",
          "return": "ILayout",
          "description": "Возвращает макет хинта."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.html.Balloon",
    "url": "overlay.html.Balloon.xml",
    "def": {
      "name": "overlay.html.Balloon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelPointGeometry",
          "required": true,
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "param": "data",
          "property": "",
          "type": "IDataManager|Object",
          "required": false,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "cursor",
              "type": "String",
              "required": false,
              "description": "Курсор при наведении мыши."
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Модель интерактивности. Доступные ключи и их значения перечислены в описании interactivityModel.Storage. Значение по умолчанию: 'default#geoObject'"
            },
            {
              "param": "layout",
              "type": "Function|String",
              "required": false,
              "description": "Макет. (Тип: конструктор объекта с интерфейсом ILayout)."
            },
            {
              "param": "offset",
              "type": "Array",
              "required": false,
              "description": "Смещение в пикселях. Значение по умолчанию: [0,0]"
            },
            {
              "param": "pane",
              "type": "String",
              "required": false,
              "description": "Контейнер, в который будет помещен макет балуна. Значение по умолчанию: \"overlays\""
            },
            {
              "param": "shadow",
              "type": "Boolean",
              "required": false,
              "description": "Флаг наличия тени. Значение по умолчанию: true"
            },
            {
              "param": "shadowLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет тени (Тип: конструктор объекта с интерфейсом ILayout)."
            },
            {
              "param": "shadowOffset",
              "type": "Array",
              "required": false,
              "description": "Смещение тени в пикселях. Значение по умолчанию: [0,0]"
            },
            {
              "param": "shadowPane",
              "type": "Array",
              "required": false,
              "description": "Контейнер, в который будет помещен макет тени балуна. Значение по умолчанию: \"shadows\""
            },
            {
              "param": "zIndex",
              "type": "Number",
              "required": false,
              "description": "z-index элемента. Значение по умолчанию: constants.zIndex.overlays"
            }
          ]
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getBalloonElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский элемент макета балуна."
        },
        {
          "name": "getBalloonLayout",
          "return": "ILayout",
          "description": "Возвращает макет балуна."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский элемент макета балуна."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getLayout",
          "return": "ILayout",
          "description": "Возвращает макет балуна."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "getShadowElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский элемент макета тени балуна."
        },
        {
          "name": "getShadowLayout",
          "return": "ILayout",
          "description": "Возвращает макет тени балуна."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.html.Placemark",
    "url": "overlay.html.Placemark.xml",
    "def": {
      "name": "overlay.html.Placemark",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelPointGeometry",
          "required": true,
          "description": "Пикcельная геометрия."
        },
        {
          "param": "data",
          "property": "",
          "type": "IDataManager|Object",
          "required": false,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "cursor",
              "type": "String",
              "required": false,
              "description": "Курсор при наведении мыши."
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Модель интерактивности. Доступные ключи и их значения перечислены в описании interactivityModel.Storage. Значение по умолчанию: 'default#geoObject'"
            },
            {
              "param": "layout",
              "type": "Function|String",
              "required": false,
              "description": "Макет. (Тип: конструктор объекта с интерфейсом ILayout)."
            },
            {
              "param": "offset",
              "type": "Array",
              "required": false,
              "description": "Смещение в пикселях. Значение по умолчанию: [0,0]"
            },
            {
              "param": "pane",
              "type": "String",
              "required": false,
              "description": "Контейнер, в который будет помещен макет метки. Значение по умолчанию: \"overlays\""
            },
            {
              "param": "shadow",
              "type": "Boolean",
              "required": false,
              "description": "Флаг наличия тени. Значение по умолчанию: false"
            },
            {
              "param": "shadowLayout",
              "type": "Function|String",
              "required": false,
              "description": "Макет тени. (Тип: конструктор объекта с интерфейсом ILayout)."
            },
            {
              "param": "shadowOffset",
              "type": "Array",
              "required": false,
              "description": "Смещение тени в пикселях. Значение по умолчанию: [0,0]"
            },
            {
              "param": "shadowPane",
              "type": "Array",
              "required": false,
              "description": "Контейнер, в который будет помещен макет тени метки. Значение по умолчанию: \"shadows\""
            },
            {
              "param": "zIndex",
              "type": "Number",
              "required": false,
              "description": "z-index элемента."
            }
          ]
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский элемент макета иконки."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getIconElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский элемент макета иконки."
        },
        {
          "name": "getIconLayout",
          "return": "ILayout",
          "description": "Возвращает макет иконки."
        },
        {
          "name": "getLayout",
          "return": "ILayout",
          "description": "Возвращает макет иконки."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "getShadowElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский элемент макета тени иконки."
        },
        {
          "name": "getShadowLayout",
          "return": "ILayout",
          "description": "Возвращает макет тени иконки."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.interactiveGraphics.Circle",
    "url": "overlay.interactiveGraphics.Circle.xml",
    "def": {
      "name": "overlay.interactiveGraphics.Circle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "IPixelCircleGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "param": "data",
          "type": "IDataManager|Object",
          "description": "Данные."
        },
        {
          "param": "options",
          "type": "Object",
          "description": "Опции. Содержит в себе без префиксов опции overlay.hotspot.Circle и overlay.staticGraphics.Circle"
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.html.Rectangle",
    "url": "overlay.html.Rectangle.xml",
    "def": {
      "name": "overlay.html.Rectangle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelRectangleGeometry",
          "required": true,
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "param": "data",
          "property": "",
          "type": "IDataManager|Object",
          "required": false,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "cursor",
              "type": "String",
              "required": false,
              "description": "Курсор при наведении мыши."
            },
            {
              "param": "interactivityModel",
              "type": "String",
              "required": false,
              "description": "Модель интерактивности. Доступные ключи и их значения перечислены в описании interactivityModel.Storage. Значение по умолчанию: 'default#geoObject'"
            },
            {
              "param": "layout",
              "type": "ILayout|String",
              "required": false,
              "description": "Макет. Значение по умолчанию: overlay.label.Layout"
            },
            {
              "param": "pane",
              "type": "String",
              "required": false,
              "description": "Контейнер, в который будет помещен оверлей. Значение по умолчанию: \"overlays\""
            },
            {
              "param": "zIndex",
              "type": "Number",
              "required": false,
              "description": "z-index элемента. Значение по умолчанию: constants.zIndex.overlays"
            }
          ]
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский элемент макета прямоугольника."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getLayout",
          "return": "ILayout",
          "description": "Возвращает макет прямоугольника."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.interactiveGraphics.Placemark",
    "url": "overlay.interactiveGraphics.Placemark.xml",
    "def": {
      "name": "overlay.interactiveGraphics.Placemark",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "IPixelPointGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "param": "data",
          "type": "IDataManager|Object",
          "description": "Данные."
        },
        {
          "param": "options",
          "type": "Object",
          "description": "Опции. Содержит в себе без префиксов опции overlay.hotspot.Polygon и overlay.staticGraphics.CanvasPlacemark"
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.interactiveGraphics.Polyline",
    "url": "overlay.interactiveGraphics.Polyline.xml",
    "def": {
      "name": "overlay.interactiveGraphics.Polyline",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "IPixelLineStringGeometry",
          "required": true,
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "param": "data",
          "type": "IDataManager|Object",
          "required": false,
          "description": "Данные."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции. Содержит в себе без префиксов опции overlay.hotspot.Polyline и overlay.staticGraphics.Polyline"
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.interactiveGraphics.Polygon",
    "url": "overlay.interactiveGraphics.Polygon.xml",
    "def": {
      "name": "overlay.interactiveGraphics.Polygon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "IPixelPolygonGeometry",
          "required": true,
          "description": "Пикcельная геометрия фигуры."
        },
        {
          "param": "data",
          "type": "IDataManager|Object",
          "required": false,
          "description": "Данные."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции. Содержит в себе без префиксов опции overlay.hotspot.Polygon и overlay.staticGraphics.Polygon"
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.staticGraphics.Circle",
    "url": "overlay.staticGraphics.Circle.xml",
    "def": {
      "name": "overlay.staticGraphics.Circle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelCircleGeometry",
          "required": true,
          "description": "Геометрия."
        },
        {
          "param": "data",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Опции.",
          "properties": [
            {
              "param": "fill",
              "type": "String",
              "required": false,
              "description": "Наличие заливки graphics.style.color."
            },
            {
              "param": "fillColor",
              "type": "String",
              "required": false,
              "description": "Цвет заливки."
            },
            {
              "param": "fillOpacity",
              "type": "Number",
              "required": false,
              "description": "Прозрачность заливки."
            },
            {
              "param": "opacity",
              "type": "Number",
              "required": false,
              "description": "Общая прозрачность."
            },
            {
              "param": "outline",
              "type": "String",
              "required": false,
              "description": "Наличие обводки."
            },
            {
              "param": "separateContainer",
              "type": "Boolean",
              "required": false,
              "description": "Производит отрисовку в отдельном слое."
            },
            {
              "param": "strokeColor",
              "type": "String",
              "required": false,
              "description": "Цвет линии graphics.style.color."
            },
            {
              "param": "strokeOpacity",
              "type": "Number",
              "required": false,
              "description": "Прозрачность контура."
            },
            {
              "param": "strokeStyle",
              "type": "Number[]|String",
              "required": false,
              "description": "Стиль контура(не поддерживается в режиме Canvas) graphics.style.stroke."
            },
            {
              "param": "strokeWidth",
              "type": "Number",
              "required": false,
              "description": "Ширина линии."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "overlay.interactiveGraphics.Rectangle",
    "url": "overlay.interactiveGraphics.Rectangle.xml",
    "def": {
      "name": "overlay.interactiveGraphics.Rectangle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "IPixelRectangleGeometry",
          "description": "Пиксельная геометрия фигуры."
        },
        {
          "param": "data",
          "type": "IDataManager|Object",
          "description": "Данные."
        },
        {
          "param": "options",
          "type": "Object",
          "description": "Опции. Содержит в себе без префиксов опции overlay.hotspot.Rectangle и overlay.staticGraphics.Rectangle"
        }
      ],
      "inherits": [
        "IOverlay"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от IOverlay."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию. Унаследован от IOverlay."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту. Унаследован от IOverlay."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея. Унаследован от IOverlay."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "overlay.staticGraphics.Placemark",
    "url": "overlay.staticGraphics.Placemark.xml",
    "def": {
      "name": "overlay.staticGraphics.Placemark",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelPointGeometry",
          "required": true,
          "description": "Геометрия."
        },
        {
          "param": "data",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Опции.",
          "properties": [
            {
              "param": "clipRect",
              "type": "Number[][]",
              "required": false,
              "description": "Область обрезки исходного изображения. Может быть использованна для реализации поддержки спрайтов. Значение по умолчанию: false"
            },
            {
              "param": "imageHref",
              "type": "String",
              "required": false,
              "description": "Адрес изображения."
            },
            {
              "param": "imageOffset",
              "type": "String",
              "required": false,
              "description": "Оффсет маркера."
            },
            {
              "param": "imageSize",
              "type": "String",
              "required": false,
              "description": "Размер изображения."
            },
            {
              "param": "separateContainer",
              "type": "Boolean",
              "required": false,
              "description": "Производит отрисовку в отдельном слое."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "overlay.staticGraphics.Polygon",
    "url": "overlay.staticGraphics.Polygon.xml",
    "def": {
      "name": "overlay.staticGraphics.Polygon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelPolygonGeometry",
          "required": true,
          "description": "Геометрия."
        },
        {
          "param": "data",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Опции.",
          "properties": [
            {
              "param": "fill",
              "type": "String",
              "required": false,
              "description": "Наличие заливки."
            },
            {
              "param": "fillColor",
              "type": "String",
              "required": false,
              "description": "Цвет заливки graphics.style.color."
            },
            {
              "param": "fillOpacity",
              "type": "Number",
              "required": false,
              "description": "Прозрачность заливки."
            },
            {
              "param": "opacity",
              "type": "Number",
              "required": false,
              "description": "Общая прозрачность."
            },
            {
              "param": "outline",
              "type": "String",
              "required": false,
              "description": "Наличие обводки."
            },
            {
              "param": "separateContainer",
              "type": "Boolean",
              "required": false,
              "description": "Производит отрисовку в отдельном слое."
            },
            {
              "param": "strokeColor",
              "type": "String",
              "required": false,
              "description": "Цвет линии graphics.style.color."
            },
            {
              "param": "strokeOpacity",
              "type": "Number",
              "required": false,
              "description": "Прозрачность контура."
            },
            {
              "param": "strokeStyle",
              "type": "Number[]|String",
              "required": false,
              "description": "Стиль контура graphics.style.stroke."
            },
            {
              "param": "strokeWidth",
              "type": "Number",
              "required": false,
              "description": "Ширина линии."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "overlay.staticGraphics.Polyline",
    "url": "overlay.staticGraphics.Polyline.xml",
    "def": {
      "name": "overlay.staticGraphics.Polyline",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelLineStringGeometry",
          "required": true,
          "description": "Геометрия."
        },
        {
          "param": "data",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Опции.",
          "properties": [
            {
              "param": "opacity",
              "type": "Number",
              "required": false,
              "description": "Общая прозрачность."
            },
            {
              "param": "outline",
              "type": "String",
              "required": false,
              "description": "Наличие обводки."
            },
            {
              "param": "separateContainer",
              "type": "Boolean",
              "required": false,
              "description": "Производит отрисовку в отдельном слое."
            },
            {
              "param": "strokeColor",
              "type": "String",
              "required": false,
              "description": "Цвет линии graphics.style.color."
            },
            {
              "param": "strokeOpacity",
              "type": "Number",
              "required": false,
              "description": "Прозрачность контура."
            },
            {
              "param": "strokeStyle",
              "type": "Number[]|String",
              "required": false,
              "description": "Стиль контура graphics.style.stroke."
            },
            {
              "param": "strokeWidth",
              "type": "Number",
              "required": false,
              "description": "Ширина линии."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "overlay.staticGraphics.Rectangle",
    "url": "overlay.staticGraphics.Rectangle.xml",
    "def": {
      "name": "overlay.staticGraphics.Rectangle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "property": "",
          "type": "IPixelRectangleGeometry",
          "required": true,
          "description": "Геометрия."
        },
        {
          "param": "data",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Данные."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Опции.",
          "properties": [
            {
              "param": "borderRadius",
              "type": "Number",
              "required": false,
              "description": "Радиус скругления углов. Может принимать значение 'auto' - 20% от минимальной стороны"
            },
            {
              "param": "fill",
              "type": "String",
              "required": false,
              "description": "Наличие заливки."
            },
            {
              "param": "fillColor",
              "type": "String",
              "required": false,
              "description": "Цвет заливки graphics.style.color."
            },
            {
              "param": "fillOpacity",
              "type": "Number",
              "required": false,
              "description": "Прозрачность заливки."
            },
            {
              "param": "opacity",
              "type": "Number",
              "required": false,
              "description": "Общая прозрачность."
            },
            {
              "param": "outline",
              "type": "String",
              "required": false,
              "description": "Наличие обводки."
            },
            {
              "param": "separateContainer",
              "type": "Boolean",
              "required": false,
              "description": "Производит отрисовку в отдельном слое."
            },
            {
              "param": "strokeColor",
              "type": "String",
              "required": false,
              "description": "Цвет линии graphics.style.color."
            },
            {
              "param": "strokeOpacity",
              "type": "Number",
              "required": false,
              "description": "Прозрачность контура."
            },
            {
              "param": "strokeStyle",
              "type": "Number[]|String",
              "required": false,
              "description": "Стиль обводки (не поддерживается в режиме Canvas) graphics.style.stroke."
            },
            {
              "param": "strokeWidth",
              "type": "Number",
              "required": false,
              "description": "Ширина линии."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "Polygon",
    "url": "Polygon.xml",
    "def": {
      "name": "Polygon",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "Number[][][]|Object|IPolygonGeometry",
          "required": true,
          "description": "Координаты вершин ломаных, определяющих внешнюю и внутренние границы многоугольника, хэш-объект с параметрами геометрии или ссылка на объект геометрии. Внутренняя граница может отсутствовать."
        },
        {
          "param": "properties",
          "type": "Object|IDataManager",
          "required": false,
          "description": "Данные геообъекта. Соответствуют данным класса GeoObject."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции геообъекта. Соответствуют опциям класса GeoObject."
        }
      ],
      "inherits": [
        "GeoObject",
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "editor",
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "hint",
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "Placemark",
    "url": "Placemark.xml",
    "def": {
      "name": "Placemark",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "Number[]|Object|IPointGeometry",
          "required": true,
          "description": "Координаты метки или хэш с описанием геометрии или ссылка на объект точечной геометрии."
        },
        {
          "param": "properties",
          "type": "Object|IDataManager",
          "required": false,
          "description": "Данные метки. Соответствуют данным класса GeoObject."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции метки. Соответствуют опциям класса GeoObject."
        }
      ],
      "inherits": [
        "GeoObject",
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "editor",
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "hint",
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "Polyline",
    "url": "Polyline.xml",
    "def": {
      "name": "Polyline",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "Number[][]|Object|ILineStringGeometry",
          "required": true,
          "description": "Координаты вершин, хэш-объект с параметрами геометрии или ссылка на объект геометрии ломаной линии."
        },
        {
          "param": "properties",
          "type": "Object|IDataManager",
          "required": false,
          "description": "Данные геообъекта. Соответствуют данным класса GeoObject."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции геообъекта. Соответствуют опциям класса GeoObject."
        }
      ],
      "inherits": [
        "GeoObject",
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "editor",
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "hint",
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "projection.Cartesian",
    "url": "projection.Cartesian.xml",
    "def": {
      "name": "projection.Cartesian",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "bounds",
          "type": "Object[]",
          "required": true,
          "description": "Массив из двух точек - координат левого нижнего и правого верхнего углов прямоугольной координатной области."
        },
        {
          "param": "cycled",
          "type": "Boolean[]",
          "required": false,
          "description": "Массив из признаков зацикленности карты по x и y. Значение по умолчанию: [false, false]"
        },
        {
          "param": "scale",
          "type": "Number|Number[]",
          "required": false,
          "description": "Масштаб одного деления на оси. Может быть числом или парой чисел для каждой из осей. Значение по умолчанию: 1"
        }
      ],
      "inherits": [
        "IProjection"
      ],
      "methods": [
        {
          "name": "fromGlobalPixels",
          "return": "Number[]",
          "description": "Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции. Унаследован от IProjection."
        },
        {
          "name": "getCoordSystem",
          "return": "ICoordSystem",
          "description": "Возвращает координатную систему, используемую проекцией. Необязательный метод. В случае его отсутствия будет использована координатная система coordSystem.cartesian. Унаследован от IProjection."
        },
        {
          "name": "isCycled",
          "return": "Boolean[]",
          "description": "Показатель зацикленности проекции. Унаследован от IProjection."
        },
        {
          "name": "toGlobalPixels",
          "return": "Number[]",
          "description": "Преобразует координаты проекции в глобальные пиксельные на указанном уровне масштабирования. Унаследован от IProjection."
        }
      ]
    }
  },
  {
    "name": "projection.sphericalMercator",
    "url": "projection.sphericalMercator.xml",
    "def": {
      "name": "projection.sphericalMercator",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "fromGlobalPixels",
          "return": "Number[]",
          "description": "Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции."
        },
        {
          "name": "getCoordSystem",
          "return": "ICoordSystem",
          "description": "Возвращает координатную систему, используемую проекцией. Необязательный метод. В случае его отсутствия будет использована координатная система coordSystem.cartesian."
        },
        {
          "name": "isCycled",
          "return": "Boolean[]",
          "description": "Показатель зацикленности проекции."
        },
        {
          "name": "toGlobalPixels",
          "return": "Number[]",
          "description": "Преобразует координаты проекции в глобальные пиксельные на указанном уровне масштабирования."
        }
      ]
    }
  },
  {
    "name": "ready",
    "url": "ready.xml",
    "def": {
      "name": "ready",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "Rectangle",
    "url": "Rectangle.xml",
    "def": {
      "name": "Rectangle",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "geometry",
          "type": "Number[][]|Object|IRectangleGeometry",
          "required": true,
          "description": "Координаты двух противоположных углов, хэш-объект с параметрами геометрии или ссылка на объект геометрии прямоугольника."
        },
        {
          "param": "properties",
          "type": "Object|IDataManager",
          "required": false,
          "description": "Данные геообъекта. Соответствуют данным класса GeoObject."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции геообъекта. Соответствуют опциям класса GeoObject."
        }
      ],
      "inherits": [
        "GeoObject",
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "editor",
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "hint",
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "projection.wgs84Mercator",
    "url": "projection.wgs84Mercator.xml",
    "def": {
      "name": "projection.wgs84Mercator",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "fromGlobalPixels",
          "return": "Number[]",
          "description": "Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции."
        },
        {
          "name": "getCoordSystem",
          "return": "ICoordSystem",
          "description": "Возвращает координатную систему, используемую проекцией. Необязательный метод. В случае его отсутствия будет использована координатная система coordSystem.cartesian."
        },
        {
          "name": "isCycled",
          "return": "Boolean[]",
          "description": "Показатель зацикленности проекции."
        },
        {
          "name": "toGlobalPixels",
          "return": "Number[]",
          "description": "Преобразует координаты проекции в глобальные пиксельные на указанном уровне масштабирования."
        }
      ]
    }
  },
  {
    "name": "router.Editor",
    "url": "router.Editor.xml",
    "def": {
      "name": "router.Editor",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "route",
          "property": "",
          "type": "router.Route",
          "required": true,
          "description": "Маршрут, к которому должен быть привязан редактор."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции.",
          "properties": [
            {
              "param": "addViaPoints",
              "type": "Boolean",
              "required": false,
              "description": "true - добавление транзитных точек разрешено, false - запрещено. Значение по умолчанию: true"
            },
            {
              "param": "addWayPoints",
              "type": "Boolean",
              "required": false,
              "description": "true - добавление путевых точек при клике на карте разрешено, false - запрещено. Значение по умолчанию: false"
            },
            {
              "param": "editViaPoints",
              "type": "Boolean",
              "required": false,
              "description": "true - редактирование (перемещение) транзитных точек разрешено, false - запрещено. Значение по умолчанию: true"
            },
            {
              "param": "editWayPoints",
              "type": "Boolean",
              "required": false,
              "description": "true - редактирование (перемещение) путевых точек разрешено, false - запрещено. Значение по умолчанию: true"
            },
            {
              "param": "removeViaPoints",
              "type": "Boolean",
              "required": false,
              "description": "true - удаление транзитных точек двойным кликом разрешено, false - запрещено. Значение по умолчанию: true"
            },
            {
              "param": "removeWayPoints",
              "type": "Boolean",
              "required": false,
              "description": "true - удаление путевых точек двойным кликом разрешено, false - запрещено. Значение по умолчанию: false"
            }
          ]
        }
      ]
    }
  },
  {
    "name": "router.Path",
    "url": "router.Path.xml",
    "def": {
      "name": "router.Path",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "feature",
          "type": "Object",
          "required": true,
          "description": "Геометрия и свойства пути."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции пути."
        }
      ],
      "inherits": [
        "GeoObject"
      ],
      "methods": [
        {
          "name": "getHumanJamsTime",
          "return": "String",
          "description": "Возвращает строковое представление времени проезда пути с единицами измерения с учетом пробок."
        },
        {
          "name": "getHumanLength",
          "return": "String",
          "description": "Возвращает строковое представление длины пути с единицами измерения."
        },
        {
          "name": "getHumanTime",
          "return": "String",
          "description": "Возвращает строковое представление времени проезда пути с единицами измерения."
        },
        {
          "name": "getJamsTime",
          "return": "Integer",
          "description": "Возвращает время проезда пути в секундах с учетом пробок."
        },
        {
          "name": "getLength",
          "return": "Number",
          "description": "Возвращает длину пути в метрах."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getSegments",
          "return": "",
          "description": "returns {router.Segment[]} Сегменты пути."
        },
        {
          "name": "getTime",
          "return": "Integer",
          "description": "Возвращает время проезда пути в секундах."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "editor",
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "hint",
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "route",
    "url": "route.xml",
    "def": {
      "name": "route",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "router.Route",
    "url": "router.Route.xml",
    "def": {
      "name": "router.Route",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "json",
          "property": "",
          "type": "Object",
          "required": true,
          "description": "Описание маршрута в формате json."
        },
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "required": false,
          "description": "Опции маршрута.",
          "properties": [
            {
              "param": "mapStateAutoApply",
              "type": "Boolean",
              "required": false,
              "description": "Флаг, позволяющий автоматически установить центр и коэффициент масштабирования карты так, чтобы построенный маршрут был виден целиком. Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "IGeoObject",
        "IParentOnMap"
      ],
      "methods": [
        {
          "name": "getHumanJamsTime",
          "return": "String",
          "description": "Возвращает строковое представление времени проезда маршрута с единицами измерения с учетом пробок."
        },
        {
          "name": "getHumanLength",
          "return": "String",
          "description": "Возвращает строковое представление длины маршрута с единицами измерения."
        },
        {
          "name": "getHumanTime",
          "return": "String",
          "description": "Возвращает строковое представление времени проезда маршрута с единицами измерения."
        },
        {
          "name": "getJamsTime",
          "return": "Integer",
          "description": "Возвращает время проезда маршрута в секундах с учетом пробок."
        },
        {
          "name": "getLength",
          "return": "Number",
          "description": "Возвращает длину маршрута в метрах."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getPaths",
          "return": "GeoObjectArray",
          "description": "Возвращает коллекцию путей, из которых состоит маршрут."
        },
        {
          "name": "getTime",
          "return": "Integer",
          "description": "Возвращает время проезда маршрута в секундах."
        },
        {
          "name": "getViaPoints",
          "return": "GeoObjectArray",
          "description": "Возвращает коллекцию транзитных точек маршрута."
        },
        {
          "name": "getWayPoints",
          "return": "GeoObjectArray",
          "description": "Возвращает коллекцию путевых точек маршрута."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "editor",
          "type": "router.Editor",
          "description": "Редактор маршрутов."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "theme.twirl.geoObject.layout.StretchyIcon",
    "url": "theme.twirl.geoObject.layout.StretchyIcon.xml",
    "def": {
      "name": null,
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "router.ViaPoint",
    "url": "router.ViaPoint.xml",
    "def": {
      "name": "router.ViaPoint",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "feature",
          "type": "Object",
          "required": true,
          "description": "Свойства и геометрия."
        },
        {
          "param": "options",
          "type": "Object",
          "required": false,
          "description": "Опции."
        }
      ],
      "inherits": [
        "GeoObject"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getPathIndex",
          "return": "Integer",
          "description": "Возвращает индекс пути, в котором расположена точка."
        },
        {
          "name": "getSegmentIndex",
          "return": "Integer",
          "description": "Возвращает индекс сегмента пути, в котором расположена точка."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "balloon",
          "type": "geoObject.Balloon",
          "description": "Балун геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "editor",
          "type": "IGeometryEditor",
          "description": "Редактор геометрии геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "hint",
          "type": "geoObject.Hint",
          "description": "Хинт геообъекта. Унаследовано от GeoObject."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта. Унаследовано от IGeoObject."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject."
        }
      ]
    }
  },
  {
    "name": "router.Segment",
    "url": "router.Segment.xml",
    "def": {
      "name": "router.Segment",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "feature",
          "type": "Object",
          "required": true,
          "description": "Свойства и геометрия сегмента."
        }
      ],
      "methods": [
        {
          "name": "getAction",
          "return": "String",
          "description": "Возвращает направление поворота маршрута в конце сегмента. Возможные значения: left - налево; slight left - левее; hard left - резкий поворот налево; right - направо; slight right - правее; hard right - резкий поворот направо; none - прямо; back - разворот; enter roundabout - въезд на перекресток с круговым движением; leave roundabout [N] - съезд с перекрестка с круговым движением. Число N - номер поворота с круга. Данное число может отсутствовать. Например, \"leave roundabout\" или \"leave roundabout 2\"; merge - въезд (например, на шоссе или магистраль). Обозначает слияние с транспортным потоком; board ferry - паромная переправа. ."
        },
        {
          "name": "getAngle",
          "return": "Number",
          "description": "Определяет угол поворота маршрута в конце отрезка."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает координаты ломаной, описывающей геометрию сегмента."
        },
        {
          "name": "getHumanAction",
          "return": "String",
          "description": "Возвращает направление поворота в виде локализованной человекопонятной строки."
        },
        {
          "name": "getHumanJamsTime",
          "return": "String",
          "description": "Возвращает строковое представление времени проезда сегмента с единицами измерения с учетом пробок."
        },
        {
          "name": "getHumanLength",
          "return": "String",
          "description": "Возвращает строковое представление длины сегмента с единицами измерения."
        },
        {
          "name": "getHumanTime",
          "return": "String",
          "description": "Возвращает строковое представление времени проезда сегмента с единицами измерения."
        },
        {
          "name": "getIndex",
          "return": "Integer",
          "description": "Возвращает индекс данного сегмента в массиве всех сегментов пути."
        },
        {
          "name": "getJamsTime",
          "return": "Integer",
          "description": "Возвращает время проезда сегмента в секундах с учетом пробок."
        },
        {
          "name": "getLength",
          "return": "Number",
          "description": "Возвращает длину сегмента в метрах."
        },
        {
          "name": "getPolylineEndIndex",
          "return": "Integer",
          "description": "Возвращает индекс точки в геометрии пути, на которой заканчивается сегмент."
        },
        {
          "name": "getPolylineStartIndex",
          "return": "Integer",
          "description": "Возвращает индекс точки в геометрии пути, с которой начинается сегмент."
        },
        {
          "name": "getStreet",
          "return": "String",
          "description": "Возвращает название улицы, по которой проходит сегмент маршрута."
        },
        {
          "name": "getTime",
          "return": "Integer",
          "description": "Возвращает время проезда сегмента в секундах."
        }
      ]
    }
  },
  {
    "name": "templateLayoutFactory",
    "url": "templateLayoutFactory.xml",
    "def": {
      "name": "templateLayoutFactory",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "templateLayoutFactory.createClass",
          "required": true,
          "return": "Function",
          "description": "Возвращает конструктор макета. Созданный класс будет отнаследован от класса layout.templateBased.Base с переопределением списка методов, указанных в overrides."
        }
      ]
    }
  },
  {
    "name": "traffic.provider.Actual",
    "url": "traffic.provider.Actual.xml",
    "def": {
      "name": "traffic.provider.Actual",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции провайдера.",
          "properties": [
            {
              "param": "autoUpdate",
              "type": "Boolean",
              "description": "Флаг, включающий автоматическое обновление данных о пробках. Автоматическое обновление происходит только в том случае, если на карте каждые 4 минуты возникает событие mousemove. Если событие не возникает, пробки перестают обновляться до появляния нового события. Значение по умолчанию: true"
            }
          ]
        },
        {
          "param": "state",
          "property": "",
          "type": "Object",
          "description": "Состояние провайдера.",
          "properties": [
            {
              "param": "infoLayerShown",
              "type": "Boolean",
              "description": "Флаг, включающий отображение слоя дорожных событий. Значение по умолчанию: false"
            }
          ]
        }
      ],
      "inherits": [
        "ITrafficProvider"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на карту. Унаследован от ITrafficProvider."
        },
        {
          "name": "setMap",
          "return": "",
          "description": ""
        },
        {
          "name": "update",
          "return": "",
          "description": "Шлёт запрос на обновление пробок."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние провайдера. Имена полей, доступных через метод data.Manager.get: isInited - признак, готов ли провайдер предоставлять данные; infoLayerShown - признак, показан ли слой дорожных событий; timestamp - текущее время во временной зоне UTC+0 в секундах; localtime - локальное время, для которого сервер в текущий момент отдает данные, в формате 'ЧЧ:ММ'; level - уровень загруженности дорог в баллах - от 0 до 10."
        }
      ]
    }
  },
  {
    "name": "traffic.provider.Archive",
    "url": "traffic.provider.Archive.xml",
    "def": {
      "name": "traffic.provider.Archive",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "property": "",
          "type": "Object",
          "description": "Опции провайдера.",
          "properties": [
            {
              "param": "showCurrentTimeFirst",
              "type": "Boolean",
              "description": "При первом показе архивных данных выставить время, близкое к текущему. Значение по умолчанию: true"
            }
          ]
        },
        {
          "param": "state",
          "property": "",
          "type": "Object",
          "description": "Состояние провайдера.",
          "properties": [
            {
              "param": "timestamp",
              "type": "Number",
              "description": "Время, для которого показываются пробки \"обычно\". Это время, прошедшее с 00:00 понедельника до требуемого времени в секундах. Должно быть кратно 60 * 15 = 900, так как данные на сервере доступны для моментов времени с разницей в 15 минут. Время задается для нулевого часового пояса (UTC+0)."
            }
          ]
        }
      ],
      "inherits": [
        "ITrafficProvider"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на карту. Унаследован от ITrafficProvider."
        },
        {
          "name": "setMap",
          "return": "",
          "description": ""
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "data.Manager",
          "description": "Состояние провайдера. Имена полей, доступных через метод data.Manager.get: isInited - признак, готов ли провайдер предоставлять данные; timeZone - смещение по времени для текущего временного пояса относительно UTC+0. Измеряется в секундах.; dst - признак перехода на зимнее/летнее время. При dst='dst' время летнее; timestamp - текущее время во временной зоне UTC+0 в секундах; localtime - локальное время, которое возвращает в ответе сервер; level - уровень загруженности дорог в баллах - от 0 до 10."
        }
      ]
    }
  },
  {
    "name": "traffic.provider.storage",
    "url": "traffic.provider.storage.xml",
    "def": {
      "name": "traffic.provider.storage",
      "hasCtor": false,
      "params": [],
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище."
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом."
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища."
        }
      ]
    }
  },
  {
    "name": "util.augment",
    "url": "util.augment.xml",
    "def": {
      "name": "util.augment",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "util.bind",
    "url": "util.bind.xml",
    "def": {
      "name": "util.bind",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "util.bounds.getCenterAndZoom",
    "url": "util.bounds.getCenterAndZoom.xml",
    "def": {
      "name": "util.bounds.getCenterAndZoom",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "util.cursor.Accessor",
    "url": "util.cursor.Accessor.xml",
    "def": {
      "name": "util.cursor.Accessor",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "key",
          "type": "String",
          "required": true,
          "description": "Ключ, под которым хранится курсор в хранилище курсоров."
        }
      ],
      "methods": [
        {
          "name": "getKey",
          "return": "String",
          "description": "Возвращает текущий ключ для доступа к курсору в хранилище курсоров."
        },
        {
          "name": "remove",
          "return": "",
          "description": "Удаляет курсор с карты."
        },
        {
          "name": "setKey",
          "return": "",
          "description": "Задает новый ключ для доступа к курсору. По этому ключу должен находиться соответствующий курсор в хранилище курсоров. В случае, если данный курсор активен, то он сразу сменится.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": ""
            }
          ]
        }
      ]
    }
  },
  {
    "name": "util.cursor.Manager",
    "url": "util.cursor.Manager.xml",
    "def": {
      "name": "util.cursor.Manager",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "element",
          "type": "HTMLElement",
          "required": true,
          "description": "DOM-элемент, для которого выполняется установка курсоров."
        }
      ],
      "methods": [
        {
          "name": "push",
          "return": "util.cursor.Accessor",
          "description": "Устанавливает новый курсор и дописывает его в стэк курсоров объекта.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": "Курсор. Допустимые значения: \"arrow\" - стрелка; \"crosshair\" - перекрестье; \"grab\" - \"рука\"; \"grabbing\" - сжатая \"рука\" \"help\" - стрелка со знаком вопроса; \"zoom\" - лупа; \"move\" - курсор в виде четырех стрелок; \"pointer\" - \"палец\"; \"inherit\" - унаследовать курсор от родителя."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "event.Manager",
          "description": "Менеджер событий менеджера курсоров."
        }
      ]
    }
  },
  {
    "name": "util.extend",
    "url": "util.extend.xml",
    "def": {
      "name": "util.extend",
      "hasCtor": false,
      "params": []
    }
  },
  {
    "name": "util.Promise",
    "url": "util.Promise.xml",
    "def": {
      "name": "util.Promise",
      "hasCtor": true,
      "methods": [
        {
          "name": "reject",
          "return": "",
          "description": "Прерываем слушание.",
          "params": [
            {
              "param": "error",
              "type": "String|Object",
              "description": "ошибка, подаваемая на функцию-обработчик."
            }
          ]
        },
        {
          "name": "resolve",
          "return": "",
          "description": "Вызывает функции-обработчики, когда \"обещание\" выполнено.",
          "params": [
            {
              "param": "value",
              "type": "Object",
              "description": "значение, подающееся на функцию-обработчик."
            }
          ]
        },
        {
          "name": "then",
          "return": "util.Promise",
          "description": "Подписка на \"обещание\".",
          "params": [
            {
              "param": "onResolve",
              "type": "Function",
              "description": "Функция-обработчик, которая вызывается, если обещание выполнено."
            },
            {
              "param": "onReject",
              "type": "Function",
              "description": "Функция-обработчик, которая вызывается, если обещание не выполнено (произошла ошибка)."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "util.Storage",
    "url": "util.Storage.xml",
    "def": {
      "name": "util.Storage",
      "hasCtor": true,
      "methods": [
        {
          "name": "add",
          "return": "util.Storage",
          "description": "Добавляет объект в хранилище.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": "Ключ."
            },
            {
              "param": "object",
              "type": "Object",
              "required": true,
              "description": "Хранимый объект."
            }
          ]
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает объект, хранящийся под указанным ключом.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": "Ключ."
            }
          ]
        },
        {
          "name": "remove",
          "return": "util.Storage",
          "description": "Удаляет пару \"ключ: значение\" из хранилища.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": "Ключ."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "IBaseCircleGeometry",
    "url": "IBaseCircleGeometry.xml",
    "def": {
      "name": "IBaseCircleGeometry",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "ICircleGeometryAccess"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на окружности точку, ближайшую к anchorPosition. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты центра круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getRadius",
          "return": "Number",
          "description": "Возвращает радиус круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Circle\"."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "ICircleGeometryAccess",
          "description": "Задает координаты центра круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "setRadius",
          "return": "ICircleGeometryAccess",
          "description": "Задает радиус круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IBaseGeometry",
    "url": "IBaseGeometry.xml",
    "def": {
      "name": "IBaseGeometry",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IBaseLinearRingGeometry",
    "url": "IBaseLinearRingGeometry.xml",
    "def": {
      "name": "IBaseLinearRingGeometry",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "ILinearRingGeometryAccess"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри контура. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[]",
          "description": "Возвращает координаты точки с заданным индексом. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "IPointGeometryAccess",
          "description": "Создает и возвращает объект IPointGeometryAccess для заданной вершины контура. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре точку, ближайшую к anchorPosition. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает массив координат геометрии. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"LinearRing\"."
        },
        {
          "name": "insert",
          "return": "ILinearRingGeometryAccess",
          "description": "Добавляет новую точку с заданным индексом. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "Number[]",
          "description": "Удаляет точку с заданным индексом. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "set",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает координаты точки c заданным индексом. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "setFillRule",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает алгоритм заливки контура. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "splice",
          "return": "Number[][]",
          "description": "Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILinearRingGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IBasePointGeometry",
    "url": "IBasePointGeometry.xml",
    "def": {
      "name": "IBasePointGeometry",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "IPointGeometryAccess"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты точки. Унаследован от IPointGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Point\"."
        },
        {
          "name": "setCoordinates",
          "return": "IPointGeometryAccess",
          "description": "Задает координаты точки. Унаследован от IPointGeometryAccess."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IBaseLineStringGeometry",
    "url": "IBaseLineStringGeometry.xml",
    "def": {
      "name": "IBaseLineStringGeometry",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "ILineStringGeometryAccess"
      ],
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[]",
          "description": "Возвращает координаты точки с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "IPointGeometryAccess",
          "description": "Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает массив координат геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"LineString\"."
        },
        {
          "name": "insert",
          "return": "ILineStringGeometryAccess",
          "description": "Добавляет новую точку с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "Number[]",
          "description": "Удаляет точку с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "set",
          "return": "ILineStringGeometryAccess",
          "description": "Задает координаты точки c заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "ILineStringGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "splice",
          "return": "Number[][]",
          "description": "Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IBasePolygonGeometry",
    "url": "IBasePolygonGeometry.xml",
    "def": {
      "name": "IBasePolygonGeometry",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "IPolygonGeometryAccess"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри многоугольника. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[][]",
          "description": "Возвращает координаты контура с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "ILinearRingGeometryAccess",
          "description": "Создает и возвращает объект ILinearRingGeometryAccess для заданного контура. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][][]",
          "description": "Возвращает массив координат геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество контуров в геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Polygon\"."
        },
        {
          "name": "insert",
          "return": "IPolygonGeometryAccess",
          "description": "Добавляет новый контур с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "ILinearRingGeometryAccess",
          "description": "Удаляет контур с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "set",
          "return": "IPolygonGeometryAccess",
          "description": "Задает координаты контура c заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "IPolygonGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setFillRule",
          "return": "IPolygonGeometryAccess",
          "description": "Задает алгоритм заливки многоугольника. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "splice",
          "return": "ILinearRingGeometryAccess[]",
          "description": "Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IBaseRectangleGeometry",
    "url": "IBaseRectangleGeometry.xml",
    "def": {
      "name": "IBaseRectangleGeometry",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "IRectangleGeometryAccess"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре прямоугольника точку, ближайшую к anchorPosition. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Rectangle\"."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Задает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IBehavior",
    "url": "IBehavior.xml",
    "def": {
      "name": "IBehavior",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "type": "Object",
          "description": "Опции поведения."
        }
      ],
      "inherits": [
        "IChildOnMap",
        "ICustomizable"
      ],
      "methods": [
        {
          "name": "disable",
          "return": "",
          "description": "Выключает поведение."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Включает поведение."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Проверяет, включено ли поведение."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IChildOnMap",
    "url": "IChildOnMap.xml",
    "def": {
      "name": "IChildOnMap",
      "hasCtor": true,
      "inherits": [
        "IChild"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект.",
          "params": [
            {
              "param": "parent",
              "type": "IParentOnMap",
              "required": true,
              "description": "Родительский объект."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IChild",
    "url": "IChild.xml",
    "def": {
      "name": "IChild",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "Object",
          "description": "Возвращает ссылку на родительский объект."
        },
        {
          "name": "setParent",
          "return": "IChild",
          "description": "Устанавливает родительский объект.",
          "params": [
            {
              "param": "parent",
              "type": "Object",
              "required": true,
              "description": "Родительский объект."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "ICircleGeometry",
    "url": "ICircleGeometry.xml",
    "def": {
      "name": "ICircleGeometry",
      "hasCtor": true,
      "inherits": [
        "ICircleGeometryAccess",
        "IGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на окружности точку, ближайшую к anchorPosition. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты центра круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getRadius",
          "return": "Number",
          "description": "Возвращает радиус круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Circle\"."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "ICircleGeometryAccess",
          "description": "Задает координаты центра круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        },
        {
          "name": "setRadius",
          "return": "ICircleGeometryAccess",
          "description": "Задает радиус круга. Унаследован от ICircleGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "ICollection",
    "url": "ICollection.xml",
    "def": {
      "name": "ICollection",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "add",
          "return": "ICollection",
          "description": "Добавляет в коллекцию дочерний объект.",
          "params": [
            {
              "param": "object",
              "type": "Object",
              "required": true,
              "description": "Добавляемый объект."
            }
          ]
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции."
        },
        {
          "name": "remove",
          "return": "ICollection",
          "description": "Удаляет из коллекции дочерний объект.",
          "params": [
            {
              "param": "object",
              "type": "Object",
              "required": true,
              "description": "Удаляемый объект."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "ICircleGeometryAccess",
    "url": "ICircleGeometryAccess.xml",
    "def": {
      "name": "ICircleGeometryAccess",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри круга.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на окружности точку, ближайшую к anchorPosition.",
          "params": [
            {
              "param": "anchorPosition",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки, для которой расчитывается ближайшая точка на окружности."
            }
          ]
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты центра круга."
        },
        {
          "name": "getRadius",
          "return": "Number",
          "description": "Возвращает радиус круга."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "ICircleGeometryAccess",
          "description": "Задает координаты центра круга.",
          "params": [
            {
              "param": "coordinates",
              "type": "Number[]|null",
              "required": true,
              "description": "Координаты центра круга."
            }
          ]
        },
        {
          "name": "setRadius",
          "return": "ICircleGeometryAccess",
          "description": "Задает радиус круга.",
          "params": [
            {
              "param": "radius",
              "type": "Number",
              "required": true,
              "description": "Радиус круга."
            }
          ]
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта. Унаследовано от IFreezable."
        }
      ]
    }
  },
  {
    "name": "IControl",
    "url": "IControl.xml",
    "def": {
      "name": "IControl",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "options",
          "type": "Object",
          "description": "Опции элемента управления."
        }
      ],
      "inherits": [
        "IChildOnMap"
      ],
      "methods": [
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект.",
          "params": [
            {
              "param": "parent",
              "type": "IControlParent",
              "required": true,
              "description": "Родительский объект."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IControlParent",
    "url": "IControlParent.xml",
    "def": {
      "name": "IControlParent",
      "hasCtor": true,
      "inherits": [
        "IParentOnMap"
      ],
      "methods": [
        {
          "name": "getChildElement",
          "return": "HTMLElement",
          "description": "Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться.",
          "params": [
            {
              "param": "child",
              "type": "IControl",
              "required": true,
              "description": "Дочерний объект."
            }
          ]
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        }
      ]
    }
  },
  {
    "name": "ICoordSystem",
    "url": "ICoordSystem.xml",
    "def": {
      "name": "ICoordSystem",
      "hasCtor": true,
      "methods": [
        {
          "name": "getDistance",
          "return": "Number",
          "description": "Возвращает кратчайшее (вдоль геодезической линии) расстояние между двумя заданными точками (в метрах).",
          "params": [
            {
              "param": "point1",
              "type": "Number[]",
              "required": true,
              "description": "Первая точка."
            },
            {
              "param": "point2",
              "type": "Number[]",
              "required": true,
              "description": "Вторая точка."
            }
          ]
        },
        {
          "name": "solveDirectProblem",
          "return": "Object",
          "description": "Решает так называемую первую (прямую) геодезическую задачу: где мы окажемся, если выйдем из указанной точки в указанном направлении и продём, не сворачивая, указанное расстояние.",
          "params": [
            {
              "param": "startPoint",
              "type": "Number[]",
              "required": true,
              "description": "Точка отправления."
            },
            {
              "param": "direction",
              "type": "Number[]",
              "required": true,
              "description": "Направление. Задаётся в виде вектора (приращение координат) [dlat, dlon] либо [dlon, dlat], в завивимости от параметра coordorder. Для того, чтобы получить из заданного таким образом направления азимут (угол между направлением движения и направлением на север), необходимо вычислить арктангенс величины dlat/dlon (в JavaScript - стандартная функция Math.atan2(dlat, dlon)); для того, чтобы по известному азимуту a вычислить направление движения, нужно положить dlat = cos(a), dlon = sin(a)."
            },
            {
              "param": "distance",
              "type": "Number",
              "required": true,
              "description": "Пройденное расстояние."
            }
          ]
        },
        {
          "name": "solveInverseProblem",
          "return": "Object",
          "description": "Решает так называемую вторую (обратную) геодезическую задачу: построить кратчайший маршрут между двумя точками на картографируемой поверхности и определелить расстояние и направление движения.",
          "params": [
            {
              "param": "startPoint",
              "type": "Number[]",
              "required": true,
              "description": "Точка отправления."
            },
            {
              "param": "endPoint",
              "type": "Number[]",
              "required": true,
              "description": "Точка прибытия."
            },
            {
              "param": "reverseDirection",
              "type": "Boolean",
              "required": false,
              "description": "Направление движения. false - выбрать кратчайшую дугу, true - выбрать обратную кратчайшей. Значение по умолчанию: false"
            }
          ]
        }
      ]
    }
  },
  {
    "name": "ICopyrightsAccessor",
    "url": "ICopyrightsAccessor.xml",
    "def": {
      "name": "ICopyrightsAccessor",
      "hasCtor": true,
      "inherits": [
        "ICopyrightsProvider"
      ],
      "methods": [
        {
          "name": "getCopyrights",
          "return": "util.Promise",
          "description": "Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах. Унаследован от ICopyrightsProvider."
        },
        {
          "name": "remove",
          "return": "",
          "description": "Удаляет добавленную через данный объект информацию об авторских правах. Унаследован от ICopyrightsProvider."
        },
        {
          "name": "setCopyrights",
          "return": "",
          "description": "Задаёт новое значение для добавленной через данный объект информации об авторских правах. Унаследован от ICopyrightsProvider."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "ICustomizable",
    "url": "ICustomizable.xml",
    "def": {
      "name": "ICustomizable",
      "hasCtor": true,
      "props": [
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций."
        }
      ]
    }
  },
  {
    "name": "ICopyrightsProvider",
    "url": "ICopyrightsProvider.xml",
    "def": {
      "name": "ICopyrightsProvider",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getCopyrights",
          "return": "util.Promise",
          "description": "Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах.",
          "params": [
            {
              "param": "coords",
              "type": "Number[]",
              "required": true,
              "description": "Точка на карте, для которой запрашивается информация об авторских правах."
            },
            {
              "param": "zoom",
              "type": "Number",
              "required": true,
              "description": "Уровень масштабирования, для которого запрашивается информация об авторских правах."
            }
          ]
        },
        {
          "name": "remove",
          "return": "",
          "description": "Удаляет добавленную через данный объект информацию об авторских правах."
        },
        {
          "name": "setCopyrights",
          "return": "",
          "description": "Задаёт новое значение для добавленной через данный объект информации об авторских правах.",
          "params": [
            {
              "param": "copyrights",
              "type": "String|HTMLElement|String[]|HTMLElement[]",
              "required": true,
              "description": "Информация об авторских правах."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IDataManager",
    "url": "IDataManager.xml",
    "def": {
      "name": "IDataManager",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает значение поля данных.",
          "params": [
            {
              "param": "path",
              "type": "String",
              "required": true,
              "description": "Строка с именем свойства; может содержать '.'."
            },
            {
              "param": "defaultValue",
              "type": "Object",
              "required": true,
              "description": "Значение по умолчанию."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IDomEventEmitter",
    "url": "IDomEventEmitter.xml",
    "def": {
      "name": "IDomEventEmitter",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий."
        }
      ]
    }
  },
  {
    "name": "IDomEvent",
    "url": "IDomEvent.xml",
    "def": {
      "name": "IDomEvent",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "originalEvent",
          "type": "Object",
          "required": true,
          "description": "Исходное DOM-событие."
        }
      ],
      "inherits": [
        "IEvent"
      ],
      "methods": [
        {
          "name": "callMethod",
          "return": "",
          "description": "Вызывает указанный метод у исходного DOM-события. Второй и последующие аргументы передаются методу при вызове.",
          "params": [
            {
              "param": "name",
              "type": "String",
              "required": true,
              "description": "Имя метода."
            }
          ]
        },
        {
          "name": "get",
          "return": "Object",
          "description": "Возвращает свойство события по ключу. С помощью этого метода можно получать доступ как к свойствам оригинального события, так и к дополнительным свойствам, предоставляемым API карт.",
          "params": [
            {
              "param": "name",
              "type": "String",
              "required": true,
              "description": "Имя свойства. Поддерживаются дополнительные свойства: 'propagatedData' - данные события, которые сохраняются при его пропагировании (распространении по DOM-дереву)."
            }
          ]
        },
        {
          "name": "isImmediatePropagationStopped",
          "return": "",
          "description": "Возвращает true, если распространение события внутри системы событий API Яндекс.Карт остановлено. Это внутренний признак, никак не связанный с пропагацией события по DOM-дереву."
        }
      ]
    }
  },
  {
    "name": "IDomTile",
    "url": "IDomTile.xml",
    "def": {
      "name": "IDomTile",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "url",
          "type": "String",
          "required": true,
          "description": "URL тайла."
        }
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Уничтожает тайл."
        },
        {
          "name": "isReady",
          "return": "Boolean",
          "description": "Проверяет готовность тайла."
        },
        {
          "name": "renderAt",
          "return": "",
          "description": "Добавляет тайл в родительский HTML-элемент.",
          "params": [
            {
              "param": "context",
              "type": "HTMLElement",
              "required": true,
              "description": "Родительский HTML-элемент"
            },
            {
              "param": "clientBounds",
              "type": "Object",
              "required": true,
              "description": "Область в клиентских координатах, которую должен занять тайл."
            },
            {
              "param": "animate",
              "type": "Boolean",
              "required": true,
              "description": "true - анимировать рендеринг, false - нет."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий тайла."
        }
      ]
    }
  },
  {
    "name": "IEvent",
    "url": "IEvent.xml",
    "def": {
      "name": "IEvent",
      "hasCtor": true,
      "methods": [
        {
          "name": "isImmediatePropagationStopped",
          "return": "Boolean",
          "description": "Проверяет, прервано ли событие кем-то из слушателей. Этот метод не является обязательным; если он отсутствует, то прервать обработку события нельзя."
        }
      ]
    }
  },
  {
    "name": "IEventEmitter",
    "url": "IEventEmitter.xml",
    "def": {
      "name": "IEventEmitter",
      "hasCtor": true,
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий."
        }
      ]
    }
  },
  {
    "name": "IEventController",
    "url": "IEventController.xml",
    "def": {
      "name": "IEventController",
      "hasCtor": true,
      "methods": [
        {
          "name": "onStartListening",
          "description": "Вызывается при первой подписке на указанный тип событий через указанный менеджер событий. Этот метод является необязательным.",
          "params": [
            {
              "param": "events",
              "type": "IEventManager",
              "required": true,
              "description": "Менеджер событий."
            },
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            }
          ]
        },
        {
          "name": "onStopListening",
          "description": "Вызывается, когда определённый тип событий перестаёт слушаться на указанном менеджере событий (удалена последняя подписка). Этот метод является необязательным.",
          "params": [
            {
              "param": "events",
              "type": "IEventManager",
              "required": true,
              "description": "Менеджер событий."
            },
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "IEventGroup",
    "url": "IEventGroup.xml",
    "def": {
      "name": "IEventGroup",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "events",
          "type": "event.Manager",
          "required": true,
          "description": "Менеджер событий, для которого создается контейнер."
        }
      ],
      "methods": [
        {
          "name": "add",
          "return": "IEventGroup",
          "description": "Добавляет обработчик события.",
          "params": [
            {
              "param": "types",
              "type": "String|String[]",
              "required": true,
              "description": "Тип или типы событий."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик. В качестве параметра в функцию передается объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения функции-обработчика."
            }
          ]
        },
        {
          "name": "remove",
          "return": "IEventGroup",
          "description": "Удаляет обработчик события. Удалить можно только те обработчики, которые были добавлены через данный экземпляр контейнера.",
          "params": [
            {
              "param": "types",
              "type": "String|String[]",
              "required": true,
              "description": "Тип или типы событий."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик. В качестве параметра в функцию передается объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения функции-обработчика."
            }
          ]
        },
        {
          "name": "removeAll",
          "return": "IEventGroup",
          "description": "Удаляет все обработчики событий, которые были добавлены через данный экземпляр контейнера."
        }
      ]
    }
  },
  {
    "name": "IEventManager",
    "url": "IEventManager.xml",
    "def": {
      "name": "IEventManager",
      "hasCtor": true,
      "methods": [
        {
          "name": "add",
          "return": "IEventManager",
          "description": "Добавляет новую подписку.",
          "params": [
            {
              "param": "types",
              "type": "String|String[]",
              "required": true,
              "description": "Тип или массив типов события."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик события. В качестве параметра в функцию передается объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения обработчика."
            }
          ]
        },
        {
          "name": "fire",
          "return": "IEventManager",
          "description": "Бросает событие.",
          "params": [
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            },
            {
              "param": "eventObject",
              "type": "Object|IEvent",
              "required": false,
              "description": "Объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent. Во втором случае после вызова каждого обработчика будет проверяться значение метода isImmediatePropagationStopped() - если оно истинно, оповещение о событии немедленно прекращается."
            }
          ]
        },
        {
          "name": "getParent",
          "return": "IEventManager|null",
          "description": "Возвращает ссылку на родительский менеджер событий."
        },
        {
          "name": "group",
          "return": "IEventGroup",
          "description": "Возвращает контейнер событий, привязанный к данному менеджеру."
        },
        {
          "name": "remove",
          "return": "IEventManager",
          "description": "Удаляет существующую подписку.",
          "params": [
            {
              "param": "types",
              "type": "String|String[]",
              "required": true,
              "description": "Тип или массив типов события."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик события. В качестве параметра в функцию передается объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent."
            },
            {
              "param": "context",
              "type": "Object",
              "required": false,
              "description": "Контекст исполнения обработчика."
            }
          ]
        },
        {
          "name": "setParent",
          "return": "",
          "description": "Устанавливает родительский менеджер событий.",
          "params": [
            {
              "param": "parent",
              "type": "IEventManager|null",
              "required": true,
              "description": "Родительский менеджер событий."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "IEventWorkflowController",
    "url": "IEventWorkflowController.xml",
    "def": {
      "name": "IEventWorkflowController",
      "hasCtor": true,
      "inherits": [
        "IEventController"
      ],
      "methods": [
        {
          "name": "onAfterEventFiring",
          "description": "Функция, вызываемая после окончания обработки события менеджером событий. Этот метод является необязательным.",
          "params": [
            {
              "param": "events",
              "type": "IEventManager",
              "required": true,
              "description": "Менеджер событий."
            },
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            },
            {
              "param": "event",
              "type": "IEvent",
              "required": false,
              "description": "Событие."
            }
          ]
        },
        {
          "name": "onBeforeEventFiring",
          "description": "Функция, вызываемая до начала обработки события менеджером событий. Этот метод является необязательным.",
          "params": [
            {
              "param": "events",
              "type": "IEventManager",
              "required": true,
              "description": "Менеджер событий."
            },
            {
              "param": "type",
              "type": "String",
              "required": true,
              "description": "Тип события."
            },
            {
              "param": "event",
              "type": "IEvent",
              "required": false,
              "description": "Событие."
            }
          ]
        },
        {
          "name": "onStartListening",
          "description": "Вызывается при первой подписке на указанный тип событий через указанный менеджер событий. Этот метод является необязательным. Унаследован от IEventController."
        },
        {
          "name": "onStopListening",
          "description": "Вызывается, когда определённый тип событий перестаёт слушаться на указанном менеджере событий (удалена последняя подписка). Этот метод является необязательным. Унаследован от IEventController."
        }
      ]
    }
  },
  {
    "name": "IGeocodeProvider",
    "url": "IGeocodeProvider.xml",
    "def": {
      "name": "IGeocodeProvider",
      "hasCtor": true,
      "methods": [
        {
          "name": "geocode",
          "return": "util.Promise",
          "description": "Отправляет запрос на геокодирование. Добавить функцию-обработчик для обработки результата геокодирования можно через возвращаемый объект-promise. Объект, поступающий на вход функции-обработчика может содержать поля только следующего вида: geoObjects, layers, mapState, metaData.",
          "params": [
            {
              "param": "request",
              "property": "",
              "type": "String",
              "required": true,
              "description": "Строка запроса."
            },
            {
              "param": "options",
              "property": "",
              "type": "Object",
              "required": false,
              "description": "Опции.",
              "properties": [
                {
                  "param": "boundedBy",
                  "type": "Number[][]",
                  "required": false,
                  "description": "Прямоугольная область на карте, где предположительно находится искомый объект. Должна быть задана как массив, например [[30, 40], [50, 50]]."
                },
                {
                  "param": "results",
                  "type": "Number",
                  "required": false,
                  "description": "Максимальное количество возвращаемых результатов."
                },
                {
                  "param": "skip",
                  "type": "Number",
                  "required": false,
                  "description": "Число результатов, которое необходимо пропустить."
                },
                {
                  "param": "strictBounds",
                  "type": "Boolean",
                  "required": false,
                  "description": "Искать только внутри области, заданной опцией boundedBy."
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "name": "IFreezable",
    "url": "IFreezable.xml",
    "def": {
      "name": "IFreezable",
      "hasCtor": true,
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта."
        }
      ]
    }
  },
  {
    "name": "IExpandableControlLayout",
    "url": "IExpandableControlLayout.xml",
    "def": {
      "name": "IExpandableControlLayout",
      "hasCtor": true,
      "inherits": [
        "ILayout"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout."
        },
        {
          "name": "getChildContainerElement",
          "return": "Object",
          "description": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout."
        },
        {
          "name": "getClientBoundingRect",
          "return": "Number[][]",
          "description": "Возвращает размеры и позицию относительно родителя. Унаследован от ILayout."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от ILayout."
        },
        {
          "name": "getParentElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский html-элемент. Унаследован от ILayout."
        },
        {
          "name": "isEmpty",
          "return": "Boolean",
          "description": "Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные макета. Унаследован от ILayout."
        },
        {
          "name": "setParentElement",
          "return": "",
          "description": "Добавляет макет в DOM-дерево. Унаследован от ILayout."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IGeometry",
    "url": "IGeometry.xml",
    "def": {
      "name": "IGeometry",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry",
        "ICustomizable"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты.",
          "params": [
            {
              "param": "options",
              "type": "Object",
              "description": "Хэш опций, позволяющий перекрыть часть текущих опций геометрии для данного расчета."
            }
          ]
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту.",
          "params": [
            {
              "param": "map",
              "type": "Map|null",
              "required": true,
              "description": "Ссылка на карту."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IGeometryEditor",
    "url": "IGeometryEditor.xml",
    "def": {
      "name": "IGeometryEditor",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "startEditing",
          "description": "Включает режим редактирования."
        },
        {
          "name": "stopEditing",
          "description": "Отключает режим редактирования."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние редактора геометрии."
        }
      ]
    }
  },
  {
    "name": "IGeoObject",
    "url": "IGeoObject.xml",
    "def": {
      "name": "IGeoObject",
      "hasCtor": true,
      "inherits": [
        "IChildOnMap",
        "ICustomizable",
        "IDomEventEmitter",
        "IParentOnMap"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "getOverlay",
          "return": "IOverlay|null",
          "description": "Возвращает оверлей геообъекта, либо null."
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "geometry",
          "type": "IGeometry",
          "description": "Геометрия геообъекта."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        },
        {
          "name": "properties",
          "type": "IDataManager",
          "description": "Менеджер данных геообъекта."
        },
        {
          "name": "state",
          "type": "IDataManager",
          "description": "Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается."
        }
      ]
    }
  },
  {
    "name": "IGroupControlLayout",
    "url": "IGroupControlLayout.xml",
    "def": {
      "name": "IGroupControlLayout",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "data",
          "type": "Object",
          "required": true,
          "description": "Данные макета."
        }
      ],
      "inherits": [
        "ILayout"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout."
        },
        {
          "name": "getChildContainerElement",
          "return": "Object",
          "description": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout."
        },
        {
          "name": "getClientBoundingRect",
          "return": "Number[][]",
          "description": "Возвращает размеры и позицию относительно родителя. Унаследован от ILayout."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от ILayout."
        },
        {
          "name": "getParentElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский html-элемент. Унаследован от ILayout."
        },
        {
          "name": "isEmpty",
          "return": "Boolean",
          "description": "Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные макета. Унаследован от ILayout."
        },
        {
          "name": "setParentElement",
          "return": "",
          "description": "Добавляет макет в DOM-дерево. Унаследован от ILayout."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IHotspotObjectSource",
    "url": "IHotspotObjectSource.xml",
    "def": {
      "name": "IHotspotObjectSource",
      "hasCtor": true,
      "inherits": [
        "ICustomizable"
      ],
      "methods": [
        {
          "name": "cancelLastRequest",
          "description": "Отменяет последний запрос за данными."
        },
        {
          "name": "requestObjects",
          "description": "Строит массив объектов IHotspotShape, соответствующих определенному слою, тайлу и коэффициенту масштабирования карты, и передает его в функцию callback.",
          "params": [
            {
              "param": "layer",
              "type": "hotspot.Layer",
              "required": true,
              "description": "Слой активных областей."
            },
            {
              "param": "tileNumber",
              "type": "Number[]",
              "required": true,
              "description": "Тайловые координаты."
            },
            {
              "param": "zoom",
              "type": "Number",
              "required": true,
              "description": "Коэффициент масштабирования."
            },
            {
              "param": "callback",
              "type": "Function",
              "required": true,
              "description": "Функция-обработчик."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IHotspotShape",
    "url": "IHotspotShape.xml",
    "def": {
      "name": "IHotspotShape",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "name": "getContainer",
          "return": "IHotspotContainer",
          "description": "Возвращает контейнер хотспотных шейпов."
        },
        {
          "name": "getGeometry",
          "return": "Object",
          "description": "Метод для получения реальной геометрии объекта."
        },
        {
          "name": "getId",
          "return": "Number",
          "description": "Возвращает идентификатор объекта."
        },
        {
          "name": "getProperties",
          "return": "Object",
          "description": "Возвращает данные объекта."
        },
        {
          "name": "getRenderedGeometry",
          "return": "IHotspotShapeGeometry",
          "description": "Возвращает пиксельную геометрию хотспотного объекта."
        },
        {
          "name": "setContainer",
          "return": "",
          "description": "Метод для добавления хотспотного шейпа в контейнер.",
          "params": [
            {
              "param": "container",
              "type": "IHotspotContainer",
              "required": true,
              "description": "Контейнер, в который добавляется шейп."
            }
          ]
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Метод для задания реальной геометрии объекта.",
          "params": [
            {
              "param": "geometry",
              "type": "Object",
              "required": true,
              "description": "Реальная геометрия объекта."
            }
          ]
        },
        {
          "name": "setId",
          "return": "",
          "description": "",
          "params": [
            {
              "param": "id",
              "type": "Number",
              "required": true,
              "description": "Идентификатор объекта."
            }
          ]
        },
        {
          "name": "setProperties",
          "return": "",
          "description": "",
          "params": [
            {
              "param": "properties",
              "type": "Object",
              "required": true,
              "description": "Данные объекта."
            }
          ]
        },
        {
          "name": "setRenderedGeometry",
          "return": "",
          "description": "",
          "params": [
            {
              "param": "renderedGeometry",
              "type": "IPixelGeometry",
              "required": true,
              "description": "Пиксельная геометрия объекта."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IHotspotShapeGeometry",
    "url": "IHotspotShapeGeometry.xml",
    "def": {
      "name": "IHotspotShapeGeometry",
      "hasCtor": true,
      "inherits": [
        "ICustomizable"
      ],
      "props": [
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IIterator",
    "url": "IIterator.xml",
    "def": {
      "name": "IIterator",
      "hasCtor": true,
      "methods": [
        {
          "name": "getNext",
          "return": "Object|null",
          "description": "Возвращает ссылку на очередной объект списка. При первом вызове возвращает ссылку на первый элемент. Возвращает null, если достигнут конец списка."
        }
      ]
    }
  },
  {
    "name": "ILayout",
    "url": "ILayout.xml",
    "def": {
      "name": "ILayout",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "data",
          "type": "Object",
          "required": true,
          "description": "Данные макета."
        }
      ],
      "inherits": [
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Деструктор. Вызывается при завершении работы с макетом."
        },
        {
          "name": "getChildContainerElement",
          "return": "Object",
          "description": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы."
        },
        {
          "name": "getClientBoundingRect",
          "return": "Number[][]",
          "description": "Возвращает размеры и позицию относительно родителя."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета."
        },
        {
          "name": "getParentElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский html-элемент."
        },
        {
          "name": "isEmpty",
          "return": "Boolean",
          "description": "Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные макета.",
          "params": [
            {
              "param": "data",
              "type": "Object",
              "required": true,
              "description": "Данные макета."
            }
          ]
        },
        {
          "name": "setParentElement",
          "return": "",
          "description": "Добавляет макет в DOM-дерево.",
          "params": [
            {
              "param": "parent",
              "type": "HTMLElement|null",
              "required": true,
              "description": "Родительский html-элемент. Родительский элемент должен быть добавлен в DOM-дерево. Если передан null, то элемент удаляется из DOM-дерева."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        }
      ]
    }
  },
  {
    "name": "ILayer",
    "url": "ILayer.xml",
    "def": {
      "name": "ILayer",
      "hasCtor": true,
      "inherits": [
        "IChildOnMap",
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getBrightness",
          "return": "Number",
          "description": "Необязательный метод. Возвращает яркость слоя. В зависимости от суммарной яркости слоев, добавленных на карту, выбирается цвет логотипа и копирайтов на карте."
        },
        {
          "name": "getCopyrights",
          "return": "util.Promise",
          "description": "Необязательный метод. Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах.",
          "params": [
            {
              "param": "coords",
              "type": "Number[]",
              "required": true,
              "description": "Точка на карте, для которой запрашивается информация об авторских правах."
            },
            {
              "param": "zoom",
              "type": "Number",
              "required": true,
              "description": "Уровень масштабирования, для которого запрашивается информация об авторских правах."
            }
          ]
        },
        {
          "name": "getParent",
          "return": "IParentOnMap",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IChildOnMap."
        },
        {
          "name": "getZoomRange",
          "return": "util.Promise",
          "description": "Необязательный метод. Определяет доступный в указанной точке диапазон уровней масштабирования. Если данные есть, то возвращенный объект-promise будет подтвержден и передаст в качестве результата массив из двух чисел - минимальный и максимальный доступный в точке уровень масштабирования. Если данных нет, то promise отклоняется с указанием ошибки.",
          "params": [
            {
              "param": "point",
              "type": "Number[]",
              "required": true,
              "description": "Точка"
            }
          ]
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IChildOnMap."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "ILinearRingGeometryAccess",
    "url": "ILinearRingGeometryAccess.xml",
    "def": {
      "name": "ILinearRingGeometryAccess",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри контура.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[]",
          "description": "Возвращает координаты точки с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс точки."
            }
          ]
        },
        {
          "name": "getChildGeometry",
          "return": "IPointGeometryAccess",
          "description": "Создает и возвращает объект IPointGeometryAccess для заданной вершины контура.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс вершины контура."
            }
          ]
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре точку, ближайшую к anchorPosition.",
          "params": [
            {
              "param": "anchorPosition",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки, для которой расчитывается ближайшая точка на контуре."
            }
          ]
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает массив координат геометрии."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии."
        },
        {
          "name": "insert",
          "return": "ILinearRingGeometryAccess",
          "description": "Добавляет новую точку с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс точки."
            },
            {
              "param": "coordinates",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "Number[]",
          "description": "Удаляет точку с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс точки."
            }
          ]
        },
        {
          "name": "set",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает координаты точки c заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс точки."
            },
            {
              "param": "coordinates",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "setCoordinates",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает массив координат геометрии.",
          "params": [
            {
              "param": "coordinates",
              "type": "Number[][]",
              "required": true,
              "description": "Координаты геометрии."
            }
          ]
        },
        {
          "name": "setFillRule",
          "return": "ILinearRingGeometryAccess",
          "description": "Задает алгоритм заливки контура.",
          "params": [
            {
              "param": "fillRule",
              "type": "String",
              "required": true,
              "description": "Идентификатор алгоритма заливки."
            }
          ]
        },
        {
          "name": "splice",
          "return": "Number[][]",
          "description": "Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс, начиная с которого производится удаление и добавление точек."
            },
            {
              "param": "number",
              "type": "Integer",
              "required": true,
              "description": "Количество удаляемых точек."
            }
          ]
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта. Унаследовано от IFreezable."
        }
      ]
    }
  },
  {
    "name": "ILineStringGeometry",
    "url": "ILineStringGeometry.xml",
    "def": {
      "name": "ILineStringGeometry",
      "hasCtor": true,
      "inherits": [
        "IGeometry",
        "ILineStringGeometryAccess"
      ],
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[]",
          "description": "Возвращает координаты точки с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "IPointGeometryAccess",
          "description": "Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает массив координат геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"LineString\"."
        },
        {
          "name": "insert",
          "return": "ILineStringGeometryAccess",
          "description": "Добавляет новую точку с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "Number[]",
          "description": "Удаляет точку с заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "set",
          "return": "ILineStringGeometryAccess",
          "description": "Задает координаты точки c заданным индексом. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "ILineStringGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        },
        {
          "name": "splice",
          "return": "Number[][]",
          "description": "Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILineStringGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IMapAction",
    "url": "IMapAction.xml",
    "def": {
      "name": "IMapAction",
      "hasCtor": true,
      "inherits": [
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "begin",
          "description": "Запускает движение на исполнение картой. Этот метод автоматически вызывается менеджером движений карты. С момента вызова IMapAction.begin карта слушает события IMapAction.tick и IMapAction.end и исполняет их.",
          "params": [
            {
              "param": "mapActionManager",
              "type": "map.action.Manager",
              "required": true,
              "description": "Карта, на которой исполняется движение."
            }
          ]
        },
        {
          "name": "end",
          "description": "Останавливает движение."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "ILineStringGeometryAccess",
    "url": "ILineStringGeometryAccess.xml",
    "def": {
      "name": "ILineStringGeometryAccess",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[]",
          "description": "Возвращает координаты точки с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс точки."
            }
          ]
        },
        {
          "name": "getChildGeometry",
          "return": "IPointGeometryAccess",
          "description": "Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс вершины."
            }
          ]
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на ломаной линии точку, ближайшую к anchorPosition.",
          "params": [
            {
              "param": "anchorPosition",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки, для которой расчитывается ближайшая точка на ломаной."
            }
          ]
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает массив координат геометрии."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии."
        },
        {
          "name": "insert",
          "return": "ILineStringGeometryAccess",
          "description": "Добавляет новую точку с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс точки."
            },
            {
              "param": "coordinates",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "Number[]",
          "description": "Удаляет точку с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс точки."
            }
          ]
        },
        {
          "name": "set",
          "return": "ILineStringGeometryAccess",
          "description": "Задает координаты точки c заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс точки."
            },
            {
              "param": "coordinates",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "setCoordinates",
          "return": "ILineStringGeometryAccess",
          "description": "Задает массив координат геометрии.",
          "params": [
            {
              "param": "coordinates",
              "type": "Number[][]",
              "required": true,
              "description": "Координаты геометрии."
            }
          ]
        },
        {
          "name": "splice",
          "return": "Number[][]",
          "description": "Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс, начиная с которого производится удаление и добавление точек."
            },
            {
              "param": "number",
              "type": "Integer",
              "required": true,
              "description": "Количество удаляемых точек."
            }
          ]
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта. Унаследовано от IFreezable."
        }
      ]
    }
  },
  {
    "name": "IMapState",
    "url": "IMapState.xml",
    "def": {
      "name": "IMapState",
      "hasCtor": true,
      "methods": [
        {
          "name": "applyToMap",
          "return": "util.Promise",
          "description": "Применяет состояние к переданной карте.",
          "params": [
            {
              "param": "map",
              "type": "Map",
              "required": true,
              "description": "Карта."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "IMapObjectCollection",
    "url": "IMapObjectCollection.xml",
    "def": {
      "name": "IMapObjectCollection",
      "hasCtor": true,
      "inherits": [
        "ICollection",
        "ICustomizable",
        "IParentOnMap"
      ],
      "methods": [
        {
          "name": "add",
          "return": "ICollection",
          "description": "Добавляет в коллекцию дочерний объект. Унаследован от ICollection."
        },
        {
          "name": "getIterator",
          "return": "IIterator",
          "description": "Возвращает итератор по коллекции. Унаследован от ICollection."
        },
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту. Унаследован от IParentOnMap."
        },
        {
          "name": "remove",
          "return": "ICollection",
          "description": "Удаляет из коллекции дочерний объект. Унаследован от ICollection."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IOptionManager",
    "url": "IOptionManager.xml",
    "def": {
      "name": "IOptionManager",
      "hasCtor": true,
      "inherits": [
        "IChild",
        "IEventEmitter",
        "IFreezable"
      ],
      "methods": [
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "",
          "description": "Возвращает значение заданной опции в контексте существующей иерархии наследования опций. При вызове данного метода сначала происходит поиск значения в текущем менеджере опций, а затем, если значение не определено, поиск продолжается в иерархии родительских менеджеров.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": "Имя опции."
            },
            {
              "param": "defaultValue",
              "type": "Object",
              "required": false,
              "description": "Значение по умолчанию."
            }
          ]
        },
        {
          "name": "getAll",
          "return": "Object",
          "description": "Возвращает ссылку на внутренний хэш хранящий значения опций."
        },
        {
          "name": "getName",
          "return": "String",
          "description": "Возвращает имя менеджера опций."
        },
        {
          "name": "getNative",
          "return": "Object",
          "description": "Возвращает значение заданной опции, определенное на данном уровне иерархии опций, т.е. в данном менеджере.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": "Имя опции."
            }
          ]
        },
        {
          "name": "getParent",
          "return": "IOptionManager|null",
          "description": "Возвращает родительский менеджер опций."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "resolve",
          "return": "Object",
          "description": "Метод, предназначенный для вызова дочерними менеджерами опций.",
          "params": [
            {
              "param": "key",
              "type": "String",
              "required": true,
              "description": "Имя опции."
            },
            {
              "param": "name",
              "type": "String",
              "required": false,
              "description": "Имя дочернего менеджера опций."
            }
          ]
        },
        {
          "name": "setName",
          "return": "",
          "description": "Задает имя менеджера опций.",
          "params": [
            {
              "param": "name",
              "type": "String",
              "required": true,
              "description": "Имя менеджера опций."
            }
          ]
        },
        {
          "name": "setParent",
          "return": "IChild",
          "description": "Задает родительский менеджер опций.",
          "params": [
            {
              "param": "parent",
              "type": "IOptionManager|null",
              "required": true,
              "description": "Родительский менеджер опций."
            }
          ]
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта. Унаследовано от IFreezable."
        }
      ]
    }
  },
  {
    "name": "IOverlay",
    "url": "IOverlay.xml",
    "def": {
      "name": "IOverlay",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IDomEventEmitter"
      ],
      "methods": [
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета."
        },
        {
          "name": "getGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает текущую пиксельную геометрию."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на текущую карту."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные оверлея.",
          "params": [
            {
              "param": "data",
              "type": "Object",
              "required": true,
              "description": "Данные оверлея."
            }
          ]
        },
        {
          "name": "setGeometry",
          "return": "",
          "description": "Задает пиксельную геометрию оверлея.",
          "params": [
            {
              "param": "geometry",
              "type": "IPixelGeometry",
              "required": true,
              "description": "Геометрия в глобальных пиксельных координатах."
            }
          ]
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту, на которой должен отобразиться оверлей.",
          "params": [
            {
              "param": "map",
              "type": "Map|null",
              "required": true,
              "description": "Ссылка на карту."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IOverlayFactory",
    "url": "IOverlayFactory.xml",
    "def": {
      "name": "IOverlayFactory",
      "hasCtor": true,
      "methods": [
        {
          "name": "createOverlay",
          "return": "IOverlay",
          "description": "Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии.",
          "params": [
            {
              "param": "pixelGeometry",
              "type": "IPixelGeometry",
              "required": true,
              "description": "Пиксельная геометрия оверлея."
            },
            {
              "param": "data",
              "type": "Object",
              "required": false,
              "description": "Данные оверлея."
            },
            {
              "param": "options",
              "type": "Object",
              "required": false,
              "description": "Опции оверлея."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "IPane",
    "url": "IPane.xml",
    "def": {
      "name": "IPane",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "map",
          "type": "Map",
          "required": true,
          "description": "Карта."
        }
      ],
      "inherits": [
        "IEventEmitter",
        "IPositioningContext"
      ],
      "methods": [
        {
          "name": "fromClientPixels",
          "return": "Number[]",
          "description": "Преобразует клиентские пиксельные координаты в глобальные. Унаследован от IPositioningContext."
        },
        {
          "name": "getElement",
          "return": "HTMLElement",
          "description": "Возвращает DOM-элемент контейнера."
        },
        {
          "name": "getViewport",
          "return": "Number[][]",
          "description": "Возвращает область показа объектов в клиентских координатах."
        },
        {
          "name": "getZoom",
          "return": "Number",
          "description": "Возвращает уровень масштабирования."
        },
        {
          "name": "toClientPixels",
          "return": "Number[]",
          "description": "Преобразует глобальные пиксельные координаты в клиентские. Унаследован от IPositioningContext."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IParentOnMap",
    "url": "IParentOnMap.xml",
    "def": {
      "name": "IParentOnMap",
      "hasCtor": true,
      "methods": [
        {
          "name": "getMap",
          "return": "Map",
          "description": "Возвращает ссылку на карту."
        }
      ]
    }
  },
  {
    "name": "IPixelCircleGeometry",
    "url": "IPixelCircleGeometry.xml",
    "def": {
      "name": "IPixelCircleGeometry",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[]",
          "required": true,
          "description": "Координаты центра круга."
        },
        {
          "param": "metaData",
          "type": "Object",
          "required": false,
          "description": "метаданные"
        }
      ],
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]",
          "description": "Возвращает координаты центра круга."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getRadius",
          "return": "Number",
          "description": "Возвращает радиус круга."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IPixelPointGeometry",
    "url": "IPixelPointGeometry.xml",
    "def": {
      "name": "IPixelPointGeometry",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[]",
          "required": true,
          "description": "Координаты точки."
        },
        {
          "param": "metaData",
          "type": "Object",
          "required": false,
          "description": "метаданные"
        }
      ],
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]",
          "description": "Возвращает координаты точки."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IPixelLineStringGeometry",
    "url": "IPixelLineStringGeometry.xml",
    "def": {
      "name": "IPixelLineStringGeometry",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][]",
          "required": true,
          "description": "Координаты линии."
        },
        {
          "param": "metaData",
          "type": "Object",
          "required": false,
          "description": "метаданные"
        }
      ],
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на ломаной линии точку, ближайшую к anchorPosition.",
          "params": [
            {
              "param": "anchorPosition",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки, для которой расчитывается ближайшая точка на ломаной."
            }
          ]
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает координаты линии."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество точек в геометрии."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IPixelGeometry",
    "url": "IPixelGeometry.xml",
    "def": {
      "name": "IPixelGeometry",
      "hasCtor": true,
      "inherits": [
        "IBaseGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии.",
          "params": [
            {
              "param": "coef",
              "type": "Number",
              "required": true,
              "description": "Масштабный коэффициент."
            }
          ]
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину.",
          "params": [
            {
              "param": "offset",
              "type": "Number[]",
              "required": true,
              "description": "Величина сдвига по осям."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IPixelPolygonGeometry",
    "url": "IPixelPolygonGeometry.xml",
    "def": {
      "name": "IPixelPolygonGeometry",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][][]",
          "required": true,
          "description": "Координаты многоугольника."
        },
        {
          "param": "fillRule",
          "type": "String",
          "required": true,
          "description": "Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри."
        },
        {
          "param": "metaData",
          "type": "Object",
          "required": false,
          "description": "метаданные"
        }
      ],
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет лежит ли переданная точка внутри многоугольника.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition.",
          "params": [
            {
              "param": "anchorPosition",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки, для которой расчитывается ближайшая точка на контуре многоугольника."
            }
          ]
        },
        {
          "name": "getCoordinates",
          "return": "Number[][][]",
          "description": "Возвращает координаты многоугольника."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки многоугольника."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество контуров в многоугольнике."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IPixelRectangleGeometry",
    "url": "IPixelRectangleGeometry.xml",
    "def": {
      "name": "IPixelRectangleGeometry",
      "hasCtor": true,
      "ctorParams": [
        {
          "param": "coordinates",
          "type": "Number[][]",
          "required": true,
          "description": "Координаты двух противоположных углов прямоугольника."
        },
        {
          "param": "metaData",
          "type": "Object",
          "required": false,
          "description": "метаданные"
        }
      ],
      "inherits": [
        "IPixelGeometry"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][]",
          "description": "Возвращает координаты двух противоположных углов прямоугольника."
        },
        {
          "name": "getMetaData",
          "return": "Object",
          "description": "Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry."
        },
        {
          "name": "scale",
          "return": "IPixelGeometry",
          "description": "Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry."
        },
        {
          "name": "shift",
          "return": "IPixelGeometry",
          "description": "Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IPointGeometry",
    "url": "IPointGeometry.xml",
    "def": {
      "name": "IPointGeometry",
      "hasCtor": true,
      "inherits": [
        "IGeometry",
        "IPointGeometryAccess"
      ],
      "methods": [
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты точки. Унаследован от IPointGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Point\"."
        },
        {
          "name": "setCoordinates",
          "return": "IPointGeometryAccess",
          "description": "Задает координаты точки. Унаследован от IPointGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IPointGeometryAccess",
    "url": "IPointGeometryAccess.xml",
    "def": {
      "name": "IPointGeometryAccess",
      "hasCtor": true,
      "methods": [
        {
          "name": "getCoordinates",
          "return": "Number[]|null",
          "description": "Возвращает координаты точки."
        },
        {
          "name": "setCoordinates",
          "return": "IPointGeometryAccess",
          "description": "Задает координаты точки.",
          "params": [
            {
              "param": "coordinates",
              "type": "Number[]|null",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "IPolygonGeometry",
    "url": "IPolygonGeometry.xml",
    "def": {
      "name": "IPolygonGeometry",
      "hasCtor": true,
      "inherits": [
        "IGeometry",
        "IPolygonGeometryAccess"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри многоугольника. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[][]",
          "description": "Возвращает координаты контура с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getChildGeometry",
          "return": "ILinearRingGeometryAccess",
          "description": "Создает и возвращает объект ILinearRingGeometryAccess для заданного контура. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "Number[][][]",
          "description": "Возвращает массив координат геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество контуров в геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Polygon\"."
        },
        {
          "name": "insert",
          "return": "IPolygonGeometryAccess",
          "description": "Добавляет новый контур с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "ILinearRingGeometryAccess",
          "description": "Удаляет контур с заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "set",
          "return": "IPolygonGeometryAccess",
          "description": "Задает координаты контура c заданным индексом. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setCoordinates",
          "return": "IPolygonGeometryAccess",
          "description": "Задает массив координат геометрии. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setFillRule",
          "return": "IPolygonGeometryAccess",
          "description": "Задает алгоритм заливки многоугольника. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        },
        {
          "name": "splice",
          "return": "ILinearRingGeometryAccess[]",
          "description": "Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number. Унаследован от IPolygonGeometryAccess."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IProjection",
    "url": "IProjection.xml",
    "def": {
      "name": "IProjection",
      "hasCtor": true,
      "methods": [
        {
          "name": "fromGlobalPixels",
          "return": "Number[]",
          "description": "Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции.",
          "params": [
            {
              "param": "globalPixelPoint",
              "type": "Number[]",
              "required": true,
              "description": "Точка в пиксельных координатах."
            },
            {
              "param": "zoom",
              "type": "Number",
              "required": true,
              "description": "Уровень масштабирования."
            }
          ]
        },
        {
          "name": "getCoordSystem",
          "return": "ICoordSystem",
          "description": "Возвращает координатную систему, используемую проекцией. Необязательный метод. В случае его отсутствия будет использована координатная система coordSystem.cartesian."
        },
        {
          "name": "isCycled",
          "return": "Boolean[]",
          "description": "Показатель зацикленности проекции."
        },
        {
          "name": "toGlobalPixels",
          "return": "Number[]",
          "description": "Преобразует координаты проекции в глобальные пиксельные на указанном уровне масштабирования.",
          "params": [
            {
              "param": "coordPoint",
              "type": "Number[]",
              "required": true,
              "description": "Точка в координатах проекции."
            },
            {
              "param": "zoom",
              "type": "Number",
              "required": true,
              "description": "Уровень масштабирования."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "IRectangleGeometry",
    "url": "IRectangleGeometry.xml",
    "def": {
      "name": "IRectangleGeometry",
      "hasCtor": true,
      "inherits": [
        "IGeometry",
        "IRectangleGeometryAccess"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getBounds",
          "return": "Number[][]|null",
          "description": "Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре прямоугольника точку, ближайшую к anchorPosition. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "getCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает текущую карту. Унаследован от IGeometry."
        },
        {
          "name": "getPixelGeometry",
          "return": "IPixelGeometry",
          "description": "Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry."
        },
        {
          "name": "getType",
          "return": "String",
          "description": "Возвращает строку \"Rectangle\"."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Задает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "Задает карту. Унаследован от IGeometry."
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IPositioningContext",
    "url": "IPositioningContext.xml",
    "def": {
      "name": "IPositioningContext",
      "hasCtor": true,
      "methods": [
        {
          "name": "fromClientPixels",
          "return": "Number[]",
          "description": "Преобразует клиентские пиксельные координаты в глобальные.",
          "params": [
            {
              "param": "clientPixelPoint",
              "type": "Number[]",
              "required": true,
              "description": "Клиентские пиксельные координаты."
            }
          ]
        },
        {
          "name": "getZoom",
          "return": "Number",
          "description": "Возвращает текущий уровень масштабирования, в котором работает контекст позиционирования."
        },
        {
          "name": "toClientPixels",
          "return": "Number[]",
          "description": "Преобразует глобальные пиксельные координаты в клиентские.",
          "params": [
            {
              "param": "globalPixelPoint",
              "type": "Number[]",
              "required": true,
              "description": "Глобальные пиксельные координаты."
            }
          ]
        }
      ]
    }
  },
  {
    "name": "ISearchControlLayout",
    "url": "ISearchControlLayout.xml",
    "def": {
      "name": "ISearchControlLayout",
      "hasCtor": true,
      "inherits": [
        "IExpandableControlLayout"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout."
        },
        {
          "name": "getChildContainerElement",
          "return": "Object",
          "description": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout."
        },
        {
          "name": "getClientBoundingRect",
          "return": "Number[][]",
          "description": "Возвращает размеры и позицию относительно родителя. Унаследован от ILayout."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от ILayout."
        },
        {
          "name": "getParentElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский html-элемент. Унаследован от ILayout."
        },
        {
          "name": "isEmpty",
          "return": "Boolean",
          "description": "Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные макета. Унаследован от ILayout."
        },
        {
          "name": "setParentElement",
          "return": "",
          "description": "Добавляет макет в DOM-дерево. Унаследован от ILayout."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IRectangleGeometryAccess",
    "url": "IRectangleGeometryAccess.xml",
    "def": {
      "name": "IRectangleGeometryAccess",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри прямоугольника.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре прямоугольника точку, ближайшую к anchorPosition.",
          "params": [
            {
              "param": "anchorPosition",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки, для которой расчитывается ближайшая точка на прямоугольнике."
            }
          ]
        },
        {
          "name": "getCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Возвращает координаты двух противоположных углов прямоугольника."
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "setCoordinates",
          "return": "IRectangleGeometryAccess",
          "description": "Задает координаты двух противоположных углов прямоугольника.",
          "params": [
            {
              "param": "coordinates",
              "type": "Number[][]",
              "required": true,
              "description": "Координаты углов."
            }
          ]
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта. Унаследовано от IFreezable."
        }
      ]
    }
  },
  {
    "name": "ISelectableControl",
    "url": "ISelectableControl.xml",
    "def": {
      "name": "ISelectableControl",
      "hasCtor": true,
      "inherits": [
        "IControl"
      ],
      "methods": [
        {
          "name": "deselect",
          "return": "",
          "description": "Отменяет выбор элемента управления (выключает)."
        },
        {
          "name": "disable",
          "return": "",
          "description": "Делает элемент управления недоступным (запрещены пользовательские действия)."
        },
        {
          "name": "enable",
          "return": "",
          "description": "Делает элемент управления доступным (разрешены пользовательские действия)."
        },
        {
          "name": "getParent",
          "return": "IControlParent",
          "description": "Возвращает ссылку на родительский объект. Унаследован от IControl."
        },
        {
          "name": "isEnabled",
          "return": "Boolean",
          "description": "Возвращает true - элемент управления доступен, false - недоступен."
        },
        {
          "name": "isSelected",
          "return": "Boolean",
          "description": "Возвращает true - элемент управления выбран, false - не выбран."
        },
        {
          "name": "select",
          "return": "",
          "description": "Выбирает (включает) элемент управления."
        },
        {
          "name": "setParent",
          "return": "IChildOnMap",
          "description": "Устанавливает родительский объект. Унаследован от IControl."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        }
      ]
    }
  },
  {
    "name": "ISelectableControlLayout",
    "url": "ISelectableControlLayout.xml",
    "def": {
      "name": "ISelectableControlLayout",
      "hasCtor": true,
      "inherits": [
        "ILayout"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout."
        },
        {
          "name": "getChildContainerElement",
          "return": "Object",
          "description": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout."
        },
        {
          "name": "getClientBoundingRect",
          "return": "Number[][]",
          "description": "Возвращает размеры и позицию относительно родителя. Унаследован от ILayout."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от ILayout."
        },
        {
          "name": "getParentElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский html-элемент. Унаследован от ILayout."
        },
        {
          "name": "isEmpty",
          "return": "Boolean",
          "description": "Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные макета. Унаследован от ILayout."
        },
        {
          "name": "setParentElement",
          "return": "",
          "description": "Добавляет макет в DOM-дерево. Унаследован от ILayout."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        }
      ]
    }
  },
  {
    "name": "ITrafficProvider",
    "url": "ITrafficProvider.xml",
    "def": {
      "name": "ITrafficProvider",
      "hasCtor": true,
      "inherits": [
        "ICustomizable",
        "IEventEmitter"
      ],
      "methods": [
        {
          "name": "getMap",
          "return": "Map|null",
          "description": "Возвращает ссылку на карту."
        },
        {
          "name": "setMap",
          "return": "",
          "description": "",
          "params": [
            {
              "param": "Ссылка",
              "type": "Map|null",
              "required": true,
              "description": "на карту."
            }
          ]
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IEventEmitter."
        },
        {
          "name": "options",
          "type": "IOptionManager",
          "description": "Менеджер опций. Унаследовано от ICustomizable."
        }
      ]
    }
  },
  {
    "name": "IPolygonGeometryAccess",
    "url": "IPolygonGeometryAccess.xml",
    "def": {
      "name": "IPolygonGeometryAccess",
      "hasCtor": true,
      "inherits": [
        "IFreezable"
      ],
      "methods": [
        {
          "name": "contains",
          "return": "Boolean",
          "description": "Проверяет, лежит ли переданная точка внутри многоугольника.",
          "params": [
            {
              "param": "position",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки."
            }
          ]
        },
        {
          "name": "freeze",
          "return": "IFreezable",
          "description": "Переводит объект в \"замороженный\" режим. Унаследован от IFreezable."
        },
        {
          "name": "get",
          "return": "Number[][]",
          "description": "Возвращает координаты контура с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс контура."
            }
          ]
        },
        {
          "name": "getChildGeometry",
          "return": "ILinearRingGeometryAccess",
          "description": "Создает и возвращает объект ILinearRingGeometryAccess для заданного контура.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс контура."
            }
          ]
        },
        {
          "name": "getClosest",
          "return": "Object",
          "description": "Ищет на контуре многоугольника точку, ближайшую к anchorPosition.",
          "params": [
            {
              "param": "anchorPosition",
              "type": "Number[]",
              "required": true,
              "description": "Координаты точки, для которой расчитывается ближайшая точка на контуре многоугольника."
            }
          ]
        },
        {
          "name": "getCoordinates",
          "return": "Number[][][]",
          "description": "Возвращает массив координат геометрии."
        },
        {
          "name": "getFillRule",
          "return": "String",
          "description": "Возвращает идентификатор алгоритма заливки."
        },
        {
          "name": "getLength",
          "return": "Integer",
          "description": "Возвращает количество контуров в геометрии."
        },
        {
          "name": "insert",
          "return": "IPolygonGeometryAccess",
          "description": "Добавляет новый контур с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс контура."
            },
            {
              "param": "path",
              "type": "Number[][]",
              "required": true,
              "description": "Координаты контура."
            }
          ]
        },
        {
          "name": "isFrozen",
          "return": "Boolean",
          "description": "Возвращает true, если объект находится в \"замороженном\" режиме, иначе false. Унаследован от IFreezable."
        },
        {
          "name": "remove",
          "return": "ILinearRingGeometryAccess",
          "description": "Удаляет контур с заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс контура."
            }
          ]
        },
        {
          "name": "set",
          "return": "IPolygonGeometryAccess",
          "description": "Задает координаты контура c заданным индексом.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс контура."
            },
            {
              "param": "path",
              "type": "Number[][]",
              "required": true,
              "description": "Координаты контура."
            }
          ]
        },
        {
          "name": "setCoordinates",
          "return": "IPolygonGeometryAccess",
          "description": "Задает массив координат геометрии.",
          "params": [
            {
              "param": "coordinates",
              "type": "Number[][][]",
              "required": true,
              "description": "Координаты геометрии."
            }
          ]
        },
        {
          "name": "setFillRule",
          "return": "IPolygonGeometryAccess",
          "description": "Задает алгоритм заливки многоугольника.",
          "params": [
            {
              "param": "fillRule",
              "type": "String",
              "required": true,
              "description": "Идентификатор алгоритма заливки."
            }
          ]
        },
        {
          "name": "splice",
          "return": "ILinearRingGeometryAccess[]",
          "description": "Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number.",
          "params": [
            {
              "param": "index",
              "type": "Integer",
              "required": true,
              "description": "Индекс, начиная с которого производится удаление и добавление контуров."
            },
            {
              "param": "number",
              "type": "Integer",
              "required": true,
              "description": "Количество удаляемых контуров."
            }
          ]
        },
        {
          "name": "unfreeze",
          "return": "IFreezable",
          "description": "Переводит объект в активный режим. Унаследован от IFreezable."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий объекта. Унаследовано от IFreezable."
        }
      ]
    }
  },
  {
    "name": "ITrafficControlLayout",
    "url": "ITrafficControlLayout.xml",
    "def": {
      "name": "ITrafficControlLayout",
      "hasCtor": true,
      "inherits": [
        "IExpandableControlLayout"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout."
        },
        {
          "name": "getChildContainerElement",
          "return": "Object",
          "description": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout."
        },
        {
          "name": "getClientBoundingRect",
          "return": "Number[][]",
          "description": "Возвращает размеры и позицию относительно родителя. Унаследован от ILayout."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от ILayout."
        },
        {
          "name": "getParentElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский html-элемент. Унаследован от ILayout."
        },
        {
          "name": "isEmpty",
          "return": "Boolean",
          "description": "Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные макета. Унаследован от ILayout."
        },
        {
          "name": "setParentElement",
          "return": "",
          "description": "Добавляет макет в DOM-дерево. Унаследован от ILayout."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        }
      ]
    }
  },
  {
    "name": "IZoomControlLayout",
    "url": "IZoomControlLayout.xml",
    "def": {
      "name": "IZoomControlLayout",
      "hasCtor": true,
      "inherits": [
        "ILayout"
      ],
      "methods": [
        {
          "name": "destroy",
          "return": "",
          "description": "Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout."
        },
        {
          "name": "getChildContainerElement",
          "return": "Object",
          "description": "Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout."
        },
        {
          "name": "getClientBoundingRect",
          "return": "Number[][]",
          "description": "Возвращает размеры и позицию относительно родителя. Унаследован от ILayout."
        },
        {
          "name": "getData",
          "return": "Object",
          "description": "Возвращает объект данных макета. Унаследован от ILayout."
        },
        {
          "name": "getParentElement",
          "return": "HTMLElement",
          "description": "Возвращает родительский html-элемент. Унаследован от ILayout."
        },
        {
          "name": "isEmpty",
          "return": "Boolean",
          "description": "Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout."
        },
        {
          "name": "setData",
          "return": "",
          "description": "Задает данные макета. Унаследован от ILayout."
        },
        {
          "name": "setParentElement",
          "return": "",
          "description": "Добавляет макет в DOM-дерево. Унаследован от ILayout."
        }
      ],
      "props": [
        {
          "name": "events",
          "type": "IEventManager",
          "description": "Менеджер событий. Унаследовано от IDomEventEmitter."
        }
      ]
    }
  }
]