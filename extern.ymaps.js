
/**
 * @fileoverview Autogenerated extern for Yandex maps v2.0.
 * @externs
 */
var ymaps = {};

/**
 * @param {ymaps.Map=} map Ссылка на объект карты.
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 */
ymaps.Balloon = function(map, data, options) {};


/**
 * Автоматически cмещает центр карты таким образом, чтобы балун оказался в видимой области.
 * @return {ymaps.Balloon}
 */
ymaps.Balloon.prototype.autoPan = function() {};


/**
 * Закрывает балун.
 * @return {ymaps.Balloon}
 */
ymaps.Balloon.prototype.close = function() {};


/**
 * Возвращает данные балуна.
 * @return {Object}
 */
ymaps.Balloon.prototype.getData = function() {};


/**
 * Возвращает ссылку на оверлей балуна.
 * @return {ymaps.overlay.html.Balloon}
 */
ymaps.Balloon.prototype.getOverlay = function() {};


/**
 * Возвращает координаты балуна.
 * @return {Array.<Number>}
 */
ymaps.Balloon.prototype.getPosition = function() {};


/**
 * Возвращает состояние балуна: открыт/закрыт.
 * @return {Boolean}
 */
ymaps.Balloon.prototype.isOpen = function() {};


/**
 * Открывает балун на карте в точке с заданными координатами. Если балун уже открыт, перемещает его в указанную точку.
 * @param {Array.<Number>=} position Координаты балуна.
 * @return {ymaps.Balloon}
 */
ymaps.Balloon.prototype.open = function(position) {};


/**
 * Устанавливает данные балуна.
 * @param {Object=} data Данные.
 * @return {ymaps.Balloon}
 */
ymaps.Balloon.prototype.setData = function(data) {};


/**
 * Устанавливает новую позицию балуна.
 * @param {Array.<Number>=} position Новые координаты.
 * @return {ymaps.Balloon}
 */
ymaps.Balloon.prototype.setPosition = function(position) {};

/**
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IBehavior}
 */
ymaps.behavior.DblClickZoom = function(options) {};


/**
 * Выключает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.DblClickZoom.prototype.disable = function() {};


/**
 * Включает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.DblClickZoom.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.behavior.DblClickZoom.prototype.getParent = function() {};


/**
 * Проверяет, включено ли поведение. Унаследован от IBehavior.
 * @return {Boolean}
 */
ymaps.behavior.DblClickZoom.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.behavior.DblClickZoom.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.behavior.DblClickZoom.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.behavior.DblClickZoom.prototype.options;

/**
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IBehavior}
 */
ymaps.behavior.Drag = function(options) {};


/**
 * Выключает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.Drag.prototype.disable = function() {};


/**
 * Включает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.Drag.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.behavior.Drag.prototype.getParent = function() {};


/**
 * Проверяет, включено ли поведение. Унаследован от IBehavior.
 * @return {Boolean}
 */
ymaps.behavior.Drag.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.behavior.Drag.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.behavior.Drag.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.behavior.Drag.prototype.options;

/**
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IBehavior}
 */
ymaps.behavior.LeftMouseButtonMagnifier = function(options) {};


/**
 * Выключает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.LeftMouseButtonMagnifier.prototype.disable = function() {};


/**
 * Включает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.LeftMouseButtonMagnifier.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.behavior.LeftMouseButtonMagnifier.prototype.getParent = function() {};


/**
 * Проверяет, включено ли поведение. Унаследован от IBehavior.
 * @return {Boolean}
 */
ymaps.behavior.LeftMouseButtonMagnifier.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.behavior.LeftMouseButtonMagnifier.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.behavior.LeftMouseButtonMagnifier.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.behavior.LeftMouseButtonMagnifier.prototype.options;

/**
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IBehavior}
 */
ymaps.behavior.MultiTouch = function(options) {};


/**
 * Выключает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.MultiTouch.prototype.disable = function() {};


/**
 * Включает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.MultiTouch.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.behavior.MultiTouch.prototype.getParent = function() {};


/**
 * Проверяет, включено ли поведение. Унаследован от IBehavior.
 * @return {Boolean}
 */
ymaps.behavior.MultiTouch.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.behavior.MultiTouch.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.behavior.MultiTouch.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.behavior.MultiTouch.prototype.options;

/**
 * @constructor
 * @implements {ymaps.IBehavior}
 */
ymaps.behavior.RouteEditor = function() {};


/**
 * Выключает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.RouteEditor.prototype.disable = function() {};


/**
 * Включает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.RouteEditor.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.behavior.RouteEditor.prototype.getParent = function() {};


/**
 * Проверяет, включено ли поведение. Унаследован от IBehavior.
 * @return {Boolean}
 */
ymaps.behavior.RouteEditor.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.behavior.RouteEditor.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.behavior.RouteEditor.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.behavior.RouteEditor.prototype.options;

/**
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IBehavior}
 */
ymaps.behavior.RightMouseButtonMagnifier = function(options) {};


/**
 * Выключает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.RightMouseButtonMagnifier.prototype.disable = function() {};


/**
 * Включает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.RightMouseButtonMagnifier.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.behavior.RightMouseButtonMagnifier.prototype.getParent = function() {};


/**
 * Проверяет, включено ли поведение. Унаследован от IBehavior.
 * @return {Boolean}
 */
ymaps.behavior.RightMouseButtonMagnifier.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.behavior.RightMouseButtonMagnifier.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.behavior.RightMouseButtonMagnifier.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.behavior.RightMouseButtonMagnifier.prototype.options;

/**
 * @constructor
 * @implements {ymaps.IBehavior}
 */
ymaps.behavior.Ruler = function() {};


/**
 * Удаляет все точки линейки. Если текущее количество точек больше двух, то будет выведен запрос на подтверждение действия.
 */
ymaps.behavior.Ruler.prototype.close = function() {};


/**
 * Выключает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.Ruler.prototype.disable = function() {};


/**
 * Включает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.Ruler.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.behavior.Ruler.prototype.getParent = function() {};


/**
 * Состояние линейки описывается строкой, состоящей из последовательностей, разделяемых символом "~". Каждая последовательность представляет собой подстроку вида "долгота,широта" и описывает приращение координат относительно предыдущей точки линейки.
 * @return {String}
 */
ymaps.behavior.Ruler.prototype.getState = function() {};


/**
 * Проверяет, включено ли поведение. Унаследован от IBehavior.
 * @return {Boolean}
 */
ymaps.behavior.Ruler.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.behavior.Ruler.prototype.setParent = function() {};


/**
 * Восстанавливает состояние линейки из закодированной строки. Смотрите behavior.Ruler.getState.
 * @param {String=} state Закодированное состояние линейки.
 */
ymaps.behavior.Ruler.prototype.setState = function(state) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.behavior.Ruler.prototype.events;


/**
 * Геометрия поведения "Линейка".
 * @type {ymaps.geometry.LineString}
 */
ymaps.behavior.Ruler.prototype.geometry;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.behavior.Ruler.prototype.options;

/**
 */
ymaps.behavior.storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.behavior.storage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.behavior.storage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.behavior.storage.prototype.remove = function() {};

/**
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IBehavior}
 */
ymaps.behavior.ScrollZoom = function(options) {};


/**
 * Выключает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.ScrollZoom.prototype.disable = function() {};


/**
 * Включает поведение. Унаследован от IBehavior.
 */
ymaps.behavior.ScrollZoom.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.behavior.ScrollZoom.prototype.getParent = function() {};


/**
 * Проверяет, включено ли поведение. Унаследован от IBehavior.
 * @return {Boolean}
 */
ymaps.behavior.ScrollZoom.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.behavior.ScrollZoom.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.behavior.ScrollZoom.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.behavior.ScrollZoom.prototype.options;

/**
 * @param {ymaps.IGeoObject=} cluster Объект-кластер.
 * @constructor
 */
ymaps.cluster.Balloon = function(cluster) {};


/**
 * Закрывает балун.
 */
ymaps.cluster.Balloon.prototype.close = function() {};


/**
 * Проверяет, открыт ли балун в данный момент.
 * @return {Boolean}
 */
ymaps.cluster.Balloon.prototype.isOpen = function() {};


/**
 * Открывает балун.
 * @param {Array.<Number>=} anchorPixels Точка привязки балуна в глобальных пиксельных координатах. По умолчанию используются текущие координаты центра карты.
 * @return {ymaps.Balloon}
 */
ymaps.cluster.Balloon.prototype.open = function(anchorPixels) {};


/**
 * Менеджер событий балуна геообъекта.
 * @type {ymaps.event.Manager}
 */
ymaps.cluster.Balloon.prototype.events;

/**
 * @param {ymaps.IPointGeometry=} geometry Геометрия кластера.
 * @param {ymaps.IDataManager=} properties Данные кластера.
 * @param {Object=} options Опции кластера. Опции балуна кластера указываются с префиксом 'balloon'.
 * @constructor
 * @implements {ymaps.IGeoObject}
 */
ymaps.Cluster = function(geometry, properties, options) {};


/**
 * Возвращает массив геообъектов, образующих кластер.
 * @return {Array.<ymaps.IGeoObject>}
 */
ymaps.Cluster.prototype.getGeoObjects = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.Cluster.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.Cluster.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.Cluster.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.Cluster.prototype.setParent = function() {};


/**
 * Балун кластера.
 * @type {ymaps.cluster.Balloon}
 */
ymaps.Cluster.prototype.balloon;


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.Cluster.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.Cluster.prototype.geometry;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.Cluster.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Cluster.prototype.properties;


/**
 * Состояние кластера. Определяется следующими полями: activeObject - Cсылка на активный объект кластера.
 * @type {ymaps.data.Manager}
 */
ymaps.Cluster.prototype.state;

/**
 * @param {ymaps.ICircleGeometry|Array.<Array.<Number>>|Object=} geometry Ссылка на объект геометрии точки или массив, первый элемент которого координаты центра круга, второй - радиус в метрах, или объект с параметрами геометрии.
 * @param {Object|ymaps.IDataManager=} properties Данные геообъекта. Соответствуют данным класса GeoObject.
 * @param {Object=} options Опции геообъекта. Соответствуют опциям класса GeoObject.
 * @constructor
 * @extends {ymaps.GeoObject}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 */
ymaps.Circle = function(geometry, properties, options) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.Circle.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.Circle.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.Circle.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.Circle.prototype.setParent = function() {};


/**
 * Балун геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Balloon}
 */
ymaps.Circle.prototype.balloon;


/**
 * Редактор геометрии геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.IGeometryEditor}
 */
ymaps.Circle.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.Circle.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.Circle.prototype.geometry;


/**
 * Хинт геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Hint}
 */
ymaps.Circle.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.Circle.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Circle.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Circle.prototype.state;

/**
 * @param {Object|String=} params Параметры кнопки или строка - содержимое кнопки в виде HTML.
 * @param {Object=} options Опции кнопки.
 * @constructor
 * @implements {ymaps.ISelectableControl}
 */
ymaps.control.Button = function(params, options) {};


/**
 * Отменяет выбор элемента управления (выключает). Унаследован от ISelectableControl.
 */
ymaps.control.Button.prototype.deselect = function() {};


/**
 * Делает элемент управления недоступным (запрещены пользовательские действия). Унаследован от ISelectableControl.
 */
ymaps.control.Button.prototype.disable = function() {};


/**
 * Делает элемент управления доступным (разрешены пользовательские действия). Унаследован от ISelectableControl.
 */
ymaps.control.Button.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.Button.prototype.getParent = function() {};


/**
 * Возвращает true - элемент управления доступен, false - недоступен. Унаследован от ISelectableControl.
 * @return {Boolean}
 */
ymaps.control.Button.prototype.isEnabled = function() {};


/**
 * Возвращает true - элемент управления выбран, false - не выбран. Унаследован от ISelectableControl.
 * @return {Boolean}
 */
ymaps.control.Button.prototype.isSelected = function() {};


/**
 * Выбирает (включает) элемент управления. Унаследован от ISelectableControl.
 */
ymaps.control.Button.prototype.select = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.Button.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.Button.prototype.events;


/**
 * Состояние кнопки. Имена полей, доступных через метод data.Manager.get: selected - признак, нажата ли кнопка; enabled - признак, активна ли кнопка.
 * @type {ymaps.data.Manager}
 */
ymaps.control.Button.prototype.state;

/**
 * @param {Object=} options Опции. Опции для дочерних объектов-кластеров задаются с префиксом cluster.
 * @constructor
 * @implements {ymaps.ICollection}
 */
ymaps.Clusterer = function(options) {};


/**
 * Добавляет геообъект или массив геообъектов в кластеризатор.
 * @param {ymaps.IGeoObject|Array.<ymaps.IGeoObject>=} objects Массив геообъектов или единичный геообъект.
 * @return {ymaps.Clusterer}
 */
ymaps.Clusterer.prototype.add = function(objects) {};


/**
 * Функция для создания кластера кластеризатором. Вызывается кластеризатором непосредственно в процессе кластеризации. Принимает на вход центр кластера и массив геообъектов, попадающих в данный кластер. Возвращает кластер, который потом будет добавлен на карту. Если требуется, чтобы кластеризатор создавал пользовательские объекты-кластеры, следует переопределить этот метод у кластеризатора.
 * @param {Array.<Number>=} center Центр кластера в геокоординатах.
 * @param {Array.<ymaps.IGeoObject>=} geoObjects Массив плейсмарков в кластере.
 * @return {ymaps.IGeoObject}
 */
ymaps.Clusterer.prototype.createCluster = function(center, geoObjects) {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.Clusterer.prototype.getIterator = function() {};


/**
 * Функция для получения информации о текущем состоянии объекта, добавленного в кластеризатор.
 * @param {ymaps.IGeoObject=} object Гео-объект, для которого нужно получить состояние.
 * @return {Object}
 */
ymaps.Clusterer.prototype.getObjectState = function(object) {};


/**
 * Функция, которая заново генерирует кластеры из геообъектов и отображает их на карте.
 * @return {ymaps.Clusterer}
 */
ymaps.Clusterer.prototype.refresh = function() {};


/**
 * Удаляет геообъекты из кластеризатора.
 * @param {ymaps.IGeoObject|Array.<ymaps.IGeoObject>=} objects Массив геообъектов.
 * @return {ymaps.Clusterer}
 */
ymaps.Clusterer.prototype.remove = function(objects) {};


/**
 * Удаляет все геообъекты из кластеризатора.
 * @return {ymaps.Clusterer}
 */
ymaps.Clusterer.prototype.removeAll = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.Clusterer.prototype.events;


/**
 * Менеджер опций кластера.
 * @type {ymaps.option.Manager}
 */
ymaps.Clusterer.prototype.options;

/**
 * @param {Object|Array.<ymaps.IControl>=} params Настройки группы элементов управления. Если в качестве настроек передан массив элементов управления, он трактуется как список дочерних элементов.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IControl}
 * @implements {ymaps.IControlParent}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IMapObjectCollection}
 */
ymaps.control.Group = function(params, options) {};


/**
 * Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: "mapTools" - стандартный тулбар с кнопками "Навигация", "Выделение" и "Линейка" control.MapTools; "miniMap" - обзорная карта control.MiniMap; "scaleLine" - масштабный отрезок control.ScaleLine; "searchControl" - панель поиска control.SearchControl; "trafficControl" - панель пробок control.TrafficControl; "typeSelector" - панель переключения типа карты control.TypeSelector; "zoomControl" - ползунок масштаба control.ZoomControl; "smallZoomControl" - простой ползунок масштаба control.SmallZoomControl.
 * @param {ymaps.IControl|String=} item Элемент управления или его ключ.
 * @param {number=} positionIndex Позиция вставки элемента. Если не задана, элемент добавляется в конец списка.
 * @return {ymaps.control.Group}
 */
ymaps.control.Group.prototype.add = function(item, positionIndex) {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст выполнения функции.
 * @return {ymaps.control.Group}
 */
ymaps.control.Group.prototype.each = function(callback, context) {};


/**
 * Функция для выборки дочерних элементов по условию.
 * @param {Function=} callback Функция-обработчик дочерних элементов контрола. Получает на вход ссылку на элемент контрола и возвращает значение true/false. Дочерние элементы, для которых функция-обработчик возвращает true, будут добавлены в результирующий массив.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.Group.prototype.filter = function(callback) {};


/**
 * Возвращает ссылку на объект контрола, добавленного по ключу или по индексу.
 * @param {String|Number=} key 
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.Group.prototype.get = function(key) {};


/**
 * Возвращает массив дочерних элементов контрола.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.Group.prototype.getAll = function() {};


/**
 * Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent.
 * @return {HTMLElement}
 */
ymaps.control.Group.prototype.getChildElement = function() {};


/**
 * Возвращает контейнер, в который добавляются дочерние элементы контрола.
 * @return {HTMLElement}
 */
ymaps.control.Group.prototype.getContainer = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.control.Group.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.control.Group.prototype.getMap = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.Group.prototype.getParent = function() {};


/**
 * Возвращает индекс дочернего элемента в группе.
 * @param {String|ymaps.IControl=} childToFind Дочерний элемент или его ключ.
 * @return {number}
 */
ymaps.control.Group.prototype.indexOf = function(childToFind) {};


/**
 * Возвращает количество дочерних элементов.
 * @return {Number}
 */
ymaps.control.Group.prototype.length = function() {};


/**
 * Удаляет элемент управления из группы.
 * @param {ymaps.IControl|String=} item Элемент управления или его ключ.
 * @return {ymaps.control.Group}
 */
ymaps.control.Group.prototype.remove = function(item) {};


/**
 * Удаляет все дочерние элементы из группы.
 * @return {ymaps.control.Group}
 */
ymaps.control.Group.prototype.removeAll = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.Group.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.Group.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.control.Group.prototype.options;

/**
 * @param {Object|String=} params Параметры элемента либо строка - контент элемента.
 * @param {Object=} options Опции элемента управления.
 * @constructor
 * @implements {ymaps.IControl}
 */
ymaps.control.ListBoxItem = function(params, options) {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.ListBoxItem.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ListBoxItem.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.ListBoxItem.prototype.events;

/**
 * @param {Object=} params Параметры элемента управления.
 * @param {Object=} options Опции элемента управления.
 * @constructor
 * @extends {ymaps.control.Group}
 */
ymaps.control.ListBox = function(params, options) {};


/**
 * Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: "mapTools" - стандартный тулбар с кнопками "Навигация", "Выделение" и "Линейка" control.MapTools; "miniMap" - обзорная карта control.MiniMap; "scaleLine" - масштабный отрезок control.ScaleLine; "searchControl" - панель поиска control.SearchControl; "trafficControl" - панель пробок control.TrafficControl; "typeSelector" - панель переключения типа карты control.TypeSelector; "zoomControl" - ползунок масштаба control.ZoomControl; "smallZoomControl" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.ListBox.prototype.add = function() {};


/**
 * Сворачивает список.
 */
ymaps.control.ListBox.prototype.collapse = function() {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.ListBox.prototype.each = function() {};


/**
 * Раскрывает список.
 */
ymaps.control.ListBox.prototype.expand = function() {};


/**
 * Функция для выборки дочерних элементов по условию. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.ListBox.prototype.filter = function() {};


/**
 * Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ListBox.prototype.get = function() {};


/**
 * Возвращает массив дочерних элементов контрола. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.ListBox.prototype.getAll = function() {};


/**
 * Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent.
 * @return {HTMLElement}
 */
ymaps.control.ListBox.prototype.getChildElement = function() {};


/**
 * Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group.
 * @return {HTMLElement}
 */
ymaps.control.ListBox.prototype.getContainer = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.control.ListBox.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.control.ListBox.prototype.getMap = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.ListBox.prototype.getParent = function() {};


/**
 * Возвращает индекс дочернего элемента в группе. Унаследован от control.Group.
 * @return {number}
 */
ymaps.control.ListBox.prototype.indexOf = function() {};


/**
 * Возвращает признак того, находится ли контрол в развернутом состоянии.
 * @return {Boolean}
 */
ymaps.control.ListBox.prototype.isExpanded = function() {};


/**
 * Возвращает количество дочерних элементов. Унаследован от control.Group.
 * @return {Number}
 */
ymaps.control.ListBox.prototype.length = function() {};


/**
 * Удаляет элемент управления из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.ListBox.prototype.remove = function() {};


/**
 * Удаляет все дочерние элементы из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.ListBox.prototype.removeAll = function() {};


/**
 * Устанавливает ширину списка.
 * @param {Number=} width Ширина списка.
 */
ymaps.control.ListBox.prototype.setMinWidth = function(width) {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ListBox.prototype.setParent = function() {};


/**
 * Задает новый заголовок раскрывающегося списка.
 * @param {String=} html Заголовок.
 */
ymaps.control.ListBox.prototype.setTitle = function(html) {};


/**
 * Данные выпадающего списка. Имена полей, доступных через метод data.Manager.get: title - заголовок выпадающего списка.
 * @type {ymaps.data.Manager}
 */
ymaps.control.ListBox.prototype.data;


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.ListBox.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.control.ListBox.prototype.options;


/**
 * Состояние выпадающего списка. Имена полей, доступных через метод data.Manager.get: expanded - признак, раскрыт ли список.
 * @type {ymaps.data.Manager}
 */
ymaps.control.ListBox.prototype.state;

/**
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IControl}
 */
ymaps.control.ListBoxSeparator = function(data, options) {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.ListBoxSeparator.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ListBoxSeparator.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.ListBoxSeparator.prototype.events;

/**
 * @param {Object|Array.<ymaps.IControl>|Array.<String>=} params Параметры тулбара или список кнопок, которые будут добавлены по умолчанию.
 * @param {Object=} options Опции элемента управления.
 * @constructor
 * @extends {ymaps.control.ToolBar}
 */
ymaps.control.MapTools = function(params, options) {};


/**
 * Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: "mapTools" - стандартный тулбар с кнопками "Навигация", "Выделение" и "Линейка" control.MapTools; "miniMap" - обзорная карта control.MiniMap; "scaleLine" - масштабный отрезок control.ScaleLine; "searchControl" - панель поиска control.SearchControl; "trafficControl" - панель пробок control.TrafficControl; "typeSelector" - панель переключения типа карты control.TypeSelector; "zoomControl" - ползунок масштаба control.ZoomControl; "smallZoomControl" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.MapTools.prototype.add = function() {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.MapTools.prototype.each = function() {};


/**
 * Функция для выборки дочерних элементов по условию. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.MapTools.prototype.filter = function() {};


/**
 * Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.MapTools.prototype.get = function() {};


/**
 * Возвращает массив дочерних элементов контрола. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.MapTools.prototype.getAll = function() {};


/**
 * Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent.
 * @return {HTMLElement}
 */
ymaps.control.MapTools.prototype.getChildElement = function() {};


/**
 * Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group.
 * @return {HTMLElement}
 */
ymaps.control.MapTools.prototype.getContainer = function() {};


/**
 * Возвращает ссылку на группу стандартных элементов управления картой.
 * @return {ymaps.control.RadioGroup}
 */
ymaps.control.MapTools.prototype.getDefaultGroup = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.control.MapTools.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.control.MapTools.prototype.getMap = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.MapTools.prototype.getParent = function() {};


/**
 * Возвращает индекс дочернего элемента в группе. Унаследован от control.Group.
 * @return {number}
 */
ymaps.control.MapTools.prototype.indexOf = function() {};


/**
 * Возвращает количество дочерних элементов. Унаследован от control.Group.
 * @return {Number}
 */
ymaps.control.MapTools.prototype.length = function() {};


/**
 * Удаляет элемент управления из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.MapTools.prototype.remove = function() {};


/**
 * Удаляет все дочерние элементы из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.MapTools.prototype.removeAll = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.MapTools.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.MapTools.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.control.MapTools.prototype.options;


/**
 * Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: contentWidth - общая ширина дочерних элементов. Унаследовано от control.ToolBar.
 * @type {ymaps.data.Manager}
 */
ymaps.control.MapTools.prototype.state;

/**
 * @param {Object=} state Состояние обзорной карты.
 * @param {Object=} options Опции обзорной карты.
 * @constructor
 * @implements {ymaps.IChildOnMap}
 */
ymaps.control.MiniMap = function(state, options) {};


/**
 * Сворачивает обзорную карту.
 * @return {ymaps.control.MiniMap}
 */
ymaps.control.MiniMap.prototype.collapse = function() {};


/**
 * Разворачивает обзорную карту.
 * @return {ymaps.control.MiniMap}
 */
ymaps.control.MiniMap.prototype.expand = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.control.MiniMap.prototype.getParent = function() {};


/**
 * Возвращает текущий тип карты.
 * @return {String|ymaps.MapType}
 */
ymaps.control.MiniMap.prototype.getType = function() {};


/**
 * Возвращает true - обзорная карта развернута, false - свёрнута.
 * @return {Boolean}
 */
ymaps.control.MiniMap.prototype.isExpanded = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.MiniMap.prototype.setParent = function() {};


/**
 * Задаёт новый тип карты.
 * @param {String|ymaps.MapType=} newType Новый тип карты.
 */
ymaps.control.MiniMap.prototype.setType = function(newType) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.MiniMap.prototype.events;


/**
 * Состояние мини-карты. Имена полей, доступных через метод data.Manager.get: type - тип мини-карты; expanded - признак, развернута ли панель.
 * @type {ymaps.data.Manager}
 */
ymaps.control.MiniMap.prototype.state;

/**
 * @param {Object|Array.<ymaps.ISelectableControl>=} params Настройки группы элементов управления. Если в качестве настроек передан массив элементов управления, он трактуется как список дочерних элементов.
 * @param {Object=} options Опции.
 * @constructor
 * @extends {ymaps.control.Group}
 */
ymaps.control.RadioGroup = function(params, options) {};


/**
 * Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: "mapTools" - стандартный тулбар с кнопками "Навигация", "Выделение" и "Линейка" control.MapTools; "miniMap" - обзорная карта control.MiniMap; "scaleLine" - масштабный отрезок control.ScaleLine; "searchControl" - панель поиска control.SearchControl; "trafficControl" - панель пробок control.TrafficControl; "typeSelector" - панель переключения типа карты control.TypeSelector; "zoomControl" - ползунок масштаба control.ZoomControl; "smallZoomControl" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.RadioGroup.prototype.add = function() {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.RadioGroup.prototype.each = function() {};


/**
 * Функция для выборки дочерних элементов по условию. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.RadioGroup.prototype.filter = function() {};


/**
 * Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.RadioGroup.prototype.get = function() {};


/**
 * Возвращает массив дочерних элементов контрола. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.RadioGroup.prototype.getAll = function() {};


/**
 * Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent.
 * @return {HTMLElement}
 */
ymaps.control.RadioGroup.prototype.getChildElement = function() {};


/**
 * Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group.
 * @return {HTMLElement}
 */
ymaps.control.RadioGroup.prototype.getContainer = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.control.RadioGroup.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.control.RadioGroup.prototype.getMap = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.RadioGroup.prototype.getParent = function() {};


/**
 * Возвращает индекс выбранного элемента либо -1, если ни один элемент не выбран.
 * @return {Number}
 */
ymaps.control.RadioGroup.prototype.getSelectedIndex = function() {};


/**
 * Возвращает индекс дочернего элемента в группе. Унаследован от control.Group.
 * @return {number}
 */
ymaps.control.RadioGroup.prototype.indexOf = function() {};


/**
 * Возвращает количество дочерних элементов. Унаследован от control.Group.
 * @return {Number}
 */
ymaps.control.RadioGroup.prototype.length = function() {};


/**
 * Удаляет элемент управления из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.RadioGroup.prototype.remove = function() {};


/**
 * Удаляет все дочерние элементы из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.RadioGroup.prototype.removeAll = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.RadioGroup.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.RadioGroup.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.control.RadioGroup.prototype.options;

/**
 * @param {Object|Array.<ymaps.IControl>=} params Параметры группы или массив кнопок.
 * @param {Object=} options Опции элемента управления.
 * @constructor
 * @extends {ymaps.control.RadioGroup}
 */
ymaps.control.RollupButton = function(params, options) {};


/**
 * Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: "mapTools" - стандартный тулбар с кнопками "Навигация", "Выделение" и "Линейка" control.MapTools; "miniMap" - обзорная карта control.MiniMap; "scaleLine" - масштабный отрезок control.ScaleLine; "searchControl" - панель поиска control.SearchControl; "trafficControl" - панель пробок control.TrafficControl; "typeSelector" - панель переключения типа карты control.TypeSelector; "zoomControl" - ползунок масштаба control.ZoomControl; "smallZoomControl" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.RollupButton.prototype.add = function() {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.RollupButton.prototype.each = function() {};


/**
 * Функция для выборки дочерних элементов по условию. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.RollupButton.prototype.filter = function() {};


/**
 * Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.RollupButton.prototype.get = function() {};


/**
 * Возвращает массив дочерних элементов контрола. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.RollupButton.prototype.getAll = function() {};


/**
 * Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent.
 * @return {HTMLElement}
 */
ymaps.control.RollupButton.prototype.getChildElement = function() {};


/**
 * Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group.
 * @return {HTMLElement}
 */
ymaps.control.RollupButton.prototype.getContainer = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.control.RollupButton.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.control.RollupButton.prototype.getMap = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.RollupButton.prototype.getParent = function() {};


/**
 * Возвращает индекс выбранного элемента либо -1, если ни один элемент не выбран. Унаследован от control.RadioGroup.
 * @return {Number}
 */
ymaps.control.RollupButton.prototype.getSelectedIndex = function() {};


/**
 * Возвращает индекс дочернего элемента в группе. Унаследован от control.Group.
 * @return {number}
 */
ymaps.control.RollupButton.prototype.indexOf = function() {};


/**
 * Возвращает количество дочерних элементов. Унаследован от control.Group.
 * @return {Number}
 */
ymaps.control.RollupButton.prototype.length = function() {};


/**
 * Удаляет элемент управления из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.RollupButton.prototype.remove = function() {};


/**
 * Удаляет все дочерние элементы из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.RollupButton.prototype.removeAll = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.RollupButton.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.RollupButton.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.control.RollupButton.prototype.options;


/**
 * Состояние вертикальной группы. Имена полей, доступных через метод data.Manager.get: activeElement - ссылка на выбранный элемент списка; expanded - признак, раскрыт ли список.
 * @type {ymaps.data.Manager}
 */
ymaps.control.RollupButton.prototype.state;

/**
 * @param {Object=} params Параметры кнопки.
 * @param {Object=} options Опции элемента управления.
 * @constructor
 */
ymaps.control.RouteEditor = function(params, options) {};


/**
 * Возвращает маршрут.
 * @return {ymaps.router.Route}
 */
ymaps.control.RouteEditor.prototype.getRoute = function() {};

/**
 * @param {Object=} options Опции масштабной линейки.
 * @constructor
 * @implements {ymaps.IControl}
 */
ymaps.control.ScaleLine = function(options) {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.ScaleLine.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ScaleLine.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.ScaleLine.prototype.events;

/**
 */
ymaps.control.storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.control.storage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.control.storage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.control.storage.prototype.remove = function() {};

/**
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IControl}
 */
ymaps.control.SearchControl = function(options) {};


/**
 * Закрывает панель с результатами поиска.
 * @return {ymaps.control.SearchControl}
 */
ymaps.control.SearchControl.prototype.close = function() {};


/**
 * Сворачивает панель с результатами поиска.
 * @return {ymaps.control.SearchControl}
 */
ymaps.control.SearchControl.prototype.collapse = function() {};


/**
 * Разворачивает панель с результатами поиска.
 * @return {ymaps.control.SearchControl}
 */
ymaps.control.SearchControl.prototype.expand = function() {};


/**
 * Возвращает индекс текущий страницы с результатами запроса. Индексы начинаются с 0.
 * @return {number}
 */
ymaps.control.SearchControl.prototype.getCurrentPage = function() {};


/**
 * Возвращает количество страниц результатов текущего поискового запроса.
 * @return {number}
 */
ymaps.control.SearchControl.prototype.getPageCount = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.SearchControl.prototype.getParent = function() {};


/**
 * Возвращает строку, содержащую текущий поисковый запрос.
 * @return {String}
 */
ymaps.control.SearchControl.prototype.getRequestString = function() {};


/**
 * Предоставляет доступ к результату по заданному индексу. Это асинхронный метод. Если результат с заданным индексом еще не загружен, то он загрузится.
 * @param {number=} index Индекс результата, начинается с 0.
 * @return {ymaps.util.Promise}
 */
ymaps.control.SearchControl.prototype.getResult = function(index) {};


/**
 * Возвращает количество результатов текущего поискового запроса.
 * @return {number}
 */
ymaps.control.SearchControl.prototype.getResultCount = function() {};


/**
 * Возвращает индекс текущего выбранного элемента.
 * @return {number}
 */
ymaps.control.SearchControl.prototype.getSelectedIndex = function() {};


/**
 * Возвращает строку, содержащую исправленный поисковый запрос, если была допущена опечатка.
 * @return {String}
 */
ymaps.control.SearchControl.prototype.getSuggestString = function() {};


/**
 * Возвращает true, если панель с результатами поиска развернута, false - в противном случае.
 * @return {Boolean}
 */
ymaps.control.SearchControl.prototype.isExpanded = function() {};


/**
 * Возвращает true, если панель с результатами поиска открыта, false - в противном случае.
 * @return {Boolean}
 */
ymaps.control.SearchControl.prototype.isOpen = function() {};


/**
 * Открывает панель с результатами поиска.
 * @return {ymaps.control.SearchControl}
 */
ymaps.control.SearchControl.prototype.open = function() {};


/**
 * Осуществляет поиск.
 * @param {String=} request Запрос.
 * @return {ymaps.util.Promise}
 */
ymaps.control.SearchControl.prototype.search = function(request) {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.SearchControl.prototype.setParent = function() {};


/**
 * Показывает страницу с результатами запроса по заданному индексу. Индексы страниц начинаются с 0.
 * @param {number=} page Индекс страницы, которую нужно показать.
 * @return {ymaps.util.Promise}
 */
ymaps.control.SearchControl.prototype.showPage = function(page) {};


/**
 * Отображает результат с заданным индексом.
 * @param {number=} index Индекс результата, начинается с 0.
 * @return {ymaps.util.Promise}
 */
ymaps.control.SearchControl.prototype.showResult = function(index) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.SearchControl.prototype.events;


/**
 * Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: results - массив, содержащий результаты поиска; currentIndex - индекс текущего выбранного элемента; pageNumber - текущая страница выдачи результатов; found - общее количество найденных результатов; request - текущий активный запрос; suggest - исправленный запрос; expanded - признак, свернут или развернут элемент управления; opened - признак, показана ли панель выдачи результата.
 * @type {ymaps.data.Manager}
 */
ymaps.control.SearchControl.prototype.state;

/**
 * @param {Object=} options Опции элемента управления.
 * @constructor
 * @implements {ymaps.IControl}
 */
ymaps.control.SmallZoomControl = function(options) {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.SmallZoomControl.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.SmallZoomControl.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.SmallZoomControl.prototype.events;


/**
 * Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: zoom - текущий коэффициент масштабирования; zoomRange - текущий диапазон коэффициентов масштабирования.
 * @type {ymaps.data.Manager}
 */
ymaps.control.SmallZoomControl.prototype.state;

/**
 * @param {Object|Array.<ymaps.IControl>=} params Настройки группы элементов управления. Если в качестве настроек передан массив элементов управления, он трактуется как список дочерних элементов.
 * @param {Object=} options опции.
 * @constructor
 * @extends {ymaps.control.Group}
 */
ymaps.control.ToolBar = function(params, options) {};


/**
 * Добавляет элемент управления в группу. Элемент можно добавлять, передав экземпляр класса, реализующего интерфейс IControl, или по ключу. Возожные значения ключей: "mapTools" - стандартный тулбар с кнопками "Навигация", "Выделение" и "Линейка" control.MapTools; "miniMap" - обзорная карта control.MiniMap; "scaleLine" - масштабный отрезок control.ScaleLine; "searchControl" - панель поиска control.SearchControl; "trafficControl" - панель пробок control.TrafficControl; "typeSelector" - панель переключения типа карты control.TypeSelector; "zoomControl" - ползунок масштаба control.ZoomControl; "smallZoomControl" - простой ползунок масштаба control.SmallZoomControl. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.ToolBar.prototype.add = function() {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.ToolBar.prototype.each = function() {};


/**
 * Функция для выборки дочерних элементов по условию. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.ToolBar.prototype.filter = function() {};


/**
 * Возвращает ссылку на объект контрола, добавленного по ключу или по индексу. Унаследован от control.Group.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ToolBar.prototype.get = function() {};


/**
 * Возвращает массив дочерних элементов контрола. Унаследован от control.Group.
 * @return {Array.<ymaps.IChildOnMap>}
 */
ymaps.control.ToolBar.prototype.getAll = function() {};


/**
 * Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться. Унаследован от IControlParent.
 * @return {HTMLElement}
 */
ymaps.control.ToolBar.prototype.getChildElement = function() {};


/**
 * Возвращает контейнер, в который добавляются дочерние элементы контрола. Унаследован от control.Group.
 * @return {HTMLElement}
 */
ymaps.control.ToolBar.prototype.getContainer = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.control.ToolBar.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.control.ToolBar.prototype.getMap = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.ToolBar.prototype.getParent = function() {};


/**
 * Возвращает индекс дочернего элемента в группе. Унаследован от control.Group.
 * @return {number}
 */
ymaps.control.ToolBar.prototype.indexOf = function() {};


/**
 * Возвращает количество дочерних элементов. Унаследован от control.Group.
 * @return {Number}
 */
ymaps.control.ToolBar.prototype.length = function() {};


/**
 * Удаляет элемент управления из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.ToolBar.prototype.remove = function() {};


/**
 * Удаляет все дочерние элементы из группы. Унаследован от control.Group.
 * @return {ymaps.control.Group}
 */
ymaps.control.ToolBar.prototype.removeAll = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ToolBar.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.ToolBar.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.control.ToolBar.prototype.options;


/**
 * Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: contentWidth - общая ширина дочерних элементов.
 * @type {ymaps.data.Manager}
 */
ymaps.control.ToolBar.prototype.state;

/**
 * @param {number=} width Ширина разделителя (в пикселах).
 * @constructor
 * @implements {ymaps.IControl}
 */
ymaps.control.ToolBarSeparator = function(width) {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.ToolBarSeparator.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ToolBarSeparator.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.ToolBarSeparator.prototype.events;

/**
 * @param {Object=} state Состояние контрола.
 * @param {Object=} options Опции контрола.
 * @constructor
 * @implements {ymaps.IControl}
 */
ymaps.control.TrafficControl = function(state, options) {};


/**
 * Свернуть панель пробок.
 */
ymaps.control.TrafficControl.prototype.collapse = function() {};


/**
 * Развернуть панель пробок.
 */
ymaps.control.TrafficControl.prototype.expand = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.TrafficControl.prototype.getParent = function() {};


/**
 * Возвращает экземпляр провайдера пробок.
 * @param {String=} key Ключ провайдера информации о пробках. Список доступных ключей: 'traffic#actual' - провайдер пробок "сейчас"; 'traffic#archive' - провайдер пробок "обычно". Если параметр не передан, возвращается текущий провайдер.
 * @return {ymaps.ITrafficProvider}
 */
ymaps.control.TrafficControl.prototype.getProvider = function(key) {};


/**
 * Скрыть провайдер пробок с карты.
 */
ymaps.control.TrafficControl.prototype.hide = function() {};


/**
 * Возвращает признак, развернута ли панель.
 * @return {Boolean}
 */
ymaps.control.TrafficControl.prototype.isExpanded = function() {};


/**
 * Возвращает признак, показан ли провайдер пробок на карте.
 * @return {Boolean}
 */
ymaps.control.TrafficControl.prototype.isShown = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.TrafficControl.prototype.setParent = function() {};


/**
 * Показать провайдер пробок на карте.
 */
ymaps.control.TrafficControl.prototype.show = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.TrafficControl.prototype.events;


/**
 * Состояние панели. Имена полей, доступных через метод data.Manager.get: shown - признак, показан ли на карте провайдер пробок; providerKey - ключ провайдера, который показывает панель. Может принимать значения 'traffic#actual' или 'traffic#archive'; expanded - признак, развернута ли панель.
 * @type {ymaps.data.Manager}
 */
ymaps.control.TrafficControl.prototype.state;

/**
 * @param {Array.<String>|Array.<ymaps.MapType>|Object=} params Объект с описаниями параметров элемента управления. Если передан массив, то он трактуется как массив типов карты.
 * @param {Object=} options Опции элемента управления.
 * @param {Boolean=} fixTitle Флаг, отвечающий за поведение заголовка элемента управления. true - заголовок элемента управления не изменяется при смене типа карты; false - заголовок элемента управления изменяется в соответствии с выбранным типом карты. Если тип карты не выбран, будет отображаться значение, заданное в params.data.title. Значение по умолчанию: false
 * @constructor
 */
ymaps.control.TypeSelector = function(params, options, fixTitle) {};


/**
 * Добавляет тип карты в список.
 * @param {String|ymaps.MapType=} mapType Тип карты.
 * @param {number=} position Позиция в списке (если не указана, новый тип карты добавляется в конец списка).
 * @return {TypeSelector}
 */
ymaps.control.TypeSelector.prototype.addMapType = function(mapType, position) {};


/**
 * Возвращает группу, которая содержит элементы списка, описывающие типы карты.
 * @return {ymaps.control.Group}
 */
ymaps.control.TypeSelector.prototype.getMapTypeItemsGroup = function() {};


/**
 * Удаляет все типы карты из элемента управления.
 * @return {TypeSelector}
 */
ymaps.control.TypeSelector.prototype.removeAllMapTypes = function() {};


/**
 * Удаляет тип карты.
 * @param {String|ymaps.MapType=} mapType 
 * @return {TypeSelector}
 */
ymaps.control.TypeSelector.prototype.removeMapType = function(mapType) {};


/**
 * Данные элемента управления. Имена полей, доступных через метод data.Manager.get: title - заголовок выпадающего списка.
 * @type {ymaps.data.Manager}
 */
ymaps.control.TypeSelector.prototype.data;

/**
 */
ymaps.coordSystem.cartesian = function() {};


/**
 * Возвращает кратчайшее (вдоль геодезической линии) расстояние между двумя заданными точками (в метрах).
 * @return {Number}
 */
ymaps.coordSystem.cartesian.prototype.getDistance = function() {};


/**
 * Решает так называемую первую (прямую) геодезическую задачу: где мы окажемся, если выйдем из указанной точки в указанном направлении и продём, не сворачивая, указанное расстояние.
 * @return {Object}
 */
ymaps.coordSystem.cartesian.prototype.solveDirectProblem = function() {};


/**
 * Решает так называемую вторую (обратную) геодезическую задачу: построить кратчайший маршрут между двумя точками на картографируемой поверхности и определелить расстояние и направление движения.
 * @return {Object}
 */
ymaps.coordSystem.cartesian.prototype.solveInverseProblem = function() {};

/**
 * @param {Object=} options Опции элемента управления.
 * @constructor
 * @extends {ymaps.control.SmallZoomControl}
 */
ymaps.control.ZoomControl = function(options) {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.control.ZoomControl.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.control.ZoomControl.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.control.ZoomControl.prototype.events;


/**
 * Состояние элемента управления. Имена полей, доступных через метод data.Manager.get: zoom - текущий коэффициент масштабирования; zoomRange - текущий диапазон коэффициентов масштабирования; hints - массив описаний подсказок, применяющийся в макете элемента управления.
 * @type {ymaps.data.Manager}
 */
ymaps.control.ZoomControl.prototype.state;

/**
 */
ymaps.coordSystem.geo = function() {};


/**
 * Возвращает кратчайшее (вдоль геодезической линии) расстояние между двумя заданными точками (в метрах).
 * @return {Number}
 */
ymaps.coordSystem.geo.prototype.getDistance = function() {};


/**
 * Решает так называемую первую (прямую) геодезическую задачу: где мы окажемся, если выйдем из указанной точки в указанном направлении и продём, не сворачивая, указанное расстояние.
 * @return {Object}
 */
ymaps.coordSystem.geo.prototype.solveDirectProblem = function() {};


/**
 * Решает так называемую вторую (обратную) геодезическую задачу: построить кратчайший маршрут между двумя точками на картографируемой поверхности и определелить расстояние и направление движения.
 * @return {Object}
 */
ymaps.coordSystem.geo.prototype.solveInverseProblem = function() {};

/**
 * @param {Object=} data Данные.
 * @constructor
 * @implements {ymaps.IDataManager}
 * @implements {ymaps.IFreezable}
 */
ymaps.data.Manager = function(data) {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.data.Manager.prototype.freeze = function() {};


/**
 * Возвращает значение поля данных с заданным именем.
 * @param {String=} path Строка с именем поля данных. Имя может адресовать вложенные поля, т.е. содержать '.'.
 * @param {Object=} defaultValue Значение по умолчанию.
 * @return {Object}
 */
ymaps.data.Manager.prototype.get = function(path, defaultValue) {};


/**
 * Возвращает объект, содержащий все поля данных.
 * @return {Object}
 */
ymaps.data.Manager.prototype.getAll = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.data.Manager.prototype.isFrozen = function() {};


/**
 * Устанавливает значения для указанных полей. Поддерживаются две сигнатуры: один аргумент, представляющий собой объект вида {"имя": "значение"}; два аргумента, первый из которых - имя поля, второй - значение. Имя может адресовать вложенные поля, т.е. содержать '.'.
 * @param {Object|String=} path Строка с именем поля данных, либо объект вида {"имя": "значение"}.
 * @param {Object=} value Значение, если в качестве первого аргумента передается имя поля.
 * @return {ymaps.data.Manager}
 */
ymaps.data.Manager.prototype.set = function(path, value) {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.data.Manager.prototype.unfreeze = function() {};


/**
 * Очищает заданные поля данных.
 * @param {String|Array.<String>=} path Имя поля, либо массив имён.
 * @return {ymaps.data.Manager}
 */
ymaps.data.Manager.prototype.unset = function(path) {};


/**
 * Очищает все поля данных.
 * @return {ymaps.data.Manager}
 */
ymaps.data.Manager.prototype.unsetAll = function() {};


/**
 * Менеджер событий объекта. Унаследовано от IFreezable.
 * @type {ymaps.IEventManager}
 */
ymaps.data.Manager.prototype.events;

/**
 * @param {Object=} originalEvent DOM-событие.
 * @param {String=} type Тип события. Если не указан, берётся из originalEvent.type.
 * @constructor
 * @implements {ymaps.IDomEvent}
 */
ymaps.DomEvent = function(originalEvent, type) {};


/**
 * Вызывает указанный метод у исходного DOM-события. Второй и последующие аргументы передаются методу при вызове. Унаследован от IDomEvent.
 */
ymaps.DomEvent.prototype.callMethod = function() {};


/**
 * Возвращает свойство события по ключу. С помощью этого метода можно получать доступ как к свойствам оригинального события, так и к дополнительным свойствам, предоставляемым API карт. Унаследован от IDomEvent.
 * @return {Object}
 */
ymaps.DomEvent.prototype.get = function() {};


/**
 * Возвращает true, если распространение события внутри системы событий API Яндекс.Карт остановлено. Это внутренний признак, никак не связанный с пропагацией события по DOM-дереву. Унаследован от IDomEvent.
 */
ymaps.DomEvent.prototype.isImmediatePropagationStopped = function() {};

/**
 * @param {Object=} originalEvent multitouch-событие.
 * @param {String=} type Тип события. Если не указан, считается равным 'multi' + originalEvent.type.
 * @constructor
 * @implements {ymaps.IDomEvent}
 */
ymaps.domEvent.MultiTouch = function(originalEvent, type) {};


/**
 * Вызывает указанный метод у исходного DOM-события. Второй и последующие аргументы передаются методу при вызове. Унаследован от IDomEvent.
 */
ymaps.domEvent.MultiTouch.prototype.callMethod = function() {};


/**
 * Возвращает свойство события по ключу. С помощью этого метода можно получать доступ как к свойствам оригинального события, так и к дополнительным свойствам, предоставляемым API карт. Унаследован от IDomEvent.
 * @return {Object}
 */
ymaps.domEvent.MultiTouch.prototype.get = function() {};


/**
 * Возвращает true, если распространение события внутри системы событий API Яндекс.Карт остановлено. Это внутренний признак, никак не связанный с пропагацией события по DOM-дереву. Унаследован от IDomEvent.
 */
ymaps.domEvent.MultiTouch.prototype.isImmediatePropagationStopped = function() {};

/**
 * @param {ymaps.event.Manager=} events Менеджер событий, для которого создается контейнер.
 * @constructor
 * @implements {ymaps.IEventGroup}
 */
ymaps.event.Group = function(events) {};


/**
 * Добавляет обработчик события. Унаследован от IEventGroup.
 * @return {ymaps.IEventGroup}
 */
ymaps.event.Group.prototype.add = function() {};


/**
 * Удаляет обработчик события. Удалить можно только те обработчики, которые были добавлены через данный экземпляр контейнера. Унаследован от IEventGroup.
 * @return {ymaps.IEventGroup}
 */
ymaps.event.Group.prototype.remove = function() {};


/**
 * Удаляет все обработчики событий, которые были добавлены через данный экземпляр контейнера. Унаследован от IEventGroup.
 * @return {ymaps.IEventGroup}
 */
ymaps.event.Group.prototype.removeAll = function() {};


/**
 * Менеджер событий, для которого создан контейнер.
 * @type {ymaps.event.Manager}
 */
ymaps.event.Group.prototype.events;


/**
 * Список обработчиков, которые были созданы через данный контейнер. Представляет собой ассоциативный массив, в котором каждому типу событий сопоставлен список listenerId обработчиков в виде JavaScript-объекта.
 * @type {Object}
 */
ymaps.event.Group.prototype.types;


/**
 * Количество разных типов событий, которые слушают через данный контейнер
 * @type {Number}
 */
ymaps.event.Group.prototype.typesCount;

/**
 * @param {Object=} options Опции менеджера событий.
 * @constructor
 * @implements {ymaps.IEventManager}
 */
ymaps.event.Manager = function(options) {};


/**
 * Добавляет новую подписку. Унаследован от IEventManager.
 * @return {ymaps.IEventManager}
 */
ymaps.event.Manager.prototype.add = function() {};


/**
 * Функция, которая создает объект-событие. Вызывается в методе fire, когда переданный объект не является экземпляром класса Event или его наследником.
 * @param {String=} type Тип события.
 * @param {Object=} event Объект, описывающий событие.
 * @param {Object=} target Объект, на котором произошло событие.
 * @return {ymaps.Event}
 */
ymaps.event.Manager.prototype.createEventObject = function(type, event, target) {};


/**
 * Бросает событие.
 * @param {String=} type Тип события.
 * @param {Object|ymaps.Event=} event Объект, описывающий событие. Если передан хэш с данными, то для него будет вызван метод createEventObject, и дальнейшие действия будут производиться с новым созданным событием. Значение isImmediatePropagationStopped() проверяется в каждой фазе распространения событий. Значение isPropagationStopped() проверяется перед фазой bubblingEvent. Значение isDefaultPrevented() проверяется перед фазой defaultaction.
 * @return {ymaps.event.Manager}
 */
ymaps.event.Manager.prototype.fire = function(type, event) {};


/**
 * Возвращает родительский менеджер событий.
 * @return {ymaps.IEventManager}
 */
ymaps.event.Manager.prototype.getParent = function() {};


/**
 * Возвращает контейнер событий, привязанный к данному менеджеру. Унаследован от IEventManager.
 * @return {ymaps.IEventGroup}
 */
ymaps.event.Manager.prototype.group = function() {};


/**
 * Удаляет существующую подписку. Унаследован от IEventManager.
 * @return {ymaps.IEventManager}
 */
ymaps.event.Manager.prototype.remove = function() {};


/**
 * Задаёт родительский менеджер событий.
 * @param {ymaps.IEventManager=} parent Родительский менеджер событий.
 * @return {ymaps.event.Manager}
 */
ymaps.event.Manager.prototype.setParent = function(parent) {};

/**
 * @param {Object=} originalEvent DOM-событие.
 * @param {String=} type Тип события. Если не указан, берётся из originalEvent.type.
 * @constructor
 * @implements {ymaps.IDomEvent}
 */
ymaps.domEvent.Touch = function(originalEvent, type) {};


/**
 * Вызывает указанный метод у исходного DOM-события. Второй и последующие аргументы передаются методу при вызове. Унаследован от IDomEvent.
 */
ymaps.domEvent.Touch.prototype.callMethod = function() {};


/**
 * Возвращает свойство события по ключу. С помощью этого метода можно получать доступ как к свойствам оригинального события, так и к дополнительным свойствам, предоставляемым API карт. Унаследован от IDomEvent.
 * @return {Object}
 */
ymaps.domEvent.Touch.prototype.get = function() {};


/**
 * Возвращает true, если распространение события внутри системы событий API Яндекс.Карт остановлено. Это внутренний признак, никак не связанный с пропагацией события по DOM-дереву. Унаследован от IDomEvent.
 */
ymaps.domEvent.Touch.prototype.isImmediatePropagationStopped = function() {};

/**
 * @param {ymaps.event.PriorityManager=} events Менеджер событий, для которого создается контейнер.
 * @constructor
 * @implements {ymaps.IEventGroup}
 */
ymaps.event.PriorityGroup = function(events) {};


/**
 * Добавляет обработчик события.
 * @param {String|Array.<String>=} types Тип или типы событий.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст исполнения функции-обработчика.
 * @param {*=} priority 
 * @return {ymaps.event.PriorityGroup}
 */
ymaps.event.PriorityGroup.prototype.add = function(types, callback, context, priority) {};


/**
 * Удаляет обработчик события. Удалить можно только те обработчики, которые были добавлены через данный экземпляр контейнера.
 * @param {String|Array.<String>=} types Тип или типы событий.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст исполнения функции-обработчика.
 * @param {*=} priority 
 * @return {ymaps.event.PriorityGroup}
 */
ymaps.event.PriorityGroup.prototype.remove = function(types, callback, context, priority) {};


/**
 * Удаляет все обработчики событий, которые были добавлены через данный экземпляр контейнера.
 * @return {ymaps.event.PriorityGroup}
 */
ymaps.event.PriorityGroup.prototype.removeAll = function() {};


/**
 * Менеджер событий, для которого создан контейнер.
 * @type {ymaps.event.PriorityManager}
 */
ymaps.event.PriorityGroup.prototype.events;

/**
 * @param {Object=} originalEvent Исходные данные.
 * @param {Boolean=} isPropagationStopped true - пропагирование запрещено, false - нет. Значение по умолчанию: false
 * @param {Boolean=} isDefaultPrevented true - действие по умолчанию запрещено, false - нет. Значение по умолчанию: false
 * @constructor
 * @implements {ymaps.IEvent}
 */
ymaps.Event = function(originalEvent, isPropagationStopped, isDefaultPrevented) {};


/**
 * Вызывает указанный метод. Операция эквивалентна поиску поля через get и вызову с передачей в качестве контекста originalEvent. Все аргументы после первого передаются в качестве параметров вызываемому методу.
 * @param {String=} name Имя метода.
 * @return {Object}
 */
ymaps.Event.prototype.callMethod = function(name) {};


/**
 * Возвращает значение поля из originalEvent. originalEvent всегда имеет следующие поля: type - строковый тип события; target - ссылка на объект, породивший событие.
 * @param {String=} name Имя свойства.
 * @return {Object}
 */
ymaps.Event.prototype.get = function(name) {};


/**
 * Проверяет, отменена ли реакция по умолчанию на событие в рамках системы событий API Яндекс.Карт.
 * @return {Boolean}
 */
ymaps.Event.prototype.isDefaultPrevented = function() {};


/**
 * Определяет, прекращено ли распространение события в системе событий API Яндекс.Карт.
 * @return {Boolean}
 */
ymaps.Event.prototype.isImmediatePropagationStopped = function() {};


/**
 * Проверяет, остановлено ли распространение события по иерархии объектов и коллекций в системе событий API Яндекс.Карт.
 * @return {Boolean}
 */
ymaps.Event.prototype.isPropagationStopped = function() {};


/**
 * Отменяет реакцию по умолчанию на событие в рамках системы событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву.
 */
ymaps.Event.prototype.preventDefault = function() {};


/**
 * Прекращает распространение события в системе событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву.
 */
ymaps.Event.prototype.stopImmediatePropagation = function() {};


/**
 * Прекращает распространение события по иерархии объектов и коллекций в системе событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву.
 */
ymaps.Event.prototype.stopPropagation = function() {};

/**
 * @param {Object=} options Опции менеджера событий.
 * @constructor
 * @extends {ymaps.event.Manager}
 */
ymaps.event.PriorityManager = function(options) {};


/**
 * Добавляет новую подписку.
 * @param {String|Array.<String>=} types Тип или массив типов события.
 * @param {Function=} callback Функция-обработчик события.
 * @param {Object=} context Контекст исполнения обработчика.
 * @param {number=} priority Приоритет подписки. Если не указан, считается наименьшим из возможных.
 * @return {ymaps.event.PriorityManager}
 */
ymaps.event.PriorityManager.prototype.add = function(types, callback, context, priority) {};


/**
 * Функция, которая создает объект-событие. Вызывается в методе fire, когда переданный объект не является экземпляром класса Event или его наследником.
 * @param {String=} type Тип события.
 * @param {Object=} event Объект, описывающий событие.
 * @param {Object=} target Объект, на котором произошло событие.
 * @return {ymaps.Event}
 */
ymaps.event.PriorityManager.prototype.createEventObject = function(type, event, target) {};


/**
 * Бросает событие.
 * @param {String=} type Тип события.
 * @param {Object|ymaps.Event=} event Объект, описывающий событие. Если передан хэш с данными, то для него будет вызван метод createEventObject, и дальнейшие действия будут производиться с новым созданным событием. Значение isImmediatePropagationStopped() проверяется в каждой фазе распространения событий. Значение isPropagationStopped() проверяется перед фазой bubblingEvent. Значение isDefaultPrevented() проверяется перед фазой defaultaction.
 * @return {ymaps.event.PriorityManager}
 */
ymaps.event.PriorityManager.prototype.fire = function(type, event) {};


/**
 * Перебирает вложенные менеджеры событий и возвращает экземпляр с нужным priority. Если такого нет - создаёт его.
 * @param {Number=} priority Приоритет.
 * @return {event.manager.Base}
 */
ymaps.event.PriorityManager.prototype.getManagerByPriority = function(priority) {};


/**
 * Возвращает родительский менеджер событий.
 * @return {ymaps.IEventManager}
 */
ymaps.event.PriorityManager.prototype.getParent = function() {};


/**
 * Возвращает контейнер событий, привязанный к данному менеджеру.
 * @return {ymaps.event.PriorityGroup}
 */
ymaps.event.PriorityManager.prototype.group = function() {};


/**
 * Удаляет существующую подписку. Для удаления подписки требуется указать тот же приоритет, который был использован при её добавлении.
 * @param {String|Array.<String>=} types Тип или массив типов события.
 * @param {Function=} callback Функция-обработчик события.
 * @param {Object=} context Контекст исполнения обработчика.
 * @param {number=} priority Приоритет подписки. Если не указан, считается наименьшим из возможных.
 * @return {ymaps.event.PriorityManager}
 */
ymaps.event.PriorityManager.prototype.remove = function(types, callback, context, priority) {};


/**
 * Задаёт родительский менеджер событий.
 * @param {ymaps.IEventManager=} parent Родительский менеджер событий.
 * @return {ymaps.event.Manager}
 */
ymaps.event.PriorityManager.prototype.setParent = function(parent) {};

/**
 */
ymaps.formatter = function() {};


/**
 * Возвращает отформатированное согласно локальным правилам и переведённое в нужную систему единиц измерения строковое представление расстояния.
 * @param {Number=} value Длина в метрах.
 * @param {number=} significantDigits Число значащих цифр в ответе. Значение по умолчанию: 2
 * @return {String}
 */
ymaps.formatter.prototype.distance = function(value, significantDigits) {};


/**
 * Возвращает строковое представление интервала времени.
 * @param {Number=} value Интервал времени в секундах.
 * @param {number=} significantDigits Число значащих цифр в ответе. Значение по умолчанию: 2
 * @return {String}
 */
ymaps.formatter.prototype.duration = function(value, significantDigits) {};

/**
 */
ymaps.geolocation = function() {};

/**
 */
ymaps.geocode = function() {};

/**
 * @param {Array.<Number>|null=} coordinates Координаты центра круга. Значение по умолчанию: null
 * @param {Number=} radius Радиус круга. Значение по умолчанию: 0
 * @constructor
 * @implements {ymaps.IBaseCircleGeometry}
 */
ymaps.geometry.base.Circle = function(coordinates, radius) {};


/**
 * Проверяет, лежит ли переданная точка внутри круга. Унаследован от ICircleGeometryAccess.
 * @return {Boolean}
 */
ymaps.geometry.base.Circle.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.Circle.prototype.freeze = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.base.Circle.prototype.getBounds = function() {};


/**
 * Ищет на окружности точку, ближайшую к anchorPosition. Унаследован от ICircleGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.base.Circle.prototype.getClosest = function() {};


/**
 * Возвращает координаты центра круга. Унаследован от ICircleGeometryAccess.
 * @return {Array.<Number>|null}
 */
ymaps.geometry.base.Circle.prototype.getCoordinates = function() {};


/**
 * Возвращает радиус круга. Унаследован от ICircleGeometryAccess.
 * @return {Number}
 */
ymaps.geometry.base.Circle.prototype.getRadius = function() {};


/**
 * Возвращает строку "Circle". Унаследован от IBaseCircleGeometry.
 * @return {String}
 */
ymaps.geometry.base.Circle.prototype.getType = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.base.Circle.prototype.isFrozen = function() {};


/**
 * Задает координаты центра круга. Унаследован от ICircleGeometryAccess.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.geometry.base.Circle.prototype.setCoordinates = function() {};


/**
 * Задает радиус круга. Унаследован от ICircleGeometryAccess.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.geometry.base.Circle.prototype.setRadius = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.Circle.prototype.unfreeze = function() {};


/**
 * Менеджер событий геометрии.
 * @type {ymaps.event.Manager}
 */
ymaps.geometry.base.Circle.prototype.events;

/**
 * @param {Array.<Array.<Number>>=} coordinates Координаты геометрии. Значение по умолчанию: []
 * @param {String=} fillRule Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри. Значение по умолчанию: "evenOdd"
 * @constructor
 * @implements {ymaps.IBaseLinearRingGeometry}
 */
ymaps.geometry.base.LinearRing = function(coordinates, fillRule) {};


/**
 * Проверяет, лежит ли переданная точка внутри контура. Унаследован от ILinearRingGeometryAccess.
 * @return {Boolean}
 */
ymaps.geometry.base.LinearRing.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.LinearRing.prototype.freeze = function() {};


/**
 * Возвращает координаты точки с заданным индексом. Унаследован от ILinearRingGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.geometry.base.LinearRing.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.base.LinearRing.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект IPointGeometryAccess для заданной вершины контура. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.geometry.base.LinearRing.prototype.getChildGeometry = function() {};


/**
 * Ищет на контуре точку, ближайшую к anchorPosition. Унаследован от ILinearRingGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.base.LinearRing.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от ILinearRingGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.base.LinearRing.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки. Унаследован от ILinearRingGeometryAccess.
 * @return {String}
 */
ymaps.geometry.base.LinearRing.prototype.getFillRule = function() {};


/**
 * Возвращает количество точек в геометрии. Унаследован от ILinearRingGeometryAccess.
 * @return {number}
 */
ymaps.geometry.base.LinearRing.prototype.getLength = function() {};


/**
 * Возвращает строку "LinearRing". Унаследован от IBaseLinearRingGeometry.
 * @return {String}
 */
ymaps.geometry.base.LinearRing.prototype.getType = function() {};


/**
 * Добавляет новую точку с заданным индексом. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.geometry.base.LinearRing.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.base.LinearRing.prototype.isFrozen = function() {};


/**
 * Удаляет точку с заданным индексом. Унаследован от ILinearRingGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.geometry.base.LinearRing.prototype.remove = function() {};


/**
 * Задает координаты точки c заданным индексом. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.geometry.base.LinearRing.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.geometry.base.LinearRing.prototype.setCoordinates = function() {};


/**
 * Задает алгоритм заливки контура. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.geometry.base.LinearRing.prototype.setFillRule = function() {};


/**
 * Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILinearRingGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.base.LinearRing.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.LinearRing.prototype.unfreeze = function() {};


/**
 * Менеджер событий геометрии.
 * @type {ymaps.event.Manager}
 */
ymaps.geometry.base.LinearRing.prototype.events;

/**
 */
ymaps.geometry.base.LinearRing.fromEncodedCoordinates = function() {};

/**
 */
ymaps.geometry.base.LinearRing.toEncodedCoordinates = function() {};

/**
 * @param {Array.<Array.<Number>>=} coordinates Координаты геометрии. Значение по умолчанию: []
 * @constructor
 * @implements {ymaps.IBaseLineStringGeometry}
 */
ymaps.geometry.base.LineString = function(coordinates) {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.LineString.prototype.freeze = function() {};


/**
 * Возвращает координаты точки с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.geometry.base.LineString.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.base.LineString.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.geometry.base.LineString.prototype.getChildGeometry = function() {};


/**
 * Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от ILineStringGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.base.LineString.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.base.LineString.prototype.getCoordinates = function() {};


/**
 * Возвращает количество точек в геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {number}
 */
ymaps.geometry.base.LineString.prototype.getLength = function() {};


/**
 * Возвращает строку "LineString". Унаследован от IBaseLineStringGeometry.
 * @return {String}
 */
ymaps.geometry.base.LineString.prototype.getType = function() {};


/**
 * Добавляет новую точку с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.geometry.base.LineString.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.base.LineString.prototype.isFrozen = function() {};


/**
 * Удаляет точку с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.geometry.base.LineString.prototype.remove = function() {};


/**
 * Задает координаты точки c заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.geometry.base.LineString.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.geometry.base.LineString.prototype.setCoordinates = function() {};


/**
 * Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.base.LineString.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.LineString.prototype.unfreeze = function() {};


/**
 * Менеджер событий геометрии.
 * @type {ymaps.event.Manager}
 */
ymaps.geometry.base.LineString.prototype.events;

/**
 */
ymaps.geometry.base.LineString.fromEncodedCoordinates = function() {};

/**
 * @param {Array.<Number>|null=} position Координаты точки. Значение по умолчанию: null
 * @constructor
 * @implements {ymaps.IBasePointGeometry}
 */
ymaps.geometry.base.Point = function(position) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.base.Point.prototype.getBounds = function() {};


/**
 * Возвращает координаты точки. Унаследован от IPointGeometryAccess.
 * @return {Array.<Number>|null}
 */
ymaps.geometry.base.Point.prototype.getCoordinates = function() {};


/**
 * Возвращает строку "Point". Унаследован от IBasePointGeometry.
 * @return {String}
 */
ymaps.geometry.base.Point.prototype.getType = function() {};


/**
 * Задает координаты точки. Унаследован от IPointGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.geometry.base.Point.prototype.setCoordinates = function() {};


/**
 * Менеджер событий геометрии.
 * @type {ymaps.event.Manager}
 */
ymaps.geometry.base.Point.prototype.events;

/**
 */
ymaps.geometry.base.LineString.toEncodedCoordinates = function() {};

/**
 * @param {Array.<Array.<Array.<Number>>>=} coordinates Координаты геометрии. Значение по умолчанию: []
 * @param {String=} fillRule Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри. Значение по умолчанию: "evenOdd"
 * @constructor
 * @implements {ymaps.IBasePolygonGeometry}
 */
ymaps.geometry.base.Polygon = function(coordinates, fillRule) {};


/**
 * Проверяет, лежит ли переданная точка внутри многоугольника. Унаследован от IPolygonGeometryAccess.
 * @return {Boolean}
 */
ymaps.geometry.base.Polygon.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.Polygon.prototype.freeze = function() {};


/**
 * Возвращает координаты контура с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.base.Polygon.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.base.Polygon.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект ILinearRingGeometryAccess для заданного контура. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.geometry.base.Polygon.prototype.getChildGeometry = function() {};


/**
 * Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPolygonGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.base.Polygon.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<Array.<Array.<Number>>>}
 */
ymaps.geometry.base.Polygon.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки. Унаследован от IPolygonGeometryAccess.
 * @return {String}
 */
ymaps.geometry.base.Polygon.prototype.getFillRule = function() {};


/**
 * Возвращает количество контуров в геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {number}
 */
ymaps.geometry.base.Polygon.prototype.getLength = function() {};


/**
 * Возвращает строку "Polygon". Унаследован от IBasePolygonGeometry.
 * @return {String}
 */
ymaps.geometry.base.Polygon.prototype.getType = function() {};


/**
 * Добавляет новый контур с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.geometry.base.Polygon.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.base.Polygon.prototype.isFrozen = function() {};


/**
 * Удаляет контур с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.geometry.base.Polygon.prototype.remove = function() {};


/**
 * Задает координаты контура c заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.geometry.base.Polygon.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.geometry.base.Polygon.prototype.setCoordinates = function() {};


/**
 * Задает алгоритм заливки многоугольника. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.geometry.base.Polygon.prototype.setFillRule = function() {};


/**
 * Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<ymaps.ILinearRingGeometryAccess>}
 */
ymaps.geometry.base.Polygon.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.Polygon.prototype.unfreeze = function() {};


/**
 * Менеджер событий геометрии.
 * @type {ymaps.event.Manager}
 */
ymaps.geometry.base.Polygon.prototype.events;

/**
 */
ymaps.geometry.base.Polygon.toEncodedCoordinates = function() {};

/**
 */
ymaps.geometry.base.Polygon.fromEncodedCoordinates = function() {};

/**
 * @param {Array.<Array.<Number>>|null=} coordinates Массив, содержащий координаты двух противоположных углов прямоугольника. Значение по умолчанию: null
 * @constructor
 * @implements {ymaps.IBaseRectangleGeometry}
 */
ymaps.geometry.base.Rectangle = function(coordinates) {};


/**
 * Проверяет, лежит ли переданная точка внутри прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {Boolean}
 */
ymaps.geometry.base.Rectangle.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.Rectangle.prototype.freeze = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.base.Rectangle.prototype.getBounds = function() {};


/**
 * Ищет на контуре прямоугольника точку, ближайшую к anchorPosition. Унаследован от IRectangleGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.base.Rectangle.prototype.getClosest = function() {};


/**
 * Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.geometry.base.Rectangle.prototype.getCoordinates = function() {};


/**
 * Возвращает строку "Rectangle". Унаследован от IBaseRectangleGeometry.
 * @return {String}
 */
ymaps.geometry.base.Rectangle.prototype.getType = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.base.Rectangle.prototype.isFrozen = function() {};


/**
 * Задает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.geometry.base.Rectangle.prototype.setCoordinates = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.base.Rectangle.prototype.unfreeze = function() {};


/**
 * Менеджер событий геометрии.
 * @type {ymaps.event.Manager}
 */
ymaps.geometry.base.Rectangle.prototype.events;

/**
 */
ymaps.geometry.LineString.fromEncodedCoordinates = function() {};

/**
 * @param {Array.<Number>|null=} coordinates Координаты центра круга. Значение по умолчанию: null
 * @param {Number=} radius Радиус круга в метрах. Значение по умолчанию: 0
 * @param {Object=} options Опции геометрии.
 * @constructor
 * @implements {ymaps.ICircleGeometry}
 */
ymaps.geometry.Circle = function(coordinates, radius, options) {};


/**
 * Проверяет, лежит ли переданная точка внутри круга. Унаследован от ICircleGeometryAccess.
 * @return {Boolean}
 */
ymaps.geometry.Circle.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.Circle.prototype.freeze = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.Circle.prototype.getBounds = function() {};


/**
 * Ищет на окружности точку, ближайшую к anchorPosition. Унаследован от ICircleGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.Circle.prototype.getClosest = function() {};


/**
 * Возвращает координаты центра круга. Унаследован от ICircleGeometryAccess.
 * @return {Array.<Number>|null}
 */
ymaps.geometry.Circle.prototype.getCoordinates = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.geometry.Circle.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.Circle.prototype.getPixelGeometry = function() {};


/**
 * Возвращает радиус круга. Унаследован от ICircleGeometryAccess.
 * @return {Number}
 */
ymaps.geometry.Circle.prototype.getRadius = function() {};


/**
 * Возвращает строку "Circle". Унаследован от ICircleGeometry.
 * @return {String}
 */
ymaps.geometry.Circle.prototype.getType = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.Circle.prototype.isFrozen = function() {};


/**
 * Задает координаты центра круга. Унаследован от ICircleGeometryAccess.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.geometry.Circle.prototype.setCoordinates = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.geometry.Circle.prototype.setMap = function() {};


/**
 * Задает радиус круга. Унаследован от ICircleGeometryAccess.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.geometry.Circle.prototype.setRadius = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.Circle.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.Circle.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.geometry.Circle.prototype.options;

/**
 * @param {Array.<Array.<Number>>=} coordinates Координаты геометрии. Значение по умолчанию: []
 * @param {Object=} options Опции геометрии.
 * @constructor
 * @implements {ymaps.ILineStringGeometry}
 */
ymaps.geometry.LineString = function(coordinates, options) {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.LineString.prototype.freeze = function() {};


/**
 * Возвращает координаты точки с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.geometry.LineString.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.LineString.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.geometry.LineString.prototype.getChildGeometry = function() {};


/**
 * Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от ILineStringGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.LineString.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.LineString.prototype.getCoordinates = function() {};


/**
 * Возвращает количество точек в геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {number}
 */
ymaps.geometry.LineString.prototype.getLength = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.geometry.LineString.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.LineString.prototype.getPixelGeometry = function() {};


/**
 * Возвращает строку "LineString". Унаследован от ILineStringGeometry.
 * @return {String}
 */
ymaps.geometry.LineString.prototype.getType = function() {};


/**
 * Добавляет новую точку с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.geometry.LineString.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.LineString.prototype.isFrozen = function() {};


/**
 * Удаляет точку с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.geometry.LineString.prototype.remove = function() {};


/**
 * Задает координаты точки c заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.geometry.LineString.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.geometry.LineString.prototype.setCoordinates = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.geometry.LineString.prototype.setMap = function() {};


/**
 * Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.LineString.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.LineString.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.LineString.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.geometry.LineString.prototype.options;

/**
 */
ymaps.geometry.LineString.getPixelRadius = function() {};

/**
 */
ymaps.geometry.LineString.toEncodedCoordinates = function() {};

/**
 * @param {Array.<Number>|null=} coordinates Координаты центра круга.
 * @param {Number|null=} radius Радиус круга.
 * @param {Object=} metaData Метаданные.
 * @constructor
 * @implements {ymaps.IPixelCircleGeometry}
 */
ymaps.geometry.pixel.Circle = function(coordinates, radius, metaData) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.pixel.Circle.prototype.getBounds = function() {};


/**
 * Возвращает координаты центра круга. Унаследован от IPixelCircleGeometry.
 * @return {Array.<Number>}
 */
ymaps.geometry.pixel.Circle.prototype.getCoordinates = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.Circle.prototype.getMetaData = function() {};


/**
 * Возвращает радиус круга. Унаследован от IPixelCircleGeometry.
 * @return {Number}
 */
ymaps.geometry.pixel.Circle.prototype.getRadius = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.geometry.pixel.Circle.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.Circle.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.Circle.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.pixel.Circle.prototype.events;

/**
 * @param {Array.<Array.<Number>>=} coordinates Координаты линии.
 * @param {Object=} metaData Метаданные.
 * @constructor
 * @implements {ymaps.IPixelLineStringGeometry}
 */
ymaps.geometry.pixel.LineString = function(coordinates, metaData) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.pixel.LineString.prototype.getBounds = function() {};


/**
 * Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от IPixelLineStringGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.LineString.prototype.getClosest = function() {};


/**
 * Возвращает координаты линии. Унаследован от IPixelLineStringGeometry.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.pixel.LineString.prototype.getCoordinates = function() {};


/**
 * Возвращает количество точек в геометрии. Унаследован от IPixelLineStringGeometry.
 * @return {number}
 */
ymaps.geometry.pixel.LineString.prototype.getLength = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.LineString.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.geometry.pixel.LineString.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.LineString.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.LineString.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.pixel.LineString.prototype.events;

/**
 * @param {Array.<Array.<Array.<Array.<Number>>>>=} coordinates Координаты многоугольников.
 * @param {String=} fillRule Строковый идентификатор, определяющий алгоритм заливки многоугольников. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри.
 * @param {Object=} metaData Метаданные.
 * @constructor
 * @implements {ymaps.IPixelPolygonGeometry}
 */
ymaps.geometry.pixel.MultiPolygon = function(coordinates, fillRule, metaData) {};


/**
 * Проверяет лежит ли переданная точка внутри многоугольника. Унаследован от IPixelPolygonGeometry.
 * @return {Boolean}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.contains = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.getBounds = function() {};


/**
 * Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPixelPolygonGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.getClosest = function() {};


/**
 * Возвращает координаты многоугольника. Унаследован от IPixelPolygonGeometry.
 * @return {Array.<Array.<Array.<Number>>>}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки многоугольника. Унаследован от IPixelPolygonGeometry.
 * @return {String}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.getFillRule = function() {};


/**
 * Возвращает количество контуров в многоугольнике. Унаследован от IPixelPolygonGeometry.
 * @return {number}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.getLength = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.pixel.MultiPolygon.prototype.events;

/**
 * @param {Array.<Number>|null=} position Координаты точки.
 * @param {Object=} metaData Метаданные.
 * @constructor
 * @implements {ymaps.IPixelPointGeometry}
 */
ymaps.geometry.pixel.Point = function(position, metaData) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.pixel.Point.prototype.getBounds = function() {};


/**
 * Возвращает координаты точки. Унаследован от IPixelPointGeometry.
 * @return {Array.<Number>}
 */
ymaps.geometry.pixel.Point.prototype.getCoordinates = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.Point.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.geometry.pixel.Point.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.Point.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.Point.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.pixel.Point.prototype.events;

/**
 * @param {Array.<Number>=} position Координаты точки. Значение по умолчанию: null
 * @param {Object=} options Опции геометрии.
 * @constructor
 * @implements {ymaps.IPointGeometry}
 */
ymaps.geometry.Point = function(position, options) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.Point.prototype.getBounds = function() {};


/**
 * Возвращает координаты точки. Унаследован от IPointGeometryAccess.
 * @return {Array.<Number>|null}
 */
ymaps.geometry.Point.prototype.getCoordinates = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.geometry.Point.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.Point.prototype.getPixelGeometry = function() {};


/**
 * Возвращает строку "Point". Унаследован от IPointGeometry.
 * @return {String}
 */
ymaps.geometry.Point.prototype.getType = function() {};


/**
 * Задает координаты точки. Унаследован от IPointGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.geometry.Point.prototype.setCoordinates = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.geometry.Point.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.Point.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.geometry.Point.prototype.options;

/**
 * @param {Array.<Array.<Number>>|null=} coordinates Координаты двух противоположных углов прямоугольника. Значение по умолчанию: null
 * @param {Object=} metaData Метаданные.
 * @constructor
 * @implements {ymaps.IPixelRectangleGeometry}
 */
ymaps.geometry.pixel.Rectangle = function(coordinates, metaData) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.pixel.Rectangle.prototype.getBounds = function() {};


/**
 * Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IPixelRectangleGeometry.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.pixel.Rectangle.prototype.getCoordinates = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.Rectangle.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.geometry.pixel.Rectangle.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.Rectangle.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.Rectangle.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.pixel.Rectangle.prototype.events;

/**
 * @param {Array.<Array.<Array.<Number>>>=} coordinates Координаты многоугольника.
 * @param {String=} fillRule Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри.
 * @param {Object=} metaData Метаданные.
 * @constructor
 * @implements {ymaps.IPixelPolygonGeometry}
 */
ymaps.geometry.pixel.Polygon = function(coordinates, fillRule, metaData) {};


/**
 * Проверяет лежит ли переданная точка внутри многоугольника. Унаследован от IPixelPolygonGeometry.
 * @return {Boolean}
 */
ymaps.geometry.pixel.Polygon.prototype.contains = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.pixel.Polygon.prototype.getBounds = function() {};


/**
 * Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPixelPolygonGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.Polygon.prototype.getClosest = function() {};


/**
 * Возвращает координаты многоугольника. Унаследован от IPixelPolygonGeometry.
 * @return {Array.<Array.<Array.<Number>>>}
 */
ymaps.geometry.pixel.Polygon.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки многоугольника. Унаследован от IPixelPolygonGeometry.
 * @return {String}
 */
ymaps.geometry.pixel.Polygon.prototype.getFillRule = function() {};


/**
 * Возвращает количество контуров в многоугольнике. Унаследован от IPixelPolygonGeometry.
 * @return {number}
 */
ymaps.geometry.pixel.Polygon.prototype.getLength = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.geometry.pixel.Polygon.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.geometry.pixel.Polygon.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.Polygon.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.pixel.Polygon.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.pixel.Polygon.prototype.events;

/**
 */
ymaps.geometry.Polygon.fromEncodedCoordinates = function() {};

/**
 * @param {Array.<Array.<Array.<Number>>>=} coordinates Координаты геометрии. Значение по умолчанию: []
 * @param {String=} fillRule Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри. Значение по умолчанию: "evenOdd"
 * @param {Object=} options Опции геометрии.
 * @constructor
 * @implements {ymaps.IPolygonGeometry}
 */
ymaps.geometry.Polygon = function(coordinates, fillRule, options) {};


/**
 * Проверяет, лежит ли переданная точка внутри многоугольника. Унаследован от IPolygonGeometryAccess.
 * @return {Boolean}
 */
ymaps.geometry.Polygon.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.Polygon.prototype.freeze = function() {};


/**
 * Возвращает координаты контура с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.geometry.Polygon.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.Polygon.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект ILinearRingGeometryAccess для заданного контура. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.geometry.Polygon.prototype.getChildGeometry = function() {};


/**
 * Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPolygonGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.Polygon.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<Array.<Array.<Number>>>}
 */
ymaps.geometry.Polygon.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки. Унаследован от IPolygonGeometryAccess.
 * @return {String}
 */
ymaps.geometry.Polygon.prototype.getFillRule = function() {};


/**
 * Возвращает количество контуров в геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {number}
 */
ymaps.geometry.Polygon.prototype.getLength = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.geometry.Polygon.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.Polygon.prototype.getPixelGeometry = function() {};


/**
 * Возвращает строку "Polygon". Унаследован от IPolygonGeometry.
 * @return {String}
 */
ymaps.geometry.Polygon.prototype.getType = function() {};


/**
 * Добавляет новый контур с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.geometry.Polygon.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.Polygon.prototype.isFrozen = function() {};


/**
 * Удаляет контур с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.geometry.Polygon.prototype.remove = function() {};


/**
 * Задает координаты контура c заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.geometry.Polygon.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.geometry.Polygon.prototype.setCoordinates = function() {};


/**
 * Задает алгоритм заливки многоугольника. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.geometry.Polygon.prototype.setFillRule = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.geometry.Polygon.prototype.setMap = function() {};


/**
 * Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<ymaps.ILinearRingGeometryAccess>}
 */
ymaps.geometry.Polygon.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.Polygon.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.Polygon.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.geometry.Polygon.prototype.options;

/**
 */
ymaps.geometry.Polygon.toEncodedCoordinates = function() {};

/**
 * @param {Array.<Array.<Number>>|null=} coordinates Массив, содержащий координаты двух противоположных углов прямоугольника. Значение по умолчанию: null
 * @param {Object=} options Опции геометрии.
 * @constructor
 * @implements {ymaps.IRectangleGeometry}
 */
ymaps.geometry.Rectangle = function(coordinates, options) {};


/**
 * Проверяет, лежит ли переданная точка внутри прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {Boolean}
 */
ymaps.geometry.Rectangle.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.Rectangle.prototype.freeze = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.geometry.Rectangle.prototype.getBounds = function() {};


/**
 * Ищет на контуре прямоугольника точку, ближайшую к anchorPosition. Унаследован от IRectangleGeometryAccess.
 * @return {Object}
 */
ymaps.geometry.Rectangle.prototype.getClosest = function() {};


/**
 * Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.geometry.Rectangle.prototype.getCoordinates = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.geometry.Rectangle.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.geometry.Rectangle.prototype.getPixelGeometry = function() {};


/**
 * Возвращает строку "Rectangle". Унаследован от IRectangleGeometry.
 * @return {String}
 */
ymaps.geometry.Rectangle.prototype.getType = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.geometry.Rectangle.prototype.isFrozen = function() {};


/**
 * Задает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.geometry.Rectangle.prototype.setCoordinates = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.geometry.Rectangle.prototype.setMap = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.geometry.Rectangle.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometry.Rectangle.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.geometry.Rectangle.prototype.options;

/**
 * @param {ymaps.ILineStringGeometry=} geometry Геометрия "Ломаная линия".
 * @param {Object=} options Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого редактора, так и опции его составных частей: опции направляющих линий с префиксом guideLines.
 * @constructor
 * @implements {ymaps.IGeometryEditor}
 */
ymaps.geometryEditor.LineString = function(geometry, options) {};


/**
 * Включает режим добавления новых точек в ломаную линию.
 */
ymaps.geometryEditor.LineString.prototype.startDrawing = function() {};


/**
 * Включает режим редактирования. Унаследован от IGeometryEditor.
 */
ymaps.geometryEditor.LineString.prototype.startEditing = function() {};


/**
 * Отключает режим добавления новых точек в ломаную линию.
 */
ymaps.geometryEditor.LineString.prototype.stopDrawing = function() {};


/**
 * Отключает режим редактирования. Унаследован от IGeometryEditor.
 */
ymaps.geometryEditor.LineString.prototype.stopEditing = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometryEditor.LineString.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.geometryEditor.LineString.prototype.options;


/**
 * Менеджер состояния редактора геометрии. Поля данных, доступные посредством методов get и set: editing - определяет включен ли редактор. Тип - Boolean. Значение по умолчанию - false. drawing - определяет включен ли режим добавления новых точек. Тип - Boolean. Значение по умолчанию - false. drawingFrom - определяет то, как добавляются новые точки в режиме добавления. Может принимать одно из двух строковых значений: "begin" - точки добавляются в начало ломаной линии, "end"- точки добавляются в конец. Значение по умолчанию - "end".
 * @type {ymaps.IDataManager}
 */
ymaps.geometryEditor.LineString.prototype.state;

/**
 * @param {ymaps.IPointGeometry=} geometry Геометрия "Точка".
 * @param {Object=} options Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого редактора, так и опции его составных частей: опции направляющих линий с префиксом guideLines.
 * @constructor
 * @implements {ymaps.IGeometryEditor}
 */
ymaps.geometryEditor.Point = function(geometry, options) {};


/**
 * Включает режим рисования точки.
 */
ymaps.geometryEditor.Point.prototype.startDrawing = function() {};


/**
 * Включает режим редактирования. Унаследован от IGeometryEditor.
 */
ymaps.geometryEditor.Point.prototype.startEditing = function() {};


/**
 * Отключает режим рисования точки.
 */
ymaps.geometryEditor.Point.prototype.stopDrawing = function() {};


/**
 * Отключает режим редактирования. Унаследован от IGeometryEditor.
 */
ymaps.geometryEditor.Point.prototype.stopEditing = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometryEditor.Point.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.geometryEditor.Point.prototype.options;


/**
 * Менеджер состояния редактора геометрии. Поля данных, доступные посредством методов get и set: editing - определяет включен ли редактор. Тип - Boolean. Значение по умолчанию - false. drawing - определяет включен ли режим рисования. Тип - Boolean. Значение по умолчанию - false.
 * @type {ymaps.IDataManager}
 */
ymaps.geometryEditor.Point.prototype.state;

/**
 * @param {ymaps.IPolygonGeometry=} geometry Геометрия "Многоугольник".
 * @param {Object=} options Опции редактора геометрии. Через опции редактора геометрии можно задавать как опции самого редактора, так и опции его составных частей: опции направляющих линий с префиксом guideLines.
 * @constructor
 * @implements {ymaps.IGeometryEditor}
 */
ymaps.geometryEditor.Polygon = function(geometry, options) {};


/**
 * Включает режим добавления новых точек в многоугольник.
 */
ymaps.geometryEditor.Polygon.prototype.startDrawing = function() {};


/**
 * Включает режим редактирования. Унаследован от IGeometryEditor.
 */
ymaps.geometryEditor.Polygon.prototype.startEditing = function() {};


/**
 * Отключает режим добавления новых точек в многоугольник.
 */
ymaps.geometryEditor.Polygon.prototype.stopDrawing = function() {};


/**
 * Отключает режим редактирования. Унаследован от IGeometryEditor.
 */
ymaps.geometryEditor.Polygon.prototype.stopEditing = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.geometryEditor.Polygon.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.geometryEditor.Polygon.prototype.options;


/**
 * Менеджер состояния редактора геометрии. Поля данных, доступные посредством методов get и set: editing - определяет включен ли редактор. Тип - Boolean. Значение по умолчанию - false. drawing - определяет включен ли режим добавления новых точек. Тип - Boolean. Значение по умолчанию - false. drawingFrom - определяет то, как добавляются новые точки в режиме добавления. Может принимать одно из двух строковых значений: "begin" - точки добавляются в начало многоугольника, "end"- точки добавляются в конец. drawingFromIndex - индекс вершины многоугольника, после которой будут добавляться новые точки в режиме добавления. Данное поле доступно только на запись, т.к. факт записи приводит к изменению порядка точек в многоугольнике, так чтобы точка с заданным индексом стала последней по счету. Тип - целое число. drawingPath - индекс контура многоугольника, в который добавляются новые точки в режиме добавления. Тип - целое число. Значение по умолчанию - 0.
 * @type {ymaps.IDataManager}
 */
ymaps.geometryEditor.Polygon.prototype.state;

/**
 * @param {Object=} feature Описание геообъекта.
 * @param {Object=} options Опции геообъекта. Используя этот параметр можно задавать как опции самого геообъекта, так и опции его составных частей: Опции балуна геообъекта с префиксом balloon. Опции всплывающей подсказки геообъекта с префиксом hint. Опции редактора геометрии геообъекта с префиксом editor. Тип редактора и перечень доступных опций зависит от типа геометрии геообъекта. Смотрите описание классов geometryEditor.LineString, geometryEditor.Polygon, geometryEditor.Point. Опции геометрии могут задаваться без префикса. Смотрите описание классов IGeometry геометрий geometry.Point, geometry.Polygon и др.
 * @constructor
 * @implements {ymaps.IGeoObject}
 */
ymaps.GeoObject = function(feature, options) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.GeoObject.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.GeoObject.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.GeoObject.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.GeoObject.prototype.setParent = function() {};


/**
 * Балун геообъекта.
 * @type {ymaps.geoObject.Balloon}
 */
ymaps.GeoObject.prototype.balloon;


/**
 * Редактор геометрии геообъекта.
 * @type {ymaps.IGeometryEditor}
 */
ymaps.GeoObject.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.GeoObject.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.GeoObject.prototype.geometry;


/**
 * Хинт геообъекта.
 * @type {ymaps.geoObject.Hint}
 */
ymaps.GeoObject.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.GeoObject.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.GeoObject.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.GeoObject.prototype.state;

/**
 * @param {Object=} geoObject Геообъект.
 * @constructor
 */
ymaps.geoObject.Hint = function(geoObject) {};


/**
 * Скрывает хинт.
 * @param {*=} callback 
 * @param {*=} urgently 
 */
ymaps.geoObject.Hint.prototype.hide = function(callback, urgently) {};


/**
 * Проверяет состояние хинта на карте.
 * @return {Boolean}
 */
ymaps.geoObject.Hint.prototype.isShown = function() {};


/**
 * Передвигает хинт, если он в данный момент показан.
 * @param {Array.<Number>=} position Новая позиция хинта в глобальных пиксельных координатах.
 */
ymaps.geoObject.Hint.prototype.move = function(position) {};


/**
 * Показывает хинт.
 * @param {Array.<Number>=} position Позиция хинта в глобальных пиксельных координатах.
 * @return {ymaps.Hint}
 */
ymaps.geoObject.Hint.prototype.show = function(position) {};


/**
 * Менеджер событий хинта геообъекта.
 * @type {ymaps.event.Manager}
 */
ymaps.geoObject.Hint.prototype.events;

/**
 * @param {Object=} geoObject Геообъект.
 * @constructor
 */
ymaps.geoObject.Balloon = function(geoObject) {};


/**
 * Определяет пиксельные координаты точки геообъекта.
 * @param {Array.<Number>=} anchorPixels Координаты точки привязки. Если указать данный параметр, то результатом работы функции будет точка геообъекта, которая является ближайшей к заданной точке.
 */
ymaps.geoObject.Balloon.prototype.calculatePixelPosition = function(anchorPixels) {};


/**
 * Закрывает балун.
 * @param {*=} callback 
 */
ymaps.geoObject.Balloon.prototype.close = function(callback) {};


/**
 * Проверяет, открыт ли балун в данный момент.
 * @return {Boolean}
 */
ymaps.geoObject.Balloon.prototype.isOpen = function() {};


/**
 * Открывает балун.
 * @param {Array.<Number>=} anchorPixels Точка привязки балуна в глобальных пиксельных координатах. По умолчанию используются текущие координаты центра карты.
 * @return {ymaps.Balloon}
 */
ymaps.geoObject.Balloon.prototype.open = function(anchorPixels) {};


/**
 * Менеджер событий балуна геообъекта.
 * @type {ymaps.event.Manager}
 */
ymaps.geoObject.Balloon.prototype.events;

/**
 */
ymaps.geoObject.overlayFactory.hotspot = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.hotspot.prototype.add = function() {};


/**
 * Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии.
 * @return {ymaps.IOverlay}
 */
ymaps.geoObject.overlayFactory.hotspot.prototype.createOverlay = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.geoObject.overlayFactory.hotspot.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.hotspot.prototype.remove = function() {};

/**
 */
ymaps.geoObject.overlayFactory.interactiveGraphics = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.interactiveGraphics.prototype.add = function() {};


/**
 * Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии.
 * @return {ymaps.IOverlay}
 */
ymaps.geoObject.overlayFactory.interactiveGraphics.prototype.createOverlay = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.geoObject.overlayFactory.interactiveGraphics.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.interactiveGraphics.prototype.remove = function() {};

/**
 */
ymaps.geoObject.overlayFactory.staticGraphics = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.staticGraphics.prototype.add = function() {};


/**
 * Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии.
 * @return {ymaps.IOverlay}
 */
ymaps.geoObject.overlayFactory.staticGraphics.prototype.createOverlay = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.geoObject.overlayFactory.staticGraphics.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.staticGraphics.prototype.remove = function() {};

/**
 */
ymaps.geoObject.overlayFactory.interactive = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.interactive.prototype.add = function() {};


/**
 * Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии.
 * @return {ymaps.IOverlay}
 */
ymaps.geoObject.overlayFactory.interactive.prototype.createOverlay = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.geoObject.overlayFactory.interactive.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.interactive.prototype.remove = function() {};

/**
 */
ymaps.geoObject.overlayFactory.storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.storage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.geoObject.overlayFactory.storage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.overlayFactory.storage.prototype.remove = function() {};

/**
 * @constructor
 * @implements {ymaps.IOverlayFactory}
 * @extends {ymaps.util.Storage}
 */
ymaps.geoObject.OverlayFactory = function() {};


/**
 * Добавляет объект в хранилище. Унаследован от util.Storage.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.OverlayFactory.prototype.add = function() {};


/**
 * Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии. Унаследован от IOverlayFactory.
 * @return {ymaps.IOverlay}
 */
ymaps.geoObject.OverlayFactory.prototype.createOverlay = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом. Унаследован от util.Storage.
 * @return {Object}
 */
ymaps.geoObject.OverlayFactory.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища. Унаследован от util.Storage.
 * @return {ymaps.util.Storage}
 */
ymaps.geoObject.OverlayFactory.prototype.remove = function() {};

/**
 */
ymaps.geoXml.load = function() {};

/**
 */
ymaps.graphics.style.color = function() {};

/**
 * @param {Object=} feature Описание коллекции. Функционально соответствует описанию геообъекта. Смотрите GeoObject.
 * @param {Object=} options Опции коллекции. Здесь можно задавать все опции описанные в классе GeoObject. Значения опций будут применяться как к самой коллекции, так и к ее дочерним объектам, если для них данные опции не заданы.
 * @constructor
 * @implements {ymaps.IGeoObject}
 * @implements {ymaps.IMapObjectCollection}
 */
ymaps.GeoObjectCollection = function(feature, options) {};


/**
 * Добавляет геообъект в коллекцию.
 * @param {ymaps.IGeoObject=} child Дочерний геообъект.
 * @return {ymaps.GeoObjectCollection}
 */
ymaps.GeoObjectCollection.prototype.add = function(child) {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст выполнения функции.
 */
ymaps.GeoObjectCollection.prototype.each = function(callback, context) {};


/**
 * Возвращает географические координаты области, охватывающей коллекцию и все ее дочерние геообъекты.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.GeoObjectCollection.prototype.getBounds = function() {};


/**
 * Возвращает итератор по коллекции.
 * @return {ymaps.IIterator}
 */
ymaps.GeoObjectCollection.prototype.getIterator = function() {};


/**
 * Возвращает количество геообъектов в коллекции.
 * @return {number}
 */
ymaps.GeoObjectCollection.prototype.getLength = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.GeoObjectCollection.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.GeoObjectCollection.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.GeoObjectCollection.prototype.getParent = function() {};


/**
 * Возвращает глобальные пиксельные координаты области, охватывающей коллекцию и все ее дочерние геообъекты.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.GeoObjectCollection.prototype.getPixelBounds = function() {};


/**
 * Удаляет геообъект из коллекции.
 * @param {ymaps.IGeoObject=} child Дочерний геообъект.
 * @return {ymaps.GeoObjectCollection}
 */
ymaps.GeoObjectCollection.prototype.remove = function(child) {};


/**
 * Удаляет из коллекции все геообъекты.
 * @return {ymaps.GeoObjectCollection}
 */
ymaps.GeoObjectCollection.prototype.removeAll = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.GeoObjectCollection.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.GeoObjectCollection.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.GeoObjectCollection.prototype.geometry;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.GeoObjectCollection.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.GeoObjectCollection.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.GeoObjectCollection.prototype.state;

/**
 * @param {Object=} feature Описание группы. Функционально соответствует описанию геообъекта. Смотрите GeoObject.
 * @param {Object=} options Опции группы. Здесь можно задавать все опции описанные в классе GeoObject. Значения опций будут применяться как к самой группе, так и к ее дочерним объектам, если для них данные опции не заданы.
 * @constructor
 * @implements {ymaps.IGeoObject}
 * @implements {ymaps.IMapObjectCollection}
 */
ymaps.GeoObjectArray = function(feature, options) {};


/**
 * Добавляет геообъект в группу.
 * @param {ymaps.IGeoObject=} child Дочерний геообъект.
 * @param {number=} index Индекс, в который добавляется новый объект. Если индекс не задан, то объект будет добавлен в конец группы.
 * @return {ymaps.GeoObjectArray}
 */
ymaps.GeoObjectArray.prototype.add = function(child, index) {};


/**
 * Перебирает все элементы группы, вызывая для каждого функцию-обработчик.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст выполнения функции.
 */
ymaps.GeoObjectArray.prototype.each = function(callback, context) {};


/**
 * Возвращает ссылку на дочерний геообъект, либо null, если объекта с заданным индексом нет в группе.
 * @param {number=} index Индекс дочернего геообъекта.
 * @return {ymaps.IGeoObject|null}
 */
ymaps.GeoObjectArray.prototype.get = function(index) {};


/**
 * Возвращает географические координаты области, охватывающей группу и все ее дочерние геообъекты.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.GeoObjectArray.prototype.getBounds = function() {};


/**
 * Возвращает итератор по группе.
 * @return {ymaps.IIterator}
 */
ymaps.GeoObjectArray.prototype.getIterator = function() {};


/**
 * Возвращает количество геообъектов в группе.
 * @return {ymaps.GeoObjectArray}
 */
ymaps.GeoObjectArray.prototype.getLength = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.GeoObjectArray.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.GeoObjectArray.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.GeoObjectArray.prototype.getParent = function() {};


/**
 * Возвращает глобальные пиксельные координаты области, охватывающей группу и все ее дочерние геообъекты.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.GeoObjectArray.prototype.getPixelBounds = function() {};


/**
 * Возвращает индекс геообъекта в группе или -1, если объект не найден.
 * @param {Object=} object Геообъект.
 * @return {number}
 */
ymaps.GeoObjectArray.prototype.indexOf = function(object) {};


/**
 * Удаляет геообъект из группы.
 * @param {ymaps.IGeoObject=} child Дочерний геообъект.
 * @return {ymaps.GeoObjectArray}
 */
ymaps.GeoObjectArray.prototype.remove = function(child) {};


/**
 * Удаляет из группы все геообъекты.
 * @return {ymaps.GeoObjectArray}
 */
ymaps.GeoObjectArray.prototype.removeAll = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.GeoObjectArray.prototype.setParent = function() {};


/**
 * Удаляет геообъекты из группы. Если необходимо, вставляет на их место другие. Объекты, которые будут вставлены вместо удаляемых, передаются как дополнительные параметры (после параметра number).
 * @param {number=} index Индекс геообъекта, с которого начинается удаление.
 * @param {number=} number Количество удаляемых геообъектов.
 * @return {Array.<ymaps.IGeoObject>}
 */
ymaps.GeoObjectArray.prototype.splice = function(index, number) {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.GeoObjectArray.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.GeoObjectArray.prototype.geometry;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.GeoObjectArray.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.GeoObjectArray.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.GeoObjectArray.prototype.state;

/**
 */
ymaps.graphics.style.stroke = function() {};


/**
 * Тире
 */
ymaps.graphics.style.stroke.prototype.dash;


/**
 * Длинное тире-короткое тире
 */
ymaps.graphics.style.stroke.prototype.dashdot;


/**
 * Точки
 */
ymaps.graphics.style.stroke.prototype.dot;


/**
 * Длинные тире
 */
ymaps.graphics.style.stroke.prototype.longdash;


/**
 * Очень длинное тире - точка
 */
ymaps.graphics.style.stroke.prototype.longdashdot;


/**
 * Длинное тире-точка-точка
 */
ymaps.graphics.style.stroke.prototype.longdashdotdot;


/**
 * Короткие тире
 */
ymaps.graphics.style.stroke.prototype.shortdash;


/**
 * Тире-точка
 */
ymaps.graphics.style.stroke.prototype.shortdashdot;


/**
 * Тире-точка-точка
 */
ymaps.graphics.style.stroke.prototype.shortdashdotdot;


/**
 * Точки через двойной интервал
 */
ymaps.graphics.style.stroke.prototype.shortdot;


/**
 * Сплошная линия
 */
ymaps.graphics.style.stroke.prototype.solid;

/**
 * @param {ymaps.hotspot.Layer=} layer Слой, на котором ведется работа с балунами.
 * @constructor
 */
ymaps.hotspot.layer.Balloon = function(layer) {};


/**
 * Закрывает балун слоя хотспотов, если он открыт на карте.
 */
ymaps.hotspot.layer.Balloon.prototype.close = function() {};


/**
 * Проверяет, открыт ли балун хотспотного слоя на карте.
 * @return {Boolean}
 */
ymaps.hotspot.layer.Balloon.prototype.isOpen = function() {};


/**
 * Открывает балун в заданной точке.
 * @param {Array.<Number>=} globalPixelPosition Пиксельные координаты точки, в которой требуется открыть балун.
 * @param {Object=} data Данные балуна.
 * @param {Object=} options Опции балуна.
 * @return {ymaps.Balloon}
 */
ymaps.hotspot.layer.Balloon.prototype.open = function(globalPixelPosition, data, options) {};

/**
 * @param {ymaps.Map=} map Ссылка на объект карты.
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 */
ymaps.Hint = function(map, data, options) {};


/**
 * Уничтожает хинт. Предварительно генерирует событие beforedestroy, при отмене которого уничтожения хинта не произойдет. После уничтожения хинта генерируется событие destroy.
 * @param {Function=} callback Функция, которая будет вызвана после уничтожения балуна. Если событие beforedestroy было отменено, в функцию первым параметром будет передано сообщение о том, что хинт не был уничтожен.
 * @param {Boolean=} urgently Скрыть хинт сразу, без временной задержки и без учета положения курсора.
 * @return {ymaps.Hint}
 */
ymaps.Hint.prototype.destroy = function(callback, urgently) {};


/**
 * Возвращает данные хинта.
 * @return {Object}
 */
ymaps.Hint.prototype.getData = function() {};


/**
 * Возвращает оверлей хинта.
 * @return {ymaps.IOverlay}
 */
ymaps.Hint.prototype.getOverlay = function() {};


/**
 * Возвращает позицию хинта.
 * @return {Array.<Number>}
 */
ymaps.Hint.prototype.getPosition = function() {};


/**
 * Скрывает хинт.
 * @param {Boolean=} urgently Скрыть хинт сразу, без временной задержки и без учета положения курсора.
 * @return {ymaps.Hint}
 */
ymaps.Hint.prototype.hide = function(urgently) {};


/**
 * Возвращает состояние хинта: открыт/скрыт.
 * @return {Boolean}
 */
ymaps.Hint.prototype.isShown = function() {};


/**
 * Устанавливает данные хинта.
 * @param {Object=} data Данные.
 * @return {ymaps.Hint}
 */
ymaps.Hint.prototype.setData = function(data) {};


/**
 * Устанавливает координаты хинта в проекции, заданной в опциях.
 * @param {Array.<Number>=} position Новая позиция.
 * @return {ymaps.Hint}
 */
ymaps.Hint.prototype.setPosition = function(position) {};


/**
 * Отображает хинт на карте в точке с заданными координатами. Если хинт уже отображен, перемещает его в указанную точку.
 * @param {Array.<Number>=} position Координаты хинта.
 * @return {ymaps.Hint}
 */
ymaps.Hint.prototype.show = function(position) {};

/**
 * @param {ymaps.IHotspotObjectSource=} objectSource Источник объектов слоя.
 * @param {Object=} options Опции слоя. Опции для балунов Balloon и хинтов Hint хотспотного слоя нужно указывать с префиксами 'balloon' и 'hint'.
 * @constructor
 * @implements {ymaps.IChildOnMap}
 * @implements {ymaps.ICustomizable}
 */
ymaps.hotspot.Layer = function(objectSource, options) {};


/**
 * Возвращает источник объектов слоя активных областей.
 * @return {ymaps.IHotspotObjectSource}
 */
ymaps.hotspot.Layer.prototype.getObjectSource = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.hotspot.Layer.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.hotspot.Layer.prototype.setParent = function() {};


/**
 * Обновляет слой активных областей. После выполнения этой команды загруженные ранее объекты удаляются из контейнера и запрашиваются новые данные.
 */
ymaps.hotspot.Layer.prototype.update = function() {};


/**
 * Объект для управления балунами слоя хотспотов.
 * @type {ymaps.hotspot.layer.Balloon}
 */
ymaps.hotspot.Layer.prototype.balloon;


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.hotspot.Layer.prototype.events;


/**
 * Пространство имен для работы с хинтами слоя хотспотов.
 * @type {ymaps.hotspot.layer.Hint}
 */
ymaps.hotspot.Layer.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.hotspot.Layer.prototype.options;

/**
 * @param {ymaps.hotspot.Layer=} layer Слой активных областей.
 * @constructor
 */
ymaps.hotspot.layer.Hint = function(layer) {};


/**
 * Скрывает хинт.
 * @param {Function=} callback Функция, которая вызывается при закрытии балуна.
 * @param {Boolean=} urgently Спрятать хинт немедленно. При значении false хинт спрячется по таймауту.
 */
ymaps.hotspot.layer.Hint.prototype.hide = function(callback, urgently) {};


/**
 * Проверяет состояние хинта на карте.
 * @return {Boolean}
 */
ymaps.hotspot.layer.Hint.prototype.isShown = function() {};


/**
 * Показывает хинт.
 * @param {Array.<Number>=} globalPixelPosition Позиция хинта в глобальных пиксельных координатах.
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @return {ymaps.Hint}
 */
ymaps.hotspot.layer.Hint.prototype.show = function(globalPixelPosition, data, options) {};

/**
 * @param {Object=} feature 
 * @param {Object=} options Данные объекта.
 * @constructor
 * @implements {ymaps.IHotspotShape}
 */
ymaps.hotspot.Shape = function(feature, options) {};


/**
 * Возвращает контейнер хотспотных шейпов. Унаследован от IHotspotShape.
 * @return {IHotspotContainer}
 */
ymaps.hotspot.Shape.prototype.getContainer = function() {};


/**
 * Метод для получения реальной геометрии объекта. Унаследован от IHotspotShape.
 * @return {Object}
 */
ymaps.hotspot.Shape.prototype.getGeometry = function() {};


/**
 * Возвращает идентификатор объекта. Унаследован от IHotspotShape.
 * @return {Number}
 */
ymaps.hotspot.Shape.prototype.getId = function() {};


/**
 * Возвращает данные объекта. Унаследован от IHotspotShape.
 * @return {Object}
 */
ymaps.hotspot.Shape.prototype.getProperties = function() {};


/**
 * Возвращает пиксельную геометрию хотспотного объекта. Унаследован от IHotspotShape.
 * @return {ymaps.IHotspotShapeGeometry}
 */
ymaps.hotspot.Shape.prototype.getRenderedGeometry = function() {};


/**
 * Метод для добавления хотспотного шейпа в контейнер. Унаследован от IHotspotShape.
 */
ymaps.hotspot.Shape.prototype.setContainer = function() {};


/**
 * Метод для задания реальной геометрии объекта. Унаследован от IHotspotShape.
 */
ymaps.hotspot.Shape.prototype.setGeometry = function() {};


/**
 */
ymaps.hotspot.Shape.prototype.setId = function() {};


/**
 */
ymaps.hotspot.Shape.prototype.setProperties = function() {};


/**
 */
ymaps.hotspot.Shape.prototype.setRenderedGeometry = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.hotspot.Shape.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.hotspot.Shape.prototype.options;

/**
 * @param {String|Function=} tileUrlTemplate Шаблон URL данных, соответствующих тайлу. Поддерживаются специальные конструкции и возможность использования функции по аналогии с Layer.
 * @param {String=} keyTemplate__Function Шаблон идентификатора тайла. Используется для формирования padding в jsonp-запросе за данными. Задается по аналогии с предыдущим параметром. Все символы, не являющиеся буквой, цифрой или символом '_', будут заменены на '_'. Если параметр не задан, то padding запроса будет сгенерирован автоматически. Примеры преобразований при tileNumber=[3, 1], zoom=9: 'myCallback=%x' - 'myCallback_3' '%c' - 'x_3_y_1_z_9' 'callback2_%c' - 'callback2_x_3_y_1_z_9' 'callback%test' - 'callback_test'
 * @param {Object=} options Опции источника данных.
 * @constructor
 * @implements {ymaps.IHotspotObjectSource}
 */
ymaps.hotspot.ObjectSource = function(tileUrlTemplate, keyTemplate__Function, options) {};


/**
 * Отменяет последний запрос за данными. Унаследован от IHotspotObjectSource.
 */
ymaps.hotspot.ObjectSource.prototype.cancelLastRequest = function() {};


/**
 * Возвращает имя callback-функции (padding) в jsonp-запросе, если оно статическое, либо null, если можно использовать динамический jsonp-callback. Шаблоны поддерживают те же подстановки, что и в шаблоне url тайла. Все символы, не являющиеся буквой, цифрой или символом '_', будут заменены на '_'.
 * @param {Array.<Number>=} tileNumber Номер тайла (тайловые координаты).
 * @param {number=} zoom Уровень масштаба.
 * @return {String}
 */
ymaps.hotspot.ObjectSource.prototype.getKey = function(tileNumber, zoom) {};


/**
 * Возвращает шаблон идентификатора тайла.
 * @return {String}
 */
ymaps.hotspot.ObjectSource.prototype.getKeyTemplate = function() {};


/**
 * Возвращает URL данных для конкретного тайла.
 * @param {Array.<Number>=} tileNumber Номер тайла (тайловые координаты).
 * @param {number=} zoom Уровень масштабирования.
 * @return {String}
 */
ymaps.hotspot.ObjectSource.prototype.getTileUrl = function(tileNumber, zoom) {};


/**
 * Возвращает шаблон URL данных для тайла.
 * @return {String}
 */
ymaps.hotspot.ObjectSource.prototype.getTileUrlTemplate = function() {};


/**
 * Разбирает ответ сервера. Возвращает в callback массив объектов-активных областей, сформированных по json-описанию.
 * @param {ymaps.hotspot.Layer=} layer Слой, которому принадлежат объекты.
 * @param {Object=} res Ответ сервера.
 * @param {Function=} callback Функция-обработчик.
 * @param {Array.<Number>=} tileNumber Номер тайла, для которого пришел ответ.
 * @param {Number=} zoom Коэффициент масштабирования, для которого пришел ответ. массива объектов.
 */
ymaps.hotspot.ObjectSource.prototype.parseResponse = function(layer, res, callback, tileNumber, zoom) {};


/**
 * Строит массив объектов IHotspotShape, соответствующих определенному слою, тайлу и коэффициенту масштабирования карты, и передает его в функцию callback. Унаследован от IHotspotObjectSource.
 */
ymaps.hotspot.ObjectSource.prototype.requestObjects = function() {};


/**
 * Метод, который вызывается перед тем, как отправить запрос за данными для тайла. Если метод возвращает true, то запрос на сервер посылаться не будет, и в качестве ответа вернется пустой массив объектов.
 * @param {ymaps.hotspot.Layer=} layer Слой активных областей.
 * @param {Array.<Number>=} tileNumber Номер тайла.
 * @param {number=} zoom Коэффициент масштабирования.
 * @return {Boolean}
 */
ymaps.hotspot.ObjectSource.prototype.restrict = function(layer, tileNumber, zoom) {};


/**
 * Задает новый шаблон идентификатора тайла.
 * @param {String=} template Шаблон идентификатора.
 */
ymaps.hotspot.ObjectSource.prototype.setKeyTemplate = function(template) {};


/**
 * Задает новый шаблон URL данных для тайла.
 * @param {String=} template Шаблон URL
 */
ymaps.hotspot.ObjectSource.prototype.setTileUrlTemplate = function(template) {};


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.hotspot.ObjectSource.prototype.options;

/**
 */
ymaps.interactivityModel.storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.interactivityModel.storage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.interactivityModel.storage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.interactivityModel.storage.prototype.remove = function() {};

/**
 * @param {ymaps.ILayer=} layer Слой.
 * @param {Object=} options Опции контейнера.
 * @constructor
 * @implements {ymaps.IChildOnMap}
 */
ymaps.layer.tileContainer.DomContainer = function(layer, options) {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.layer.tileContainer.DomContainer.prototype.getParent = function() {};


/**
 * Фабричная функция создания тайлов.
 * @param {Array.<Number>=} tileNumber Номер тайла.
 * @param {Number=} tileZoom Масштаб тайла.
 * @param {Number=} priority Приоритет загрузки.
 * @return {ymaps.IDomTile}
 */
ymaps.layer.tileContainer.DomContainer.prototype.getTile = function(tileNumber, tileZoom, priority) {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.layer.tileContainer.DomContainer.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.layer.tileContainer.DomContainer.prototype.events;

/**
 */
ymaps.layer.storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.layer.storage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.layer.storage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.layer.storage.prototype.remove = function() {};

/**
 */
ymaps.layout.Image = function() {};

/**
 * @param {String=} url URL изображения.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IDomTile}
 */
ymaps.layer.DomTile = function(url, options) {};


/**
 * Уничтожает тайл. Унаследован от IDomTile.
 */
ymaps.layer.DomTile.prototype.destroy = function() {};


/**
 * Проверяет готовность тайла. Унаследован от IDomTile.
 * @return {Boolean}
 */
ymaps.layer.DomTile.prototype.isReady = function() {};


/**
 * Добавляет тайл в родительский HTML-элемент. Унаследован от IDomTile.
 */
ymaps.layer.DomTile.prototype.renderAt = function() {};


/**
 * Менеджер событий тайла. Унаследовано от IDomTile.
 * @type {ymaps.IEventManager}
 */
ymaps.layer.DomTile.prototype.events;

/**
 * @param {String|Function=} tileUrlTemplate Строковый шаблон URL тайла или функция, которая генерирует URL тайла. Для строкового шаблона поддерживается подстановка: %c - заменяется на x=номер[0]&y=номер[1]&z=уровень масштабирования; %x - заменяется на номер[0] %y - заменяется на номер[1] %z - заменяется на уровень масштабирования %l - заменяется на lang=язык; %d или %d|n - заменяется на число от 1 до n, в зависимости от номера тайла. n - количество доменов. Используется для распределения нагрузки между несколькими доменами. В качестве n нужно указывать степени двойки (2, 4, 16 и т.д.). Если шаблон имеет вид %d, то n=4. Функция-шаблон получает на вход три параметра: tileNumber - массив из двух чисел, номера тайла по x и y; tileZoom - уровень масштабирования; Возвращает строку-URL.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.ILayer}
 * @implements {ymaps.IPositioningContext}
 */
ymaps.Layer = function(tileUrlTemplate, options) {};


/**
 * Возвращает номер тайла, в который попадает указанная точка при заданном уровне масштаба тайлов.
 * @param {Number=} clientPixelPoint Точка в клиентских пиксельных координатах.
 * @param {Number=} tileZoom Уровень масштаба тайла.
 * @return {Array.<Number>}
 */
ymaps.Layer.prototype.clientPixelsToNumber = function(clientPixelPoint, tileZoom) {};


/**
 * Преобразует клиентские пиксельные координаты в глобальные. Унаследован от IPositioningContext.
 * @return {Array.<Number>}
 */
ymaps.Layer.prototype.fromClientPixels = function() {};


/**
 * Необязательный метод. Возвращает яркость слоя. В зависимости от суммарной яркости слоев, добавленных на карту, выбирается цвет логотипа и копирайтов на карте. Унаследован от ILayer.
 * @return {Number}
 */
ymaps.Layer.prototype.getBrightness = function() {};


/**
 * Необязательный метод. Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах. Унаследован от ILayer.
 * @return {ymaps.util.Promise}
 */
ymaps.Layer.prototype.getCopyrights = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.Layer.prototype.getParent = function() {};


/**
 * Возвращает размеры тайлов в зависимости от масштаба.
 * @param {Number=} zoom Значение коэффициента мастабирования.
 * @return {Array.<Number>}
 */
ymaps.Layer.prototype.getTileSize = function(zoom) {};


/**
 * Возвращает URL тайла по его номеру и уровню масшиабирования.
 * @param {*=} tileNumber 
 * @param {*=} tileZoom 
 * @return {String}
 */
ymaps.Layer.prototype.getTileUrl = function(tileNumber, tileZoom) {};


/**
 * Возвращает строковый шаблон URL тайла или функцию, которая его генерирует.
 * @return {String|Function}
 */
ymaps.Layer.prototype.getTileUrlTemplate = function() {};


/**
 * Возвращает текущий уровень масштабирования, в котором работает контекст позиционирования. Унаследован от IPositioningContext.
 * @return {Number}
 */
ymaps.Layer.prototype.getZoom = function() {};


/**
 * Необязательный метод. Определяет доступный в указанной точке диапазон уровней масштабирования. Если данные есть, то возвращенный объект-promise будет подтвержден и передаст в качестве результата массив из двух чисел - минимальный и максимальный доступный в точке уровень масштабирования. Если данных нет, то promise отклоняется с указанием ошибки. Унаследован от ILayer.
 * @return {ymaps.util.Promise}
 */
ymaps.Layer.prototype.getZoomRange = function() {};


/**
 * Преобразует номер и уровень масштаба тайла в занимаемую тайлом область в клиентских координатах родительского контейнера.
 * @param {Array.<number>=} tileNumber Номер тайла.
 * @param {number=} tileZoom Уровень масштаба тайла.
 * @return {Array.<Array.<Number>>}
 */
ymaps.Layer.prototype.numberToClientBounds = function(tileNumber, tileZoom) {};


/**
 * Накладывает ограничения на зону видимости тайлов (в том числе зацикленность карты по осям x, y).
 * @param {Array.<number>=} number Номер тайла.
 * @param {number=} tileZoom Уровень масштабирования тайла.
 * @return {Array.<number>|null}
 */
ymaps.Layer.prototype.restrict = function(number, tileZoom) {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.Layer.prototype.setParent = function() {};


/**
 * @param {String|Function=} tileUrlTemplate Строковый шаблон URL тайла или функция, которая его генерирует.
 */
ymaps.Layer.prototype.setTileUrlTemplate = function(tileUrlTemplate) {};


/**
 * Преобразует глобальные пиксельные координаты в клиентские. Унаследован от IPositioningContext.
 * @return {Array.<Number>}
 */
ymaps.Layer.prototype.toClientPixels = function() {};


/**
 * Удаляет старые тайлы и запрашивает новые.
 */
ymaps.Layer.prototype.update = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.Layer.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.Layer.prototype.options;

/**
 * @constructor
 * @implements {ymaps.ILayer}
 * @implements {ymaps.IMapObjectCollection}
 */
ymaps.LayerCollection = function() {};


/**
 * Добавляет в коллекцию дочерний объект. Унаследован от ICollection.
 * @return {ymaps.ICollection}
 */
ymaps.LayerCollection.prototype.add = function() {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст выполнения функции.
 */
ymaps.LayerCollection.prototype.each = function(callback, context) {};


/**
 * Возвращает яркость слоя в виде числа от 0 до 1.
 * @return {Number}
 */
ymaps.LayerCollection.prototype.getBrightness = function() {};


/**
 * Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах. Если точка и коэффициент масштабирования не указаны, будут использованы центр и коэффициент масштабирования карты.
 * @param {Array.<Number>=} coords Точка на карте, для которой запрашивается информация об авторских правах.
 * @param {Number=} zoom Уровень масштабирования, для которого запрашивается информация об авторских правах.
 * @return {ymaps.util.Promise}
 */
ymaps.LayerCollection.prototype.getCopyrights = function(coords, zoom) {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.LayerCollection.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.LayerCollection.prototype.getMap = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.LayerCollection.prototype.getParent = function() {};


/**
 * Определяет доступный в указанной точке диапазон уровней масштабирования. Если данные есть, то возвращенный объект-promise будет подтвержден и передаст в качестве результата массив из двух чисел - минимальный и максимальный доступный в точке уровень масштабирования. Если данных нет, то promise отклоняется с указанием ошибки. Если у коллекции нет ни одного потомка, предоставляющего информацию о диапазоне уровней масштабирования, то promise будет отклонён с сообщением 'noProvider'.
 * @return {ymaps.util.Promise}
 */
ymaps.LayerCollection.prototype.getZoomRange = function() {};


/**
 * Удаляет из коллекции дочерний объект. Унаследован от ICollection.
 * @return {ymaps.ICollection}
 */
ymaps.LayerCollection.prototype.remove = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.LayerCollection.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.LayerCollection.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.LayerCollection.prototype.options;

/**
 */
ymaps.layout.storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.layout.storage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.layout.storage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.layout.storage.prototype.remove = function() {};

/**
 * @constructor
 * @implements {ymaps.IMapAction}
 */
ymaps.map.action.Continuous = function() {};


/**
 * Запускает движение на исполнение картой. Этот метод автоматически вызывается менеджером движений карты. С момента вызова IMapAction.begin карта слушает события IMapAction.tick и IMapAction.end и исполняет их. Унаследован от IMapAction.
 */
ymaps.map.action.Continuous.prototype.begin = function() {};


/**
 * Останавливает движение. Унаследован от IMapAction.
 */
ymaps.map.action.Continuous.prototype.end = function() {};


/**
 * Возвращает ссылку на карту, на которой выполняется действие.
 * @return {ymaps.Map}
 */
ymaps.map.action.Continuous.prototype.getMap = function() {};


/**
 * Возвращает true, если движение в данный момент исполняется картой, false в противном случае.
 * @return {Boolean}
 */
ymaps.map.action.Continuous.prototype.isActive = function() {};


/**
 * Выполняет один шаг движения карты.
 * @param {Object=} tick Параметры движения.
 * @return {ymaps.map.action.Continuous}
 */
ymaps.map.action.Continuous.prototype.tick = function(tick) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.action.Continuous.prototype.events;

/**
 */
ymaps.load = function() {};

/**
 * @param {Object=} dataSet Набор разнородных данных, на основе которых строится макет.
 * @constructor
 * @implements {ymaps.ILayout}
 */
ymaps.layout.templateBased.Base = function(dataSet) {};


/**
 * Строит экземпляр макета на основе шаблона и добавляет его в родительский HTML-элемент.
 */
ymaps.layout.templateBased.Base.prototype.build = function() {};


/**
 * Удаляет содержимое макета из DOM.
 */
ymaps.layout.templateBased.Base.prototype.clear = function() {};


/**
 * Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout.
 */
ymaps.layout.templateBased.Base.prototype.destroy = function() {};


/**
 * Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.layout.templateBased.Base.prototype.getChildContainerElement = function() {};


/**
 * Возвращает размеры и позицию относительно родителя. Унаследован от ILayout.
 * @return {Array.<Array.<Number>>}
 */
ymaps.layout.templateBased.Base.prototype.getClientBoundingRect = function() {};


/**
 * Возвращает объект данных макета. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.layout.templateBased.Base.prototype.getData = function() {};


/**
 * Возвращает родительский html-элемент. Унаследован от ILayout.
 * @return {HTMLElement}
 */
ymaps.layout.templateBased.Base.prototype.getParentElement = function() {};


/**
 * Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout.
 * @return {Boolean}
 */
ymaps.layout.templateBased.Base.prototype.isEmpty = function() {};


/**
 * Перестраивает макет.
 */
ymaps.layout.templateBased.Base.prototype.rebuild = function() {};


/**
 * Задает данные макета. Унаследован от ILayout.
 */
ymaps.layout.templateBased.Base.prototype.setData = function() {};


/**
 * Добавляет макет в DOM-дерево. Унаследован от ILayout.
 */
ymaps.layout.templateBased.Base.prototype.setParentElement = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.layout.templateBased.Base.prototype.events;

/**
 * @param {ymaps.Map=} map Карта.
 * @constructor
 * @implements {ymaps.IEventEmitter}
 */
ymaps.map.action.Manager = function(map) {};


/**
 * Запускает выполнение действия на карте. Если в этот момент на карте выполняется какое-то другое движение, то оно останавливается (вызывается метод end). Новое движение запускается посредством вызова метода begin.
 * @param {ymaps.IMapAction=} action Действие.
 */
ymaps.map.action.Manager.prototype.execute = function(action) {};


/**
 * Определяет состояние карты в момент ее плавного движения.
 * @return {Object}
 */
ymaps.map.action.Manager.prototype.getCurrentState = function() {};


/**
 * Возвращает ссылку на карту.
 * @return {ymaps.Map}
 */
ymaps.map.action.Manager.prototype.getMap = function() {};


/**
 * Останавливает выполнение действия на карте.
 */
ymaps.map.action.Manager.prototype.stop = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.action.Manager.prototype.events;

/**
 * @param {Object=} tick Параметры движения.
 * @constructor
 * @implements {ymaps.IMapAction}
 */
ymaps.map.action.Single = function(tick) {};


/**
 * Запускает движение на исполнение картой. Этот метод автоматически вызывается менеджером движений карты. С момента вызова IMapAction.begin карта слушает события IMapAction.tick и IMapAction.end и исполняет их. Унаследован от IMapAction.
 */
ymaps.map.action.Single.prototype.begin = function() {};


/**
 * Останавливает движение. Унаследован от IMapAction.
 */
ymaps.map.action.Single.prototype.end = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.action.Single.prototype.events;

/**
 * @param {ymaps.Map=} map Ссылка на объект карты.
 * @constructor
 * @implements {ymaps.IEventEmitter}
 */
ymaps.map.Balloon = function(map) {};


/**
 * Закрывает балун.
 * @param {*=} callback 
 */
ymaps.map.Balloon.prototype.close = function(callback) {};


/**
 * Проверяет состояние балуна на карте.
 * @return {Boolean}
 */
ymaps.map.Balloon.prototype.isOpen = function() {};


/**
 * Открывает балун на карте в заданной точке.
 * @param {Array.<Number>=} position Позиция балуна. Указывается в гео-координатах текущей проекции.
 * @param {Object|String=} data Данные для отображения.
 * @param {Object=} options Опции.
 * @return {ymaps.Balloon}
 */
ymaps.map.Balloon.prototype.open = function(position, data, options) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.Balloon.prototype.events;

/**
 * @param {ymaps.Map=} map Карта.
 * @param {String|Array.<String>=} behaviors Список поведений карты, включенных сразу при создании карты. По умолчанию - "drag", "dblClickZoom", "rightMouseButtonMagnifier" для настольных браузеров, "drag", "dblClickZoom" и "multiTouch" - для мобильных. Возможные значения ключей: "default" - короткий синоним для включения/отключения поведений карты по умолчанию; "drag" - перемещание карты при нажатой левой кнопке мыши либо одиночным касанием behavior.Drag; "scrollZoom" - изменение масштаба колесом мыши behavior.ScrollZoom; "dblClickZoom" - масштабирование карты двойным щелчком кнопки мыши behavior.DblClickZoom; "multiTouch" - масштабирование карты двойным касанием (например, пальцами на сенсорном экране) behavior.MultiTouch; "rightMouseButtonMagnifier" - увеличение области, выделенной правой кнопкой мыши (только для настольных браузеров), behavior.RightMouseButtonMagnifier; "leftMouseButtonMagnifier" - увеличение области, выделенной левой кнопкой мыши либо одиночным касанием, behavior.LeftMouseButtonMagnifier; "ruler" - измерение расстояния behavior.Ruler; "routeEditor" - редактор маршрутов behavior.RouteEditor; Добавлять и удалять классы поведений можно через хранилище поведений behavior.storage.
 * @param {Object=} options Опции поведений. Можно задавать следующие опции: опции поведения behavior.Drag с префиксом drag; опции поведения behavior.ScrollZoom с префиксом scrollZoom; опции поведения behavior.DblClickZoom с префиксом dblClickZoom; опции поведения behavior.MultiTouch с префиксом multiTouch; опции поведения magnifier.RightMouseButtonMagnifier, с префиксом rightMouseButtonMagnifier; опции поведения behavior.LeftMouseButtonMagnifier, с префиксом leftMouseButtonMagnifier; опции поведения behavior.Ruler с префиксом ruler.
 * @constructor
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 * @implements {ymaps.IParentOnMap}
 */
ymaps.map.behavior.Manager = function(map, behaviors, options) {};


/**
 * Отключает поведения на карте.
 * @param {String|Array.<String>=} behaviors Список отключаемых поведений.
 * @return {ymaps.map.behavior.Manager}
 */
ymaps.map.behavior.Manager.prototype.disable = function(behaviors) {};


/**
 * Включает поведения на карте.
 * @param {String|Array.<String>=} behaviors Список подключаемых поведений.
 * @return {ymaps.map.behavior.Manager}
 */
ymaps.map.behavior.Manager.prototype.enable = function(behaviors) {};


/**
 * Возвращает экземпляр поведения по ключу.
 * @param {String=} behaviorName Имя поведения.
 * @return {ymaps.IBehavior}
 */
ymaps.map.behavior.Manager.prototype.get = function(behaviorName) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.map.behavior.Manager.prototype.getMap = function() {};


/**
 * Проверяет, включено ли в настоящий момент поведение.
 * @param {String=} behaviorName Идентификатор поведения.
 * @return {Boolean}
 */
ymaps.map.behavior.Manager.prototype.isEnabled = function(behaviorName) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.behavior.Manager.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.map.behavior.Manager.prototype.options;

/**
 * @param {String|HTMLElement=} parentElement HTML-элемент, в котором будет создана карта или его id.
 * @constructor
 * @implements {ymaps.IEventEmitter}
 */
ymaps.map.Container = function(parentElement) {};


/**
 * Вызывается при изменении размера контейнера карты для того, чтобы карта применила новый размер.
 * @param {Boolean=} preservePixelPosition Сохранять положение центра карты.
 */
ymaps.map.Container.prototype.fitToViewport = function(preservePixelPosition) {};


/**
 * Возвращает HTML-элемент карты.
 * @return {HTMLElement}
 */
ymaps.map.Container.prototype.getElement = function() {};


/**
 * Возвращает смещение контейнера карты в пикселях относительно левого верхнего угла документа.
 * @return {Array.<Number>}
 */
ymaps.map.Container.prototype.getOffset = function() {};


/**
 * Возвращает размеры контейнера карты в пикселях.
 * @return {Array.<Number>}
 */
ymaps.map.Container.prototype.getSize = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.Container.prototype.events;

/**
 * @param {ymaps.Map=} map Ссылка на объект карты.
 * @param {Array.<String>|Array.<ymaps.IControl>=} controls Элементы управления, заданные экземплярами классов, реализующих интерфейс IControl либо ключами. Возможные значения ключей: "mapTools" - стандартный тулбар с кнопками "Навигация", "Выделение" и "Линейка" control.MapTools; "miniMap" - обзорная карта control.MiniMap; "scaleLine" - масштабный отрезок control.ScaleLine; "searchControl" - панель поиска control.SearchControl; "trafficControl" - панель пробок control.TrafficControl; "typeSelector" - панель переключения типа карты control.TypeSelector; "zoomControl" - ползунок масштаба control.ZoomControl; "smallZoomControl" - простой ползунок масштаба control.SmallZoomControl.
 * @constructor
 * @implements {ymaps.IMapObjectCollection}
 */
ymaps.map.control.Manager = function(map, controls) {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст выполнения функции.
 */
ymaps.map.control.Manager.prototype.each = function(callback, context) {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.map.control.Manager.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.map.control.Manager.prototype.getMap = function() {};


/**
 * Удаляет элемент управления с карты.
 * @param {ymaps.IControl|String=} control Элемент управления или его ключ.
 * @return {ymaps.map.control.Manager}
 */
ymaps.map.control.Manager.prototype.remove = function(control) {};


/**
 * Добавляет элемент управления на карту.
 * @type {ymaps.map.control.Manager}
 */
ymaps.map.control.Manager.prototype.add;


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.control.Manager.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.map.control.Manager.prototype.options;

/**
 * @param {ymaps.Map=} map Ссылка на карту.
 * @constructor
 */
ymaps.map.Converter = function(map) {};


/**
 * Преобразовывает глобальные пиксельные координаты точки в локальные.
 * @param {Array.<Number>=} globalPixelPoint Пиксельные координаты точки, которые необходимо преобразовать.
 * @return {Array.<Number>}
 */
ymaps.map.Converter.prototype.globalToPage = function(globalPixelPoint) {};


/**
 * Преобразовывает локальные пиксельные координаты точки в глобальные.
 * @param {Array.<Number>=} pagePixelPoint Пиксельные координаты точки, которые необходимо преобразовать.
 * @return {Array.<Number>}
 */
ymaps.map.Converter.prototype.pageToGlobal = function(pagePixelPoint) {};

/**
 * @param {ymaps.Map=} map Карта.
 * @constructor
 * @implements {ymaps.IEventEmitter}
 */
ymaps.map.Copyrights = function(map) {};


/**
 * Добавляет на карту статическую (не зависящую от текущего центра и масштаба карты) информацию об авторских правах.
 * @param {String|HTMLElement|Array.<String>|Array.<HTMLElement>=} customCopyrights Информация об авторских правах в виде строки, DOM-элемента либо массива строк/DOM-элементов.
 * @return {ymaps.ICopyrightsAccessor}
 */
ymaps.map.Copyrights.prototype.add = function(customCopyrights) {};


/**
 * Добавляет нового провайдера информации об авторских правах.
 * @param {ymaps.ICopyrightsProvider=} provider Провайдер.
 * @return {ymaps.map.Copyrights}
 */
ymaps.map.Copyrights.prototype.addProvider = function(provider) {};


/**
 * Определяет информацию об авторских правах в указанной точке. Возвращает объект-promise, который будет подтверждён и передаст в качестве параметра массив строк/DOM-элементов.
 * @param {Array.<Number>=} point Точка (в географических координатах), для которой требуется определить информацию об авторских правах. Если не указана, берётся текущий центр карты.
 * @param {Number=} zoom Уровень масштабирования, для которого требуется определить информацию об авторских правах. Если не указан, берётся текущий уровень масштабирования карты.
 * @return {ymaps.util.Promise}
 */
ymaps.map.Copyrights.prototype.get = function(point, zoom) {};


/**
 * Удаляет провайдера информации об авторских правах.
 * @param {ymaps.ICopyrightsProvider=} provider Провайдер.
 * @return {ymaps.map.Copyrights}
 */
ymaps.map.Copyrights.prototype.removeProvider = function(provider) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.Copyrights.prototype.events;

/**
 * @param {ymaps.Map=} map Карта
 * @param {Object=} options Опции геообъектов. Через опции map.geoObjects можно задавать настройки геообъектов, добавленных на карту: опции кластеризаторов с префиксом clusterer; опции кластеров с префиксом cluster;
 * @constructor
 * @implements {ymaps.IMapObjectCollection}
 */
ymaps.map.GeoObjects = function(map, options) {};


/**
 * Добавляет в коллекцию дочерний объект. Унаследован от ICollection.
 * @return {ymaps.ICollection}
 */
ymaps.map.GeoObjects.prototype.add = function() {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст выполнения функции.
 */
ymaps.map.GeoObjects.prototype.each = function(callback, context) {};


/**
 * Возвращает географические координаты области, охватывающей все геообъекты.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.map.GeoObjects.prototype.getBounds = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.map.GeoObjects.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.map.GeoObjects.prototype.getMap = function() {};


/**
 * Возвращает глобальные пиксельные координаты области, охватывающей все геообъекты.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.map.GeoObjects.prototype.getPixelBounds = function() {};


/**
 * Удаляет из коллекции дочерний объект. Унаследован от ICollection.
 * @return {ymaps.ICollection}
 */
ymaps.map.GeoObjects.prototype.remove = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.GeoObjects.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.map.GeoObjects.prototype.options;

/**
 * @param {ymaps.Map=} map Ссылка на объект карты.
 * @constructor
 * @implements {ymaps.IEventEmitter}
 */
ymaps.map.Hint = function(map) {};


/**
 * Скрывает всплывающую подсказку.
 * @param {*=} callback 
 * @param {*=} urgently 
 */
ymaps.map.Hint.prototype.hide = function(callback, urgently) {};


/**
 * Проверяет состояние подсказки.
 * @return {Boolean}
 */
ymaps.map.Hint.prototype.isShown = function() {};


/**
 * Показывает хинт на карте в заданной точке.
 * @param {Array.<Number>=} position Позиция привязки подсказки.
 * @param {Object|String=} data Данные для отображения.
 * @param {Object=} options Опции хинта.
 * @return {ymaps.Hint}
 */
ymaps.map.Hint.prototype.show = function(position, data, options) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.Hint.prototype.events;

/**
 * @param {ymaps.Map=} map Карта.
 * @constructor
 */
ymaps.map.pane.Manager = function(map) {};


/**
 * Возвращает контейнер карты с соответствующим ключом. Список ключей и контейнеров карты: 'controls': IPane - контейнер элементов управлениия карты; 'events': IPane - контейнер, на котором слушаются события карты; 'floats': IPane - контейнер элементов (например, хинтов), размещенных на карте; 'graphics': IPane - контейнер графики; 'layers': IPane - контейнер слоев карты; 'outers': IPane - контейнер элементов (например, хинтов), выступающих за границы карты; 'overlays': IPane - контейнер геообъектов карты; 'shadows': IPane - контейнер для размещения макетов теней объектов карты .
 * @param {String=} key Ключ.
 * @return {ymaps.IPane}
 */
ymaps.map.pane.Manager.prototype.get = function(key) {};

/**
 * @param {ymaps.Map=} map Карта
 * @param {Object=} options Опции слоев карты. Через опции map.layers можно задавать настройки слоев, добавленных на карту. Опции слоев хотспотов задаются с префиксом 'hotspotLayer'.
 * @constructor
 * @implements {ymaps.ILayer}
 * @implements {ymaps.IMapObjectCollection}
 */
ymaps.map.layer.Manager = function(map, options) {};


/**
 * Добавляет в коллекцию дочерний объект. Унаследован от ICollection.
 * @return {ymaps.ICollection}
 */
ymaps.map.layer.Manager.prototype.add = function() {};


/**
 * Перебирает все элементы коллекции, вызывая для каждого функцию-обработчик.
 * @param {Function=} callback Функция-обработчик.
 * @param {Object=} context Контекст выполнения функции.
 */
ymaps.map.layer.Manager.prototype.each = function(callback, context) {};


/**
 * Необязательный метод. Возвращает яркость слоя. В зависимости от суммарной яркости слоев, добавленных на карту, выбирается цвет логотипа и копирайтов на карте. Унаследован от ILayer.
 * @return {Number}
 */
ymaps.map.layer.Manager.prototype.getBrightness = function() {};


/**
 * Необязательный метод. Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах. Унаследован от ILayer.
 * @return {ymaps.util.Promise}
 */
ymaps.map.layer.Manager.prototype.getCopyrights = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.map.layer.Manager.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.map.layer.Manager.prototype.getMap = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.map.layer.Manager.prototype.getParent = function() {};


/**
 * Необязательный метод. Определяет доступный в указанной точке диапазон уровней масштабирования. Если данные есть, то возвращенный объект-promise будет подтвержден и передаст в качестве результата массив из двух чисел - минимальный и максимальный доступный в точке уровень масштабирования. Если данных нет, то promise отклоняется с указанием ошибки. Унаследован от ILayer.
 * @return {ymaps.util.Promise}
 */
ymaps.map.layer.Manager.prototype.getZoomRange = function() {};


/**
 * Удаляет из коллекции дочерний объект. Унаследован от ICollection.
 * @return {ymaps.ICollection}
 */
ymaps.map.layer.Manager.prototype.remove = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.map.layer.Manager.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.layer.Manager.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.map.layer.Manager.prototype.options;

/**
 * @param {Object=} originalEvent Данные, связанные с событием.
 * @param {ymaps.Map=} map Карта, над которой произошло событие.
 * @constructor
 * @extends {ymaps.Event}
 */
ymaps.MapEvent = function(originalEvent, map) {};


/**
 * Вызывает указанный метод. Операция эквивалентна поиску поля через get и вызову с передачей в качестве контекста originalEvent. Все аргументы после первого передаются в качестве параметров вызываемому методу. Унаследован от Event.
 * @return {Object}
 */
ymaps.MapEvent.prototype.callMethod = function() {};


/**
 * Возвращает значение поля из originalEvent. originalEvent всегда имеет следующие поля: type - строковый тип события; target - ссылка на объект, породивший событие. Унаследован от Event.
 * @return {Object}
 */
ymaps.MapEvent.prototype.get = function() {};


/**
 * Возвращает карту, над которой произошло событие.
 * @return {ymaps.Map}
 */
ymaps.MapEvent.prototype.getMap = function() {};


/**
 * Проверяет, отменена ли реакция по умолчанию на событие в рамках системы событий API Яндекс.Карт. Унаследован от Event.
 * @return {Boolean}
 */
ymaps.MapEvent.prototype.isDefaultPrevented = function() {};


/**
 * Определяет, прекращено ли распространение события в системе событий API Яндекс.Карт. Унаследован от Event.
 * @return {Boolean}
 */
ymaps.MapEvent.prototype.isImmediatePropagationStopped = function() {};


/**
 * Проверяет, остановлено ли распространение события по иерархии объектов и коллекций в системе событий API Яндекс.Карт. Унаследован от Event.
 * @return {Boolean}
 */
ymaps.MapEvent.prototype.isPropagationStopped = function() {};


/**
 * Отменяет реакцию по умолчанию на событие в рамках системы событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву. Унаследован от Event.
 */
ymaps.MapEvent.prototype.preventDefault = function() {};


/**
 * Прекращает распространение события в системе событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву. Унаследован от Event.
 */
ymaps.MapEvent.prototype.stopImmediatePropagation = function() {};


/**
 * Прекращает распространение события по иерархии объектов и коллекций в системе событий API Яндекс.Карт. Вызов этого метода никак не влияет на распространение исходного DOM-события (если оно есть) по DOM-дереву. Унаследован от Event.
 */
ymaps.MapEvent.prototype.stopPropagation = function() {};

/**
 * @param {ymaps.Map=} map Карта.
 * @param {Array.<Number>=} constraints Массив, содержащий минимальный и максимальный зум карты.
 * @constructor
 * @implements {ymaps.IEventEmitter}
 */
ymaps.map.ZoomRange = function(map, constraints) {};


/**
 * Определяет доступный в указанной точке диапазон уровней масштабирования. Возвращает объект-promise, который будет подтверждён и получит в качестве параметра массив из двух чисел - максимальный и минимальный уровень масштабирования в данной точке.
 * @return {ymaps.util.Promise}
 */
ymaps.map.ZoomRange.prototype.get = function() {};


/**
 * Возвращает текущее (последнее полученное) значение минимального и максимального уровня масштабирования карты.
 * @return {Array.<Number>}
 */
ymaps.map.ZoomRange.prototype.getCurrent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.map.ZoomRange.prototype.events;

/**
 * @param {Object|String=} element Ссылка на HTML-элемент, в котором размещается карта, или идентификатор этого HTML-элемента.
 * @param {Object=} state Параметры карты.
 * @param {Object=} options Опции карты. Через опции карты можно задавать настройки как самой карты, так и добавленных на неё объектов: опции поведений карты; опции балуна карты с префиксом balloon; опции хинта карты с префиксом hint; опции гео-объектов с префиксом geoObject; опции слоев с префиксом layer; опции слоев хотспотов с префиксом hotspotLayer; Опции, которые трактует непосредственно сама карта, перечислены ниже.
 * @constructor
 * @implements {ymaps.IDomEventEmitter}
 */
ymaps.Map = function(element, state, options) {};


/**
 * Уничтожает карту.
 */
ymaps.Map.prototype.destroy = function() {};


/**
 * Возвращает двумерный массив геокоординат левого нижнего и правого верхнего углов области показа карты.
 * @return {Array.<Array.<Number>>}
 */
ymaps.Map.prototype.getBounds = function() {};


/**
 * Возвращает географические координаты текущего центра карты.
 * @return {Array.<Number>}
 */
ymaps.Map.prototype.getCenter = function() {};


/**
 * Возвращает глобальные пиксельные координаты текущего центра карты.
 * @return {Array.<Number>}
 */
ymaps.Map.prototype.getGlobalPixelCenter = function() {};


/**
 * Возвращает текущий тип карты.
 * @return {String|ymaps.MapType}
 */
ymaps.Map.prototype.getType = function() {};


/**
 * Возвращает текущий коэффициент масштабирования карты.
 * @return {Number}
 */
ymaps.Map.prototype.getZoom = function() {};


/**
 * Устанавливает центр карты. Если передан массив точек, то карта будет перемещаться от одной точки к другой.
 * @param {Array.<Number>|Array.<Object>=} center Центр карты или массив точек для последовательного обхода.
 * @param {Object=} options Опции.
 * @return {ymaps.Map}
 */
ymaps.Map.prototype.panTo = function(center, options) {};


/**
 * Позиционирует карту для показа переданного района.
 * @param {Array.<Array.<Number>>=} bounds Границы области показа.
 * @param {Object=} options Опции.
 * @return {ymaps.Map}
 */
ymaps.Map.prototype.setBounds = function(bounds, options) {};


/**
 * Устанавливает центр и коэффициент масштабирования карты. Центр задается в географических координатах.
 * @param {Array.<Number>=} center Геокоординаты центра карты.
 * @param {Number=} zoom Коэффициент масштабирования карты.
 * @param {Object=} options Опции карты.
 * @return {ymaps.Map}
 */
ymaps.Map.prototype.setCenter = function(center, zoom, options) {};


/**
 * Устанавливает центр и коэффициент масштабирования карты. Центр задается в глобальных пиксельных координатах.
 * @param {Array.<Number>=} globalPixelCenter Пиксельные координаты нового центра карты.
 * @param {Number=} zoom Коэффициент масштабирования карты.
 * @param {Object=} options Опции.
 * @return {ymaps.Map}
 */
ymaps.Map.prototype.setGlobalPixelCenter = function(globalPixelCenter, zoom, options) {};


/**
 * Устанавливает тип карты.
 * @param {String|ymaps.MapType=} type Тип карты. Может быть ключом или или экземпляром класса MapType. Список доступных ключей: <ul> <li>'yandex#map' - тип карты "схема";</li> <li>'yandex#satellite' - тип карты "спутник";</li> <li>'yandex#hybrid' - тип карты "гибрид";</li> <li>'yandex#publicMap' - тип карты "народная карта";</li> <li>'yandex#publicMapHybrid' - тип карты "народный гибрид".</li> </ul> Ключи 'yandex#publicMap' и 'yandex#publicMapHybrid' доступны только для России и Украины.
 * @return {ymaps.Map}
 */
ymaps.Map.prototype.setType = function(type) {};


/**
 * Устанавливает коэффициент масштабирования карты.
 * @param {Number=} zoom Коэффициент масштабирования карты.
 * @param {Object=} options Опции.
 * @return {ymaps.Map}
 */
ymaps.Map.prototype.setZoom = function(zoom, options) {};


/**
 * Менеджер действий карты.
 * @type {ymaps.map.action.Manager}
 */
ymaps.Map.prototype.action;


/**
 * Балун карты.
 * @type {ymaps.map.Balloon}
 */
ymaps.Map.prototype.balloon;


/**
 * Менеджер поведений карты. Позволяет включать и выключать поведения, а также предоставляет доступ к их методам и свойствам.
 * @type {ymaps.map.behavior.Manager}
 */
ymaps.Map.prototype.behaviors;


/**
 * Контейнер карты.
 * @type {ymaps.map.Container}
 */
ymaps.Map.prototype.container;


/**
 * Элементы управления картой.
 * @type {ymaps.map.control.Manager}
 */
ymaps.Map.prototype.controls;


/**
 * Преобразователь пиксельных точек карты из глобальных в локальные и наоборот.
 * @type {ymaps.map.Converter}
 */
ymaps.Map.prototype.converter;


/**
 * Менеджер размещённой на карте информации об авторских правах.
 * @type {ymaps.map.Copyrights}
 */
ymaps.Map.prototype.copyrights;


/**
 * Менеджер курсоров карты.
 * @type {util.CursorManager}
 */
ymaps.Map.prototype.cursors;


/**
 * Менеджер событий карты. Поддерживает подписку с приоритетами. Бросает события типа MapEvent.
 * @type {ymaps.event.PriorityManager}
 */
ymaps.Map.prototype.events;


/**
 * Менеджер геообъектов карты.
 * @type {ymaps.map.GeoObjects}
 */
ymaps.Map.prototype.geoObjects;


/**
 * Хинт карты.
 * @type {ymaps.map.Hint}
 */
ymaps.Map.prototype.hint;


/**
 * Менеджер слоёв карты.
 * @type {ymaps.map.layer.Manager}
 */
ymaps.Map.prototype.layers;


/**
 * Опции карты.
 * @type {ymaps.option.Manager}
 */
ymaps.Map.prototype.options;


/**
 * Менеджер контейнеров объектов карты.
 * @type {ymaps.map.pane.Manager}
 */
ymaps.Map.prototype.panes;


/**
 * Объект, предоставляющий доступ к информации о доступных в точке уровнях масштабирования.
 * @type {ymaps.map.ZoomRange}
 */
ymaps.Map.prototype.zoomRange;

/**
 * @param {String=} name Название типа.
 * @param {Array.<Function>|Array.<String>=} layers Массив, содержащий конструкторы слоев или ключи.
 * @constructor
 */
ymaps.MapType = function(name, layers) {};


/**
 * Возвращает список слоев данного типа карты - массив конструкторов или ключей для слоев.
 * @return {Array.<Function>|Array.<String>}
 */
ymaps.MapType.prototype.getLayers = function() {};


/**
 * Возвращает название типа карты.
 * @param {*=} map 
 * @return {String}
 */
ymaps.MapType.prototype.getName = function(map) {};

/**
 */
ymaps.mapType.storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.mapType.storage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.mapType.storage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.mapType.storage.prototype.remove = function() {};

/**
 * @param {ymaps.IDataManager|ymaps.IOptionManager=} dataManager Менеджер данных.
 * @constructor
 */
ymaps.Monitor = function(dataManager) {};


/**
 * Включает наблюдение за определенным полем, либо группой полей данных.
 * @param {String|Array.<String>=} name Имя, либо массив имен полей данных, за которыми устанавливается наблюдение.
 * @param {Function=} changeCallback Обработчик изменения поля данных, либо одного из полей данных группы.
 * @param {Object=} context Контекст исполнения обработчика изменений данных, а также опциональных обработчиков.
 * @param {Object=} params Опциональные параметры.
 * @return {ymaps.Monitor}
 */
ymaps.Monitor.prototype.add = function(name, changeCallback, context, params) {};


/**
 * Инициирует проверку изменения значений наблюдаемых полей данных.
 * @return {ymaps.Monitor}
 */
ymaps.Monitor.prototype.forceChange = function() {};


/**
 * Возвращает текущее значение одного из наблюдаемых полей данных.
 * @param {String=} name Имя поля данных.
 * @return {Object}
 */
ymaps.Monitor.prototype.get = function(name) {};


/**
 * Отключает наблюдение за определенным полем, либо группой полей данных.
 * @param {String|Array.<String>=} name Имя, либо массив имен полей данных, для которых отключается наблюдение.
 * @return {ymaps.Monitor}
 */
ymaps.Monitor.prototype.remove = function(name) {};


/**
 * Отключает наблюдение для всех полей данных.
 * @return {ymaps.Monitor}
 */
ymaps.Monitor.prototype.removeAll = function() {};

/**
 * @param {Object=} options Хэш опций.
 * @param {ymaps.IOptionManager=} parent Родительский менеджер опций.
 * @param {String=} name Имя менеджера опций.
 * @constructor
 * @implements {ymaps.IOptionManager}
 */
ymaps.option.Manager = function(options, parent, name) {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.option.Manager.prototype.freeze = function() {};


/**
 * Возвращает значение заданной опции в контексте существующей иерархии наследования опций. При вызове данного метода сначала происходит поиск значения в текущем менеджере опций, а затем, если значение не определено, поиск продолжается в иерархии родительских менеджеров. Унаследован от IOptionManager.
 */
ymaps.option.Manager.prototype.get = function() {};


/**
 * Возвращает ссылку на внутренний хэш хранящий значения опций. Унаследован от IOptionManager.
 * @return {Object}
 */
ymaps.option.Manager.prototype.getAll = function() {};


/**
 * Возвращает имя менеджера опций. Унаследован от IOptionManager.
 * @return {String}
 */
ymaps.option.Manager.prototype.getName = function() {};


/**
 * Возвращает значение заданной опции, определенное на данном уровне иерархии опций, т.е. в данном менеджере. Унаследован от IOptionManager.
 * @return {Object}
 */
ymaps.option.Manager.prototype.getNative = function() {};


/**
 * Возвращает родительский менеджер опций. Унаследован от IOptionManager.
 * @return {ymaps.IOptionManager|null}
 */
ymaps.option.Manager.prototype.getParent = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.option.Manager.prototype.isFrozen = function() {};


/**
 * Метод, предназначенный для вызова дочерними менеджерами опций. Унаследован от IOptionManager.
 * @return {Object}
 */
ymaps.option.Manager.prototype.resolve = function() {};


/**
 * Задает значения опций для данного менеджера. Поддерживаются две сигнатуры: один аргумент, представляющий собой хеш вида {"имя опции": "значение опции"}; два аргумента, первый из которых - имя опции, второй - значение.
 * @param {Object|String=} key Имя опции, либо хеш вида {"имя опции": "значение опции"}.
 * @param {Object=} value Значение опции, если в качестве первого аргумента было передано имя.
 * @return {ymaps.option.Manager}
 */
ymaps.option.Manager.prototype.set = function(key, value) {};


/**
 * Задает имя менеджера опций. Унаследован от IOptionManager.
 */
ymaps.option.Manager.prototype.setName = function() {};


/**
 * Задает родительский менеджер опций. Унаследован от IOptionManager.
 * @return {ymaps.IChild}
 */
ymaps.option.Manager.prototype.setParent = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.option.Manager.prototype.unfreeze = function() {};


/**
 * Стирает значения заданных опций в данном менеджере.
 * @param {String|Array.<String>=} key Имя опции или массив имен опций, значения которых должны быть аннулированы.
 * @return {ymaps.option.Manager}
 */
ymaps.option.Manager.prototype.unset = function(key) {};


/**
 * Стирает значения всех опции в данном менеджере.
 * @return {ymaps.option.Manager}
 */
ymaps.option.Manager.prototype.unsetAll = function() {};


/**
 * Менеджер событий объекта. Унаследовано от IFreezable.
 * @type {ymaps.IEventManager}
 */
ymaps.option.Manager.prototype.events;

/**
 * @param {ymaps.IPixelGeometry=} geometry Пиксельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.hotspot.Base = function(geometry, data, options) {};


/**
 * Возвращает новая пиксельная геометрия для хотспота.
 * @param {ymaps.IPixelGeometry=} geometry Пиксельная геометрия.
 * @param {ymaps.IDataManager=} data Менеджер данных.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Base.prototype.createHotspotGeometry = function(geometry, data) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.hotspot.Base.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Base.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.hotspot.Base.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Base.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Base.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Base.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.hotspot.Base.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.hotspot.Base.prototype.options;

/**
 */
ymaps.option.presetStorage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.option.presetStorage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.option.presetStorage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.option.presetStorage.prototype.remove = function() {};

/**
 * @constructor
 * @extends {ymaps.overlay.hotspot.Base}
 */
ymaps.overlay.hotspot.Placemark = function() {};


/**
 * Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Placemark.prototype.createHotspotGeometry = function() {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.hotspot.Placemark.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Placemark.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.hotspot.Placemark.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Placemark.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Placemark.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Placemark.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.hotspot.Placemark.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.hotspot.Placemark.prototype.options;

/**
 * @constructor
 * @extends {ymaps.overlay.hotspot.Base}
 */
ymaps.overlay.hotspot.Circle = function() {};


/**
 * Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Circle.prototype.createHotspotGeometry = function() {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.hotspot.Circle.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Circle.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.hotspot.Circle.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Circle.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Circle.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Circle.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.hotspot.Circle.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.hotspot.Circle.prototype.options;

/**
 * @constructor
 * @extends {ymaps.overlay.hotspot.Base}
 */
ymaps.overlay.hotspot.Polygon = function() {};


/**
 * Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Polygon.prototype.createHotspotGeometry = function() {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.hotspot.Polygon.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Polygon.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.hotspot.Polygon.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Polygon.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Polygon.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Polygon.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.hotspot.Polygon.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.hotspot.Polygon.prototype.options;

/**
 * @constructor
 * @extends {ymaps.overlay.hotspot.Base}
 */
ymaps.overlay.hotspot.Rectangle = function() {};


/**
 * Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Rectangle.prototype.createHotspotGeometry = function() {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.hotspot.Rectangle.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Rectangle.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.hotspot.Rectangle.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Rectangle.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Rectangle.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Rectangle.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.hotspot.Rectangle.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.hotspot.Rectangle.prototype.options;

/**
 * @constructor
 * @extends {ymaps.overlay.hotspot.Base}
 */
ymaps.overlay.hotspot.Polyline = function() {};


/**
 * Возвращает новая пиксельная геометрия для хотспота. Унаследован от overlay.hotspot.Base.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Polyline.prototype.createHotspotGeometry = function() {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.hotspot.Polyline.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.hotspot.Polyline.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.hotspot.Polyline.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Polyline.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Polyline.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.hotspot.Polyline.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.hotspot.Polyline.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.hotspot.Polyline.prototype.options;

/**
 * @param {ymaps.IPixelPointGeometry=} geometry Пикcельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.html.Label = function(geometry, data, options) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.html.Label.prototype.getData = function() {};


/**
 * Возвращает родительский элемент макета хинта.
 * @return {HTMLElement}
 */
ymaps.overlay.html.Label.prototype.getElement = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.html.Label.prototype.getGeometry = function() {};


/**
 * Возвращает макет хинта.
 * @return {ymaps.ILayout}
 */
ymaps.overlay.html.Label.prototype.getLayout = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.html.Label.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.html.Label.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.html.Label.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.html.Label.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.html.Label.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.html.Label.prototype.options;

/**
 * @param {ymaps.IPixelPointGeometry=} geometry Пиксельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.html.Balloon = function(geometry, data, options) {};


/**
 * Возвращает родительский элемент макета балуна.
 * @return {HTMLElement}
 */
ymaps.overlay.html.Balloon.prototype.getBalloonElement = function() {};


/**
 * Возвращает макет балуна.
 * @return {ymaps.ILayout}
 */
ymaps.overlay.html.Balloon.prototype.getBalloonLayout = function() {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.html.Balloon.prototype.getData = function() {};


/**
 * Возвращает родительский элемент макета балуна.
 * @return {HTMLElement}
 */
ymaps.overlay.html.Balloon.prototype.getElement = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.html.Balloon.prototype.getGeometry = function() {};


/**
 * Возвращает макет балуна.
 * @return {ymaps.ILayout}
 */
ymaps.overlay.html.Balloon.prototype.getLayout = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.html.Balloon.prototype.getMap = function() {};


/**
 * Возвращает родительский элемент макета тени балуна.
 * @return {HTMLElement}
 */
ymaps.overlay.html.Balloon.prototype.getShadowElement = function() {};


/**
 * Возвращает макет тени балуна.
 * @return {ymaps.ILayout}
 */
ymaps.overlay.html.Balloon.prototype.getShadowLayout = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.html.Balloon.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.html.Balloon.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.html.Balloon.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.html.Balloon.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.html.Balloon.prototype.options;

/**
 * @param {ymaps.IPixelPointGeometry=} geometry Пикcельная геометрия.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.html.Placemark = function(geometry, data, options) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.html.Placemark.prototype.getData = function() {};


/**
 * Возвращает родительский элемент макета иконки.
 * @return {HTMLElement}
 */
ymaps.overlay.html.Placemark.prototype.getElement = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.html.Placemark.prototype.getGeometry = function() {};


/**
 * Возвращает родительский элемент макета иконки.
 * @return {HTMLElement}
 */
ymaps.overlay.html.Placemark.prototype.getIconElement = function() {};


/**
 * Возвращает макет иконки.
 * @return {ymaps.ILayout}
 */
ymaps.overlay.html.Placemark.prototype.getIconLayout = function() {};


/**
 * Возвращает макет иконки.
 * @return {ymaps.ILayout}
 */
ymaps.overlay.html.Placemark.prototype.getLayout = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.html.Placemark.prototype.getMap = function() {};


/**
 * Возвращает родительский элемент макета тени иконки.
 * @return {HTMLElement}
 */
ymaps.overlay.html.Placemark.prototype.getShadowElement = function() {};


/**
 * Возвращает макет тени иконки.
 * @return {ymaps.ILayout}
 */
ymaps.overlay.html.Placemark.prototype.getShadowLayout = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.html.Placemark.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.html.Placemark.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.html.Placemark.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.html.Placemark.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.html.Placemark.prototype.options;

/**
 * @param {ymaps.IPixelCircleGeometry=} geometry Пиксельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции. Содержит в себе без префиксов опции overlay.hotspot.Circle и overlay.staticGraphics.Circle
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.interactiveGraphics.Circle = function(geometry, data, options) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.interactiveGraphics.Circle.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.interactiveGraphics.Circle.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.interactiveGraphics.Circle.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Circle.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Circle.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Circle.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.interactiveGraphics.Circle.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.interactiveGraphics.Circle.prototype.options;

/**
 * @param {ymaps.IPixelRectangleGeometry=} geometry Пикcельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.html.Rectangle = function(geometry, data, options) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.html.Rectangle.prototype.getData = function() {};


/**
 * Возвращает родительский элемент макета прямоугольника.
 * @return {HTMLElement}
 */
ymaps.overlay.html.Rectangle.prototype.getElement = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.html.Rectangle.prototype.getGeometry = function() {};


/**
 * Возвращает макет прямоугольника.
 * @return {ymaps.ILayout}
 */
ymaps.overlay.html.Rectangle.prototype.getLayout = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.html.Rectangle.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.html.Rectangle.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.html.Rectangle.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.html.Rectangle.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.html.Rectangle.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.html.Rectangle.prototype.options;

/**
 * @param {ymaps.IPixelPointGeometry=} geometry Пиксельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции. Содержит в себе без префиксов опции overlay.hotspot.Polygon и overlay.staticGraphics.CanvasPlacemark
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.interactiveGraphics.Placemark = function(geometry, data, options) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.interactiveGraphics.Placemark.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.interactiveGraphics.Placemark.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.interactiveGraphics.Placemark.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Placemark.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Placemark.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Placemark.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.interactiveGraphics.Placemark.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.interactiveGraphics.Placemark.prototype.options;

/**
 * @param {ymaps.IPixelLineStringGeometry=} geometry Пикcельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции. Содержит в себе без префиксов опции overlay.hotspot.Polyline и overlay.staticGraphics.Polyline
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.interactiveGraphics.Polyline = function(geometry, data, options) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.interactiveGraphics.Polyline.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.interactiveGraphics.Polyline.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.interactiveGraphics.Polyline.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Polyline.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Polyline.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Polyline.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.interactiveGraphics.Polyline.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.interactiveGraphics.Polyline.prototype.options;

/**
 * @param {ymaps.IPixelPolygonGeometry=} geometry Пикcельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции. Содержит в себе без префиксов опции overlay.hotspot.Polygon и overlay.staticGraphics.Polygon
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.interactiveGraphics.Polygon = function(geometry, data, options) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.interactiveGraphics.Polygon.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.interactiveGraphics.Polygon.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.interactiveGraphics.Polygon.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Polygon.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Polygon.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Polygon.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.interactiveGraphics.Polygon.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.interactiveGraphics.Polygon.prototype.options;

/**
 * @param {ymaps.IPixelCircleGeometry=} geometry Геометрия.
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 */
ymaps.overlay.staticGraphics.Circle = function(geometry, data, options) {};

/**
 * @param {ymaps.IPixelRectangleGeometry=} geometry Пиксельная геометрия фигуры.
 * @param {ymaps.IDataManager|Object=} data Данные.
 * @param {Object=} options Опции. Содержит в себе без префиксов опции overlay.hotspot.Rectangle и overlay.staticGraphics.Rectangle
 * @constructor
 * @implements {ymaps.IOverlay}
 */
ymaps.overlay.interactiveGraphics.Rectangle = function(geometry, data, options) {};


/**
 * Возвращает объект данных макета. Унаследован от IOverlay.
 * @return {Object}
 */
ymaps.overlay.interactiveGraphics.Rectangle.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию. Унаследован от IOverlay.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.overlay.interactiveGraphics.Rectangle.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту. Унаследован от IOverlay.
 * @return {ymaps.Map|null}
 */
ymaps.overlay.interactiveGraphics.Rectangle.prototype.getMap = function() {};


/**
 * Задает данные оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Rectangle.prototype.setData = function() {};


/**
 * Задает пиксельную геометрию оверлея. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Rectangle.prototype.setGeometry = function() {};


/**
 * Задает карту, на которой должен отобразиться оверлей. Унаследован от IOverlay.
 */
ymaps.overlay.interactiveGraphics.Rectangle.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.overlay.interactiveGraphics.Rectangle.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.overlay.interactiveGraphics.Rectangle.prototype.options;

/**
 * @param {ymaps.IPixelPointGeometry=} geometry Геометрия.
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 */
ymaps.overlay.staticGraphics.Placemark = function(geometry, data, options) {};

/**
 * @param {ymaps.IPixelPolygonGeometry=} geometry Геометрия.
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 */
ymaps.overlay.staticGraphics.Polygon = function(geometry, data, options) {};

/**
 * @param {ymaps.IPixelLineStringGeometry=} geometry Геометрия.
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 */
ymaps.overlay.staticGraphics.Polyline = function(geometry, data, options) {};

/**
 * @param {ymaps.IPixelRectangleGeometry=} geometry Геометрия.
 * @param {Object=} data Данные.
 * @param {Object=} options Опции.
 * @constructor
 */
ymaps.overlay.staticGraphics.Rectangle = function(geometry, data, options) {};

/**
 * @param {Array.<Array.<Array.<Number>>>|Object|ymaps.IPolygonGeometry=} geometry Координаты вершин ломаных, определяющих внешнюю и внутренние границы многоугольника, хэш-объект с параметрами геометрии или ссылка на объект геометрии. Внутренняя граница может отсутствовать.
 * @param {Object|ymaps.IDataManager=} properties Данные геообъекта. Соответствуют данным класса GeoObject.
 * @param {Object=} options Опции геообъекта. Соответствуют опциям класса GeoObject.
 * @constructor
 * @extends {ymaps.GeoObject}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 */
ymaps.Polygon = function(geometry, properties, options) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.Polygon.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.Polygon.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.Polygon.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.Polygon.prototype.setParent = function() {};


/**
 * Балун геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Balloon}
 */
ymaps.Polygon.prototype.balloon;


/**
 * Редактор геометрии геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.IGeometryEditor}
 */
ymaps.Polygon.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.Polygon.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.Polygon.prototype.geometry;


/**
 * Хинт геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Hint}
 */
ymaps.Polygon.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.Polygon.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Polygon.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Polygon.prototype.state;

/**
 * @param {Array.<Number>|Object|ymaps.IPointGeometry=} geometry Координаты метки или хэш с описанием геометрии или ссылка на объект точечной геометрии.
 * @param {Object|ymaps.IDataManager=} properties Данные метки. Соответствуют данным класса GeoObject.
 * @param {Object=} options Опции метки. Соответствуют опциям класса GeoObject.
 * @constructor
 * @extends {ymaps.GeoObject}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 */
ymaps.Placemark = function(geometry, properties, options) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.Placemark.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.Placemark.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.Placemark.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.Placemark.prototype.setParent = function() {};


/**
 * Балун геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Balloon}
 */
ymaps.Placemark.prototype.balloon;


/**
 * Редактор геометрии геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.IGeometryEditor}
 */
ymaps.Placemark.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.Placemark.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.Placemark.prototype.geometry;


/**
 * Хинт геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Hint}
 */
ymaps.Placemark.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.Placemark.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Placemark.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Placemark.prototype.state;

/**
 * @param {Array.<Array.<Number>>|Object|ymaps.ILineStringGeometry=} geometry Координаты вершин, хэш-объект с параметрами геометрии или ссылка на объект геометрии ломаной линии.
 * @param {Object|ymaps.IDataManager=} properties Данные геообъекта. Соответствуют данным класса GeoObject.
 * @param {Object=} options Опции геообъекта. Соответствуют опциям класса GeoObject.
 * @constructor
 * @extends {ymaps.GeoObject}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 */
ymaps.Polyline = function(geometry, properties, options) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.Polyline.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.Polyline.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.Polyline.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.Polyline.prototype.setParent = function() {};


/**
 * Балун геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Balloon}
 */
ymaps.Polyline.prototype.balloon;


/**
 * Редактор геометрии геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.IGeometryEditor}
 */
ymaps.Polyline.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.Polyline.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.Polyline.prototype.geometry;


/**
 * Хинт геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Hint}
 */
ymaps.Polyline.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.Polyline.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Polyline.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Polyline.prototype.state;

/**
 * @param {Array.<Object>=} bounds Массив из двух точек - координат левого нижнего и правого верхнего углов прямоугольной координатной области.
 * @param {Array.<Boolean>=} cycled Массив из признаков зацикленности карты по x и y. Значение по умолчанию: [false, false]
 * @param {Number|Array.<Number>=} scale Масштаб одного деления на оси. Может быть числом или парой чисел для каждой из осей. Значение по умолчанию: 1
 * @constructor
 * @implements {ymaps.IProjection}
 */
ymaps.projection.Cartesian = function(bounds, cycled, scale) {};


/**
 * Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции. Унаследован от IProjection.
 * @return {Array.<Number>}
 */
ymaps.projection.Cartesian.prototype.fromGlobalPixels = function() {};


/**
 * Возвращает координатную систему, используемую проекцией. Необязательный метод. В случае его отсутствия будет использована координатная система coordSystem.cartesian. Унаследован от IProjection.
 * @return {ymaps.ICoordSystem}
 */
ymaps.projection.Cartesian.prototype.getCoordSystem = function() {};


/**
 * Показатель зацикленности проекции. Унаследован от IProjection.
 * @return {Array.<Boolean>}
 */
ymaps.projection.Cartesian.prototype.isCycled = function() {};


/**
 * Преобразует координаты проекции в глобальные пиксельные на указанном уровне масштабирования. Унаследован от IProjection.
 * @return {Array.<Number>}
 */
ymaps.projection.Cartesian.prototype.toGlobalPixels = function() {};

/**
 */
ymaps.projection.sphericalMercator = function() {};


/**
 * Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции.
 * @return {Array.<Number>}
 */
ymaps.projection.sphericalMercator.prototype.fromGlobalPixels = function() {};


/**
 * Возвращает координатную систему, используемую проекцией. Необязательный метод. В случае его отсутствия будет использована координатная система coordSystem.cartesian.
 * @return {ymaps.ICoordSystem}
 */
ymaps.projection.sphericalMercator.prototype.getCoordSystem = function() {};


/**
 * Показатель зацикленности проекции.
 * @return {Array.<Boolean>}
 */
ymaps.projection.sphericalMercator.prototype.isCycled = function() {};


/**
 * Преобразует координаты проекции в глобальные пиксельные на указанном уровне масштабирования.
 * @return {Array.<Number>}
 */
ymaps.projection.sphericalMercator.prototype.toGlobalPixels = function() {};

/**
 */
ymaps.ready = function() {};

/**
 * @param {Array.<Array.<Number>>|Object|ymaps.IRectangleGeometry=} geometry Координаты двух противоположных углов, хэш-объект с параметрами геометрии или ссылка на объект геометрии прямоугольника.
 * @param {Object|ymaps.IDataManager=} properties Данные геообъекта. Соответствуют данным класса GeoObject.
 * @param {Object=} options Опции геообъекта. Соответствуют опциям класса GeoObject.
 * @constructor
 * @extends {ymaps.GeoObject}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 */
ymaps.Rectangle = function(geometry, properties, options) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.Rectangle.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.Rectangle.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.Rectangle.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.Rectangle.prototype.setParent = function() {};


/**
 * Балун геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Balloon}
 */
ymaps.Rectangle.prototype.balloon;


/**
 * Редактор геометрии геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.IGeometryEditor}
 */
ymaps.Rectangle.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.Rectangle.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.Rectangle.prototype.geometry;


/**
 * Хинт геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Hint}
 */
ymaps.Rectangle.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.Rectangle.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Rectangle.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.Rectangle.prototype.state;

/**
 */
ymaps.projection.wgs84Mercator = function() {};


/**
 * Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции.
 * @return {Array.<Number>}
 */
ymaps.projection.wgs84Mercator.prototype.fromGlobalPixels = function() {};


/**
 * Возвращает координатную систему, используемую проекцией. Необязательный метод. В случае его отсутствия будет использована координатная система coordSystem.cartesian.
 * @return {ymaps.ICoordSystem}
 */
ymaps.projection.wgs84Mercator.prototype.getCoordSystem = function() {};


/**
 * Показатель зацикленности проекции.
 * @return {Array.<Boolean>}
 */
ymaps.projection.wgs84Mercator.prototype.isCycled = function() {};


/**
 * Преобразует координаты проекции в глобальные пиксельные на указанном уровне масштабирования.
 * @return {Array.<Number>}
 */
ymaps.projection.wgs84Mercator.prototype.toGlobalPixels = function() {};

/**
 * @param {ymaps.router.Route=} route Маршрут, к которому должен быть привязан редактор.
 * @param {Object=} options Опции.
 * @constructor
 */
ymaps.router.Editor = function(route, options) {};

/**
 * @param {Object=} feature Геометрия и свойства пути.
 * @param {Object=} options Опции пути.
 * @constructor
 * @extends {ymaps.GeoObject}
 */
ymaps.router.Path = function(feature, options) {};


/**
 * Возвращает строковое представление времени проезда пути с единицами измерения с учетом пробок.
 * @return {String}
 */
ymaps.router.Path.prototype.getHumanJamsTime = function() {};


/**
 * Возвращает строковое представление длины пути с единицами измерения.
 * @return {String}
 */
ymaps.router.Path.prototype.getHumanLength = function() {};


/**
 * Возвращает строковое представление времени проезда пути с единицами измерения.
 * @return {String}
 */
ymaps.router.Path.prototype.getHumanTime = function() {};


/**
 * Возвращает время проезда пути в секундах с учетом пробок.
 * @return {number}
 */
ymaps.router.Path.prototype.getJamsTime = function() {};


/**
 * Возвращает длину пути в метрах.
 * @return {Number}
 */
ymaps.router.Path.prototype.getLength = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.router.Path.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.router.Path.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.router.Path.prototype.getParent = function() {};


/**
 * returns {router.Segment[]} Сегменты пути.
 */
ymaps.router.Path.prototype.getSegments = function() {};


/**
 * Возвращает время проезда пути в секундах.
 * @return {number}
 */
ymaps.router.Path.prototype.getTime = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.router.Path.prototype.setParent = function() {};


/**
 * Балун геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Balloon}
 */
ymaps.router.Path.prototype.balloon;


/**
 * Редактор геометрии геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.IGeometryEditor}
 */
ymaps.router.Path.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.router.Path.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.router.Path.prototype.geometry;


/**
 * Хинт геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Hint}
 */
ymaps.router.Path.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.router.Path.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.router.Path.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.router.Path.prototype.state;

/**
 */
ymaps.route = function() {};

/**
 * @param {Object=} json Описание маршрута в формате json.
 * @param {Object=} options Опции маршрута.
 * @constructor
 * @implements {ymaps.IGeoObject}
 * @implements {ymaps.IParentOnMap}
 */
ymaps.router.Route = function(json, options) {};


/**
 * Возвращает строковое представление времени проезда маршрута с единицами измерения с учетом пробок.
 * @return {String}
 */
ymaps.router.Route.prototype.getHumanJamsTime = function() {};


/**
 * Возвращает строковое представление длины маршрута с единицами измерения.
 * @return {String}
 */
ymaps.router.Route.prototype.getHumanLength = function() {};


/**
 * Возвращает строковое представление времени проезда маршрута с единицами измерения.
 * @return {String}
 */
ymaps.router.Route.prototype.getHumanTime = function() {};


/**
 * Возвращает время проезда маршрута в секундах с учетом пробок.
 * @return {number}
 */
ymaps.router.Route.prototype.getJamsTime = function() {};


/**
 * Возвращает длину маршрута в метрах.
 * @return {Number}
 */
ymaps.router.Route.prototype.getLength = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.router.Route.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.router.Route.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.router.Route.prototype.getParent = function() {};


/**
 * Возвращает коллекцию путей, из которых состоит маршрут.
 * @return {ymaps.GeoObjectArray}
 */
ymaps.router.Route.prototype.getPaths = function() {};


/**
 * Возвращает время проезда маршрута в секундах.
 * @return {number}
 */
ymaps.router.Route.prototype.getTime = function() {};


/**
 * Возвращает коллекцию транзитных точек маршрута.
 * @return {ymaps.GeoObjectArray}
 */
ymaps.router.Route.prototype.getViaPoints = function() {};


/**
 * Возвращает коллекцию путевых точек маршрута.
 * @return {ymaps.GeoObjectArray}
 */
ymaps.router.Route.prototype.getWayPoints = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.router.Route.prototype.setParent = function() {};


/**
 * Редактор маршрутов.
 * @type {ymaps.router.Editor}
 */
ymaps.router.Route.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.router.Route.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.router.Route.prototype.geometry;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.router.Route.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.router.Route.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.router.Route.prototype.state;

/**
 */
ymaps.theme.twirl.geoObject.layout.StretchyIcon = function() {};

/**
 * @param {Object=} feature Свойства и геометрия.
 * @param {Object=} options Опции.
 * @constructor
 * @extends {ymaps.GeoObject}
 */
ymaps.router.ViaPoint = function(feature, options) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.router.ViaPoint.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null. Унаследован от IGeoObject.
 * @return {ymaps.IOverlay|null}
 */
ymaps.router.ViaPoint.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.router.ViaPoint.prototype.getParent = function() {};


/**
 * Возвращает индекс пути, в котором расположена точка.
 * @return {number}
 */
ymaps.router.ViaPoint.prototype.getPathIndex = function() {};


/**
 * Возвращает индекс сегмента пути, в котором расположена точка.
 * @return {number}
 */
ymaps.router.ViaPoint.prototype.getSegmentIndex = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.router.ViaPoint.prototype.setParent = function() {};


/**
 * Балун геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Balloon}
 */
ymaps.router.ViaPoint.prototype.balloon;


/**
 * Редактор геометрии геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.IGeometryEditor}
 */
ymaps.router.ViaPoint.prototype.editor;


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.router.ViaPoint.prototype.events;


/**
 * Геометрия геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IGeometry}
 */
ymaps.router.ViaPoint.prototype.geometry;


/**
 * Хинт геообъекта. Унаследовано от GeoObject.
 * @type {ymaps.geoObject.Hint}
 */
ymaps.router.ViaPoint.prototype.hint;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.router.ViaPoint.prototype.options;


/**
 * Менеджер данных геообъекта. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.router.ViaPoint.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается. Унаследовано от IGeoObject.
 * @type {ymaps.IDataManager}
 */
ymaps.router.ViaPoint.prototype.state;

/**
 * @param {Object=} feature Свойства и геометрия сегмента.
 * @constructor
 */
ymaps.router.Segment = function(feature) {};


/**
 * Возвращает направление поворота маршрута в конце сегмента. Возможные значения: left - налево; slight left - левее; hard left - резкий поворот налево; right - направо; slight right - правее; hard right - резкий поворот направо; none - прямо; back - разворот; enter roundabout - въезд на перекресток с круговым движением; leave roundabout [N] - съезд с перекрестка с круговым движением. Число N - номер поворота с круга. Данное число может отсутствовать. Например, "leave roundabout" или "leave roundabout 2"; merge - въезд (например, на шоссе или магистраль). Обозначает слияние с транспортным потоком; board ferry - паромная переправа. .
 * @return {String}
 */
ymaps.router.Segment.prototype.getAction = function() {};


/**
 * Определяет угол поворота маршрута в конце отрезка.
 * @return {Number}
 */
ymaps.router.Segment.prototype.getAngle = function() {};


/**
 * Возвращает координаты ломаной, описывающей геометрию сегмента.
 * @return {Array.<Array.<Number>>}
 */
ymaps.router.Segment.prototype.getCoordinates = function() {};


/**
 * Возвращает направление поворота в виде локализованной человекопонятной строки.
 * @return {String}
 */
ymaps.router.Segment.prototype.getHumanAction = function() {};


/**
 * Возвращает строковое представление времени проезда сегмента с единицами измерения с учетом пробок.
 * @return {String}
 */
ymaps.router.Segment.prototype.getHumanJamsTime = function() {};


/**
 * Возвращает строковое представление длины сегмента с единицами измерения.
 * @return {String}
 */
ymaps.router.Segment.prototype.getHumanLength = function() {};


/**
 * Возвращает строковое представление времени проезда сегмента с единицами измерения.
 * @return {String}
 */
ymaps.router.Segment.prototype.getHumanTime = function() {};


/**
 * Возвращает индекс данного сегмента в массиве всех сегментов пути.
 * @return {number}
 */
ymaps.router.Segment.prototype.getIndex = function() {};


/**
 * Возвращает время проезда сегмента в секундах с учетом пробок.
 * @return {number}
 */
ymaps.router.Segment.prototype.getJamsTime = function() {};


/**
 * Возвращает длину сегмента в метрах.
 * @return {Number}
 */
ymaps.router.Segment.prototype.getLength = function() {};


/**
 * Возвращает индекс точки в геометрии пути, на которой заканчивается сегмент.
 * @return {number}
 */
ymaps.router.Segment.prototype.getPolylineEndIndex = function() {};


/**
 * Возвращает индекс точки в геометрии пути, с которой начинается сегмент.
 * @return {number}
 */
ymaps.router.Segment.prototype.getPolylineStartIndex = function() {};


/**
 * Возвращает название улицы, по которой проходит сегмент маршрута.
 * @return {String}
 */
ymaps.router.Segment.prototype.getStreet = function() {};


/**
 * Возвращает время проезда сегмента в секундах.
 * @return {number}
 */
ymaps.router.Segment.prototype.getTime = function() {};

/**
 */
ymaps.templateLayoutFactory = function() {};


/**
 * Возвращает конструктор макета. Созданный класс будет отнаследован от класса layout.templateBased.Base с переопределением списка методов, указанных в overrides.
 * @return {Function}
 */
ymaps.templateLayoutFactory.prototype.templateLayoutFactory.createClass = function() {};

/**
 * @param {Object=} options Опции провайдера.
 * @param {Object=} state Состояние провайдера.
 * @constructor
 * @implements {ymaps.ITrafficProvider}
 */
ymaps.traffic.provider.Actual = function(options, state) {};


/**
 * Возвращает ссылку на карту. Унаследован от ITrafficProvider.
 * @return {ymaps.Map|null}
 */
ymaps.traffic.provider.Actual.prototype.getMap = function() {};


/**
 */
ymaps.traffic.provider.Actual.prototype.setMap = function() {};


/**
 * Шлёт запрос на обновление пробок.
 */
ymaps.traffic.provider.Actual.prototype.update = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.traffic.provider.Actual.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.traffic.provider.Actual.prototype.options;


/**
 * Состояние провайдера. Имена полей, доступных через метод data.Manager.get: isInited - признак, готов ли провайдер предоставлять данные; infoLayerShown - признак, показан ли слой дорожных событий; timestamp - текущее время во временной зоне UTC+0 в секундах; localtime - локальное время, для которого сервер в текущий момент отдает данные, в формате 'ЧЧ:ММ'; level - уровень загруженности дорог в баллах - от 0 до 10.
 * @type {ymaps.data.Manager}
 */
ymaps.traffic.provider.Actual.prototype.state;

/**
 * @param {Object=} options Опции провайдера.
 * @param {Object=} state Состояние провайдера.
 * @constructor
 * @implements {ymaps.ITrafficProvider}
 */
ymaps.traffic.provider.Archive = function(options, state) {};


/**
 * Возвращает ссылку на карту. Унаследован от ITrafficProvider.
 * @return {ymaps.Map|null}
 */
ymaps.traffic.provider.Archive.prototype.getMap = function() {};


/**
 */
ymaps.traffic.provider.Archive.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.traffic.provider.Archive.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.traffic.provider.Archive.prototype.options;


/**
 * Состояние провайдера. Имена полей, доступных через метод data.Manager.get: isInited - признак, готов ли провайдер предоставлять данные; timeZone - смещение по времени для текущего временного пояса относительно UTC+0. Измеряется в секундах.; dst - признак перехода на зимнее/летнее время. При dst='dst' время летнее; timestamp - текущее время во временной зоне UTC+0 в секундах; localtime - локальное время, которое возвращает в ответе сервер; level - уровень загруженности дорог в баллах - от 0 до 10.
 * @type {ymaps.data.Manager}
 */
ymaps.traffic.provider.Archive.prototype.state;

/**
 */
ymaps.traffic.provider.storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @return {ymaps.util.Storage}
 */
ymaps.traffic.provider.storage.prototype.add = function() {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @return {Object}
 */
ymaps.traffic.provider.storage.prototype.get = function() {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @return {ymaps.util.Storage}
 */
ymaps.traffic.provider.storage.prototype.remove = function() {};

/**
 */
ymaps.util.augment = function() {};

/**
 */
ymaps.util.bind = function() {};

/**
 */
ymaps.util.bounds.getCenterAndZoom = function() {};

/**
 * @param {String=} key Ключ, под которым хранится курсор в хранилище курсоров.
 * @constructor
 */
ymaps.util.cursor.Accessor = function(key) {};


/**
 * Возвращает текущий ключ для доступа к курсору в хранилище курсоров.
 * @return {String}
 */
ymaps.util.cursor.Accessor.prototype.getKey = function() {};


/**
 * Удаляет курсор с карты.
 */
ymaps.util.cursor.Accessor.prototype.remove = function() {};


/**
 * Задает новый ключ для доступа к курсору. По этому ключу должен находиться соответствующий курсор в хранилище курсоров. В случае, если данный курсор активен, то он сразу сменится.
 * @param {String=} key 
 */
ymaps.util.cursor.Accessor.prototype.setKey = function(key) {};

/**
 * @param {HTMLElement=} element DOM-элемент, для которого выполняется установка курсоров.
 * @constructor
 */
ymaps.util.cursor.Manager = function(element) {};


/**
 * Устанавливает новый курсор и дописывает его в стэк курсоров объекта.
 * @param {String=} key Курсор. Допустимые значения: "arrow" - стрелка; "crosshair" - перекрестье; "grab" - "рука"; "grabbing" - сжатая "рука" "help" - стрелка со знаком вопроса; "zoom" - лупа; "move" - курсор в виде четырех стрелок; "pointer" - "палец"; "inherit" - унаследовать курсор от родителя.
 * @return {ymaps.util.cursor.Accessor}
 */
ymaps.util.cursor.Manager.prototype.push = function(key) {};


/**
 * Менеджер событий менеджера курсоров.
 * @type {ymaps.event.Manager}
 */
ymaps.util.cursor.Manager.prototype.events;

/**
 */
ymaps.util.extend = function() {};

/**
 * @constructor
 */
ymaps.util.Promise = function() {};


/**
 * Прерываем слушание.
 * @param {String|Object=} error ошибка, подаваемая на функцию-обработчик.
 */
ymaps.util.Promise.prototype.reject = function(error) {};


/**
 * Вызывает функции-обработчики, когда "обещание" выполнено.
 * @param {Object=} value значение, подающееся на функцию-обработчик.
 */
ymaps.util.Promise.prototype.resolve = function(value) {};


/**
 * Подписка на "обещание".
 * @param {Function=} onResolve Функция-обработчик, которая вызывается, если обещание выполнено.
 * @param {Function=} onReject Функция-обработчик, которая вызывается, если обещание не выполнено (произошла ошибка).
 * @return {ymaps.util.Promise}
 */
ymaps.util.Promise.prototype.then = function(onResolve, onReject) {};

/**
 * @constructor
 */
ymaps.util.Storage = function() {};


/**
 * Добавляет объект в хранилище.
 * @param {String=} key Ключ.
 * @param {Object=} object Хранимый объект.
 * @return {ymaps.util.Storage}
 */
ymaps.util.Storage.prototype.add = function(key, object) {};


/**
 * Возвращает объект, хранящийся под указанным ключом.
 * @param {String=} key Ключ.
 * @return {Object}
 */
ymaps.util.Storage.prototype.get = function(key) {};


/**
 * Удаляет пару "ключ: значение" из хранилища.
 * @param {String=} key Ключ.
 * @return {ymaps.util.Storage}
 */
ymaps.util.Storage.prototype.remove = function(key) {};

/**
 * @interface
 * @implements {ymaps.IBaseGeometry}
 * @implements {ymaps.ICircleGeometryAccess}
 */
ymaps.IBaseCircleGeometry = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри круга. Унаследован от ICircleGeometryAccess.
 * @return {Boolean}
 */
ymaps.IBaseCircleGeometry.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBaseCircleGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IBaseCircleGeometry.prototype.getBounds = function() {};


/**
 * Ищет на окружности точку, ближайшую к anchorPosition. Унаследован от ICircleGeometryAccess.
 * @return {Object}
 */
ymaps.IBaseCircleGeometry.prototype.getClosest = function() {};


/**
 * Возвращает координаты центра круга. Унаследован от ICircleGeometryAccess.
 * @return {Array.<Number>|null}
 */
ymaps.IBaseCircleGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает радиус круга. Унаследован от ICircleGeometryAccess.
 * @return {Number}
 */
ymaps.IBaseCircleGeometry.prototype.getRadius = function() {};


/**
 * Возвращает строку "Circle".
 * @return {String}
 */
ymaps.IBaseCircleGeometry.prototype.getType = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IBaseCircleGeometry.prototype.isFrozen = function() {};


/**
 * Задает координаты центра круга. Унаследован от ICircleGeometryAccess.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.IBaseCircleGeometry.prototype.setCoordinates = function() {};


/**
 * Задает радиус круга. Унаследован от ICircleGeometryAccess.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.IBaseCircleGeometry.prototype.setRadius = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBaseCircleGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IBaseCircleGeometry.prototype.events;

/**
 * @interface
 * @implements {ymaps.IEventEmitter}
 */
ymaps.IBaseGeometry = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IBaseGeometry.prototype.getBounds = function() {};


/**
 * Возвращает идентификатор типа геометрии.
 * @return {String}
 */
ymaps.IBaseGeometry.prototype.getType = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IBaseGeometry.prototype.events;

/**
 * @interface
 * @implements {ymaps.IBaseGeometry}
 * @implements {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IBaseLinearRingGeometry = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри контура. Унаследован от ILinearRingGeometryAccess.
 * @return {Boolean}
 */
ymaps.IBaseLinearRingGeometry.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBaseLinearRingGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты точки с заданным индексом. Унаследован от ILinearRingGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.IBaseLinearRingGeometry.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IBaseLinearRingGeometry.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект IPointGeometryAccess для заданной вершины контура. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.IBaseLinearRingGeometry.prototype.getChildGeometry = function() {};


/**
 * Ищет на контуре точку, ближайшую к anchorPosition. Унаследован от ILinearRingGeometryAccess.
 * @return {Object}
 */
ymaps.IBaseLinearRingGeometry.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от ILinearRingGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IBaseLinearRingGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки. Унаследован от ILinearRingGeometryAccess.
 * @return {String}
 */
ymaps.IBaseLinearRingGeometry.prototype.getFillRule = function() {};


/**
 * Возвращает количество точек в геометрии. Унаследован от ILinearRingGeometryAccess.
 * @return {number}
 */
ymaps.IBaseLinearRingGeometry.prototype.getLength = function() {};


/**
 * Возвращает строку "LinearRing".
 * @return {String}
 */
ymaps.IBaseLinearRingGeometry.prototype.getType = function() {};


/**
 * Добавляет новую точку с заданным индексом. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IBaseLinearRingGeometry.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IBaseLinearRingGeometry.prototype.isFrozen = function() {};


/**
 * Удаляет точку с заданным индексом. Унаследован от ILinearRingGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.IBaseLinearRingGeometry.prototype.remove = function() {};


/**
 * Задает координаты точки c заданным индексом. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IBaseLinearRingGeometry.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IBaseLinearRingGeometry.prototype.setCoordinates = function() {};


/**
 * Задает алгоритм заливки контура. Унаследован от ILinearRingGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IBaseLinearRingGeometry.prototype.setFillRule = function() {};


/**
 * Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILinearRingGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IBaseLinearRingGeometry.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBaseLinearRingGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IBaseLinearRingGeometry.prototype.events;

/**
 * @interface
 * @implements {ymaps.IBaseGeometry}
 * @implements {ymaps.IPointGeometryAccess}
 */
ymaps.IBasePointGeometry = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IBasePointGeometry.prototype.getBounds = function() {};


/**
 * Возвращает координаты точки. Унаследован от IPointGeometryAccess.
 * @return {Array.<Number>|null}
 */
ymaps.IBasePointGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает строку "Point".
 * @return {String}
 */
ymaps.IBasePointGeometry.prototype.getType = function() {};


/**
 * Задает координаты точки. Унаследован от IPointGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.IBasePointGeometry.prototype.setCoordinates = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IBasePointGeometry.prototype.events;

/**
 * @interface
 * @implements {ymaps.IBaseGeometry}
 * @implements {ymaps.ILineStringGeometryAccess}
 */
ymaps.IBaseLineStringGeometry = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBaseLineStringGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты точки с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.IBaseLineStringGeometry.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IBaseLineStringGeometry.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.IBaseLineStringGeometry.prototype.getChildGeometry = function() {};


/**
 * Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от ILineStringGeometryAccess.
 * @return {Object}
 */
ymaps.IBaseLineStringGeometry.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IBaseLineStringGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает количество точек в геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {number}
 */
ymaps.IBaseLineStringGeometry.prototype.getLength = function() {};


/**
 * Возвращает строку "LineString".
 * @return {String}
 */
ymaps.IBaseLineStringGeometry.prototype.getType = function() {};


/**
 * Добавляет новую точку с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.IBaseLineStringGeometry.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IBaseLineStringGeometry.prototype.isFrozen = function() {};


/**
 * Удаляет точку с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.IBaseLineStringGeometry.prototype.remove = function() {};


/**
 * Задает координаты точки c заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.IBaseLineStringGeometry.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.IBaseLineStringGeometry.prototype.setCoordinates = function() {};


/**
 * Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IBaseLineStringGeometry.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBaseLineStringGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IBaseLineStringGeometry.prototype.events;

/**
 * @interface
 * @implements {ymaps.IBaseGeometry}
 * @implements {ymaps.IPolygonGeometryAccess}
 */
ymaps.IBasePolygonGeometry = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри многоугольника. Унаследован от IPolygonGeometryAccess.
 * @return {Boolean}
 */
ymaps.IBasePolygonGeometry.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBasePolygonGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты контура с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IBasePolygonGeometry.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IBasePolygonGeometry.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект ILinearRingGeometryAccess для заданного контура. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IBasePolygonGeometry.prototype.getChildGeometry = function() {};


/**
 * Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPolygonGeometryAccess.
 * @return {Object}
 */
ymaps.IBasePolygonGeometry.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<Array.<Array.<Number>>>}
 */
ymaps.IBasePolygonGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки. Унаследован от IPolygonGeometryAccess.
 * @return {String}
 */
ymaps.IBasePolygonGeometry.prototype.getFillRule = function() {};


/**
 * Возвращает количество контуров в геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {number}
 */
ymaps.IBasePolygonGeometry.prototype.getLength = function() {};


/**
 * Возвращает строку "Polygon".
 * @return {String}
 */
ymaps.IBasePolygonGeometry.prototype.getType = function() {};


/**
 * Добавляет новый контур с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IBasePolygonGeometry.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IBasePolygonGeometry.prototype.isFrozen = function() {};


/**
 * Удаляет контур с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IBasePolygonGeometry.prototype.remove = function() {};


/**
 * Задает координаты контура c заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IBasePolygonGeometry.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IBasePolygonGeometry.prototype.setCoordinates = function() {};


/**
 * Задает алгоритм заливки многоугольника. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IBasePolygonGeometry.prototype.setFillRule = function() {};


/**
 * Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<ymaps.ILinearRingGeometryAccess>}
 */
ymaps.IBasePolygonGeometry.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBasePolygonGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IBasePolygonGeometry.prototype.events;

/**
 * @interface
 * @implements {ymaps.IBaseGeometry}
 * @implements {ymaps.IRectangleGeometryAccess}
 */
ymaps.IBaseRectangleGeometry = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {Boolean}
 */
ymaps.IBaseRectangleGeometry.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBaseRectangleGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IBaseRectangleGeometry.prototype.getBounds = function() {};


/**
 * Ищет на контуре прямоугольника точку, ближайшую к anchorPosition. Унаследован от IRectangleGeometryAccess.
 * @return {Object}
 */
ymaps.IBaseRectangleGeometry.prototype.getClosest = function() {};


/**
 * Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.IBaseRectangleGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает строку "Rectangle".
 * @return {String}
 */
ymaps.IBaseRectangleGeometry.prototype.getType = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IBaseRectangleGeometry.prototype.isFrozen = function() {};


/**
 * Задает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.IBaseRectangleGeometry.prototype.setCoordinates = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IBaseRectangleGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IBaseRectangleGeometry.prototype.events;

/**
 * @param {Object=} options Опции поведения.
 * @interface
 * @implements {ymaps.IChildOnMap}
 * @implements {ymaps.ICustomizable}
 */
ymaps.IBehavior = function(options) {};


/**
 * Выключает поведение.
 */
ymaps.IBehavior.prototype.disable = function() {};


/**
 * Включает поведение.
 */
ymaps.IBehavior.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.IBehavior.prototype.getParent = function() {};


/**
 * Проверяет, включено ли поведение.
 * @return {Boolean}
 */
ymaps.IBehavior.prototype.isEnabled = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.IBehavior.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IBehavior.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IBehavior.prototype.options;

/**
 * @interface
 * @implements {ymaps.IChild}
 */
ymaps.IChildOnMap = function() {};


/**
 * Возвращает ссылку на родительский объект.
 * @return {ymaps.IParentOnMap}
 */
ymaps.IChildOnMap.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект.
 * @param {ymaps.IParentOnMap=} parent Родительский объект.
 * @return {ymaps.IChildOnMap}
 */
ymaps.IChildOnMap.prototype.setParent = function(parent) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IChildOnMap.prototype.events;

/**
 * @interface
 * @implements {ymaps.IEventEmitter}
 */
ymaps.IChild = function() {};


/**
 * Возвращает ссылку на родительский объект.
 * @return {Object}
 */
ymaps.IChild.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект.
 * @param {Object=} parent Родительский объект.
 * @return {ymaps.IChild}
 */
ymaps.IChild.prototype.setParent = function(parent) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IChild.prototype.events;

/**
 * @interface
 * @implements {ymaps.ICircleGeometryAccess}
 * @implements {ymaps.IGeometry}
 */
ymaps.ICircleGeometry = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри круга. Унаследован от ICircleGeometryAccess.
 * @return {Boolean}
 */
ymaps.ICircleGeometry.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ICircleGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.ICircleGeometry.prototype.getBounds = function() {};


/**
 * Ищет на окружности точку, ближайшую к anchorPosition. Унаследован от ICircleGeometryAccess.
 * @return {Object}
 */
ymaps.ICircleGeometry.prototype.getClosest = function() {};


/**
 * Возвращает координаты центра круга. Унаследован от ICircleGeometryAccess.
 * @return {Array.<Number>|null}
 */
ymaps.ICircleGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.ICircleGeometry.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.ICircleGeometry.prototype.getPixelGeometry = function() {};


/**
 * Возвращает радиус круга. Унаследован от ICircleGeometryAccess.
 * @return {Number}
 */
ymaps.ICircleGeometry.prototype.getRadius = function() {};


/**
 * Возвращает строку "Circle".
 * @return {String}
 */
ymaps.ICircleGeometry.prototype.getType = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.ICircleGeometry.prototype.isFrozen = function() {};


/**
 * Задает координаты центра круга. Унаследован от ICircleGeometryAccess.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.ICircleGeometry.prototype.setCoordinates = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.ICircleGeometry.prototype.setMap = function() {};


/**
 * Задает радиус круга. Унаследован от ICircleGeometryAccess.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.ICircleGeometry.prototype.setRadius = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ICircleGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ICircleGeometry.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.ICircleGeometry.prototype.options;

/**
 * @interface
 * @implements {ymaps.IEventEmitter}
 */
ymaps.ICollection = function() {};


/**
 * Добавляет в коллекцию дочерний объект.
 * @param {Object=} object Добавляемый объект.
 * @return {ymaps.ICollection}
 */
ymaps.ICollection.prototype.add = function(object) {};


/**
 * Возвращает итератор по коллекции.
 * @return {ymaps.IIterator}
 */
ymaps.ICollection.prototype.getIterator = function() {};


/**
 * Удаляет из коллекции дочерний объект.
 * @param {Object=} object Удаляемый объект.
 * @return {ymaps.ICollection}
 */
ymaps.ICollection.prototype.remove = function(object) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ICollection.prototype.events;

/**
 * @interface
 * @implements {ymaps.IFreezable}
 */
ymaps.ICircleGeometryAccess = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри круга.
 * @param {Array.<Number>=} position Координаты точки.
 * @return {Boolean}
 */
ymaps.ICircleGeometryAccess.prototype.contains = function(position) {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ICircleGeometryAccess.prototype.freeze = function() {};


/**
 * Ищет на окружности точку, ближайшую к anchorPosition.
 * @param {Array.<Number>=} anchorPosition Координаты точки, для которой расчитывается ближайшая точка на окружности.
 * @return {Object}
 */
ymaps.ICircleGeometryAccess.prototype.getClosest = function(anchorPosition) {};


/**
 * Возвращает координаты центра круга.
 * @return {Array.<Number>|null}
 */
ymaps.ICircleGeometryAccess.prototype.getCoordinates = function() {};


/**
 * Возвращает радиус круга.
 * @return {Number}
 */
ymaps.ICircleGeometryAccess.prototype.getRadius = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.ICircleGeometryAccess.prototype.isFrozen = function() {};


/**
 * Задает координаты центра круга.
 * @param {Array.<Number>|null=} coordinates Координаты центра круга.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.ICircleGeometryAccess.prototype.setCoordinates = function(coordinates) {};


/**
 * Задает радиус круга.
 * @param {Number=} radius Радиус круга.
 * @return {ymaps.ICircleGeometryAccess}
 */
ymaps.ICircleGeometryAccess.prototype.setRadius = function(radius) {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ICircleGeometryAccess.prototype.unfreeze = function() {};


/**
 * Менеджер событий объекта. Унаследовано от IFreezable.
 * @type {ymaps.IEventManager}
 */
ymaps.ICircleGeometryAccess.prototype.events;

/**
 * @param {Object=} options Опции элемента управления.
 * @interface
 * @implements {ymaps.IChildOnMap}
 */
ymaps.IControl = function(options) {};


/**
 * Возвращает ссылку на родительский объект.
 * @return {ymaps.IControlParent}
 */
ymaps.IControl.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект.
 * @param {ymaps.IControlParent=} parent Родительский объект.
 * @return {ymaps.IChildOnMap}
 */
ymaps.IControl.prototype.setParent = function(parent) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IControl.prototype.events;

/**
 * @interface
 * @implements {ymaps.IParentOnMap}
 */
ymaps.IControlParent = function() {};


/**
 * Возвращает для своего дочернего объекта HTML-элемент, в котором он должен размещаться.
 * @param {ymaps.IControl=} child Дочерний объект.
 * @return {HTMLElement}
 */
ymaps.IControlParent.prototype.getChildElement = function(child) {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.IControlParent.prototype.getMap = function() {};

/**
 * @interface
 */
ymaps.ICoordSystem = function() {};


/**
 * Возвращает кратчайшее (вдоль геодезической линии) расстояние между двумя заданными точками (в метрах).
 * @param {Array.<Number>=} point1 Первая точка.
 * @param {Array.<Number>=} point2 Вторая точка.
 * @return {Number}
 */
ymaps.ICoordSystem.prototype.getDistance = function(point1, point2) {};


/**
 * Решает так называемую первую (прямую) геодезическую задачу: где мы окажемся, если выйдем из указанной точки в указанном направлении и продём, не сворачивая, указанное расстояние.
 * @param {Array.<Number>=} startPoint Точка отправления.
 * @param {Array.<Number>=} direction Направление. Задаётся в виде вектора (приращение координат) [dlat, dlon] либо [dlon, dlat], в завивимости от параметра coordorder. Для того, чтобы получить из заданного таким образом направления азимут (угол между направлением движения и направлением на север), необходимо вычислить арктангенс величины dlat/dlon (в JavaScript - стандартная функция Math.atan2(dlat, dlon)); для того, чтобы по известному азимуту a вычислить направление движения, нужно положить dlat = cos(a), dlon = sin(a).
 * @param {Number=} distance Пройденное расстояние.
 * @return {Object}
 */
ymaps.ICoordSystem.prototype.solveDirectProblem = function(startPoint, direction, distance) {};


/**
 * Решает так называемую вторую (обратную) геодезическую задачу: построить кратчайший маршрут между двумя точками на картографируемой поверхности и определелить расстояние и направление движения.
 * @param {Array.<Number>=} startPoint Точка отправления.
 * @param {Array.<Number>=} endPoint Точка прибытия.
 * @param {Boolean=} reverseDirection Направление движения. false - выбрать кратчайшую дугу, true - выбрать обратную кратчайшей. Значение по умолчанию: false
 * @return {Object}
 */
ymaps.ICoordSystem.prototype.solveInverseProblem = function(startPoint, endPoint, reverseDirection) {};

/**
 * @interface
 * @implements {ymaps.ICopyrightsProvider}
 */
ymaps.ICopyrightsAccessor = function() {};


/**
 * Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах. Унаследован от ICopyrightsProvider.
 * @return {ymaps.util.Promise}
 */
ymaps.ICopyrightsAccessor.prototype.getCopyrights = function() {};


/**
 * Удаляет добавленную через данный объект информацию об авторских правах. Унаследован от ICopyrightsProvider.
 */
ymaps.ICopyrightsAccessor.prototype.remove = function() {};


/**
 * Задаёт новое значение для добавленной через данный объект информации об авторских правах. Унаследован от ICopyrightsProvider.
 */
ymaps.ICopyrightsAccessor.prototype.setCopyrights = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ICopyrightsAccessor.prototype.events;

/**
 * @interface
 */
ymaps.ICustomizable = function() {};


/**
 * Менеджер опций.
 * @type {ymaps.IOptionManager}
 */
ymaps.ICustomizable.prototype.options;

/**
 * @interface
 * @implements {ymaps.IEventEmitter}
 */
ymaps.ICopyrightsProvider = function() {};


/**
 * Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах.
 * @param {Array.<Number>=} coords Точка на карте, для которой запрашивается информация об авторских правах.
 * @param {Number=} zoom Уровень масштабирования, для которого запрашивается информация об авторских правах.
 * @return {ymaps.util.Promise}
 */
ymaps.ICopyrightsProvider.prototype.getCopyrights = function(coords, zoom) {};


/**
 * Удаляет добавленную через данный объект информацию об авторских правах.
 */
ymaps.ICopyrightsProvider.prototype.remove = function() {};


/**
 * Задаёт новое значение для добавленной через данный объект информации об авторских правах.
 * @param {String|HTMLElement|Array.<String>|Array.<HTMLElement>=} copyrights Информация об авторских правах.
 */
ymaps.ICopyrightsProvider.prototype.setCopyrights = function(copyrights) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ICopyrightsProvider.prototype.events;

/**
 * @interface
 * @implements {ymaps.IEventEmitter}
 */
ymaps.IDataManager = function() {};


/**
 * Возвращает значение поля данных.
 * @param {String=} path Строка с именем свойства; может содержать '.'.
 * @param {Object=} defaultValue Значение по умолчанию.
 * @return {Object}
 */
ymaps.IDataManager.prototype.get = function(path, defaultValue) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IDataManager.prototype.events;

/**
 * @interface
 * @implements {ymaps.IEventEmitter}
 */
ymaps.IDomEventEmitter = function() {};


/**
 * Менеджер событий.
 * @type {ymaps.IEventManager}
 */
ymaps.IDomEventEmitter.prototype.events;

/**
 * @param {Object=} originalEvent Исходное DOM-событие.
 * @interface
 * @implements {ymaps.IEvent}
 */
ymaps.IDomEvent = function(originalEvent) {};


/**
 * Вызывает указанный метод у исходного DOM-события. Второй и последующие аргументы передаются методу при вызове.
 * @param {String=} name Имя метода.
 */
ymaps.IDomEvent.prototype.callMethod = function(name) {};


/**
 * Возвращает свойство события по ключу. С помощью этого метода можно получать доступ как к свойствам оригинального события, так и к дополнительным свойствам, предоставляемым API карт.
 * @param {String=} name Имя свойства. Поддерживаются дополнительные свойства: 'propagatedData' - данные события, которые сохраняются при его пропагировании (распространении по DOM-дереву).
 * @return {Object}
 */
ymaps.IDomEvent.prototype.get = function(name) {};


/**
 * Возвращает true, если распространение события внутри системы событий API Яндекс.Карт остановлено. Это внутренний признак, никак не связанный с пропагацией события по DOM-дереву.
 */
ymaps.IDomEvent.prototype.isImmediatePropagationStopped = function() {};

/**
 * @param {String=} url URL тайла.
 * @interface
 */
ymaps.IDomTile = function(url) {};


/**
 * Уничтожает тайл.
 */
ymaps.IDomTile.prototype.destroy = function() {};


/**
 * Проверяет готовность тайла.
 * @return {Boolean}
 */
ymaps.IDomTile.prototype.isReady = function() {};


/**
 * Добавляет тайл в родительский HTML-элемент.
 * @param {HTMLElement=} context Родительский HTML-элемент
 * @param {Object=} clientBounds Область в клиентских координатах, которую должен занять тайл.
 * @param {Boolean=} animate true - анимировать рендеринг, false - нет.
 */
ymaps.IDomTile.prototype.renderAt = function(context, clientBounds, animate) {};


/**
 * Менеджер событий тайла.
 * @type {ymaps.IEventManager}
 */
ymaps.IDomTile.prototype.events;

/**
 * @interface
 */
ymaps.IEvent = function() {};


/**
 * Проверяет, прервано ли событие кем-то из слушателей. Этот метод не является обязательным; если он отсутствует, то прервать обработку события нельзя.
 * @return {Boolean}
 */
ymaps.IEvent.prototype.isImmediatePropagationStopped = function() {};

/**
 * @interface
 */
ymaps.IEventEmitter = function() {};


/**
 * Менеджер событий.
 * @type {ymaps.IEventManager}
 */
ymaps.IEventEmitter.prototype.events;

/**
 * @interface
 */
ymaps.IEventController = function() {};


/**
 * Вызывается при первой подписке на указанный тип событий через указанный менеджер событий. Этот метод является необязательным.
 * @param {ymaps.IEventManager=} events Менеджер событий.
 * @param {String=} type Тип события.
 */
ymaps.IEventController.prototype.onStartListening = function(events, type) {};


/**
 * Вызывается, когда определённый тип событий перестаёт слушаться на указанном менеджере событий (удалена последняя подписка). Этот метод является необязательным.
 * @param {ymaps.IEventManager=} events Менеджер событий.
 * @param {String=} type Тип события.
 */
ymaps.IEventController.prototype.onStopListening = function(events, type) {};

/**
 * @param {ymaps.event.Manager=} events Менеджер событий, для которого создается контейнер.
 * @interface
 */
ymaps.IEventGroup = function(events) {};


/**
 * Добавляет обработчик события.
 * @param {String|Array.<String>=} types Тип или типы событий.
 * @param {Function=} callback Функция-обработчик. В качестве параметра в функцию передается объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent.
 * @param {Object=} context Контекст исполнения функции-обработчика.
 * @return {ymaps.IEventGroup}
 */
ymaps.IEventGroup.prototype.add = function(types, callback, context) {};


/**
 * Удаляет обработчик события. Удалить можно только те обработчики, которые были добавлены через данный экземпляр контейнера.
 * @param {String|Array.<String>=} types Тип или типы событий.
 * @param {Function=} callback Функция-обработчик. В качестве параметра в функцию передается объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent.
 * @param {Object=} context Контекст исполнения функции-обработчика.
 * @return {ymaps.IEventGroup}
 */
ymaps.IEventGroup.prototype.remove = function(types, callback, context) {};


/**
 * Удаляет все обработчики событий, которые были добавлены через данный экземпляр контейнера.
 * @return {ymaps.IEventGroup}
 */
ymaps.IEventGroup.prototype.removeAll = function() {};

/**
 * @interface
 */
ymaps.IEventManager = function() {};


/**
 * Добавляет новую подписку.
 * @param {String|Array.<String>=} types Тип или массив типов события.
 * @param {Function=} callback Функция-обработчик события. В качестве параметра в функцию передается объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent.
 * @param {Object=} context Контекст исполнения обработчика.
 * @return {ymaps.IEventManager}
 */
ymaps.IEventManager.prototype.add = function(types, callback, context) {};


/**
 * Бросает событие.
 * @param {String=} type Тип события.
 * @param {Object|ymaps.IEvent=} eventObject Объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent. Во втором случае после вызова каждого обработчика будет проверяться значение метода isImmediatePropagationStopped() - если оно истинно, оповещение о событии немедленно прекращается.
 * @return {ymaps.IEventManager}
 */
ymaps.IEventManager.prototype.fire = function(type, eventObject) {};


/**
 * Возвращает ссылку на родительский менеджер событий.
 * @return {ymaps.IEventManager|null}
 */
ymaps.IEventManager.prototype.getParent = function() {};


/**
 * Возвращает контейнер событий, привязанный к данному менеджеру.
 * @return {ymaps.IEventGroup}
 */
ymaps.IEventManager.prototype.group = function() {};


/**
 * Удаляет существующую подписку.
 * @param {String|Array.<String>=} types Тип или массив типов события.
 * @param {Function=} callback Функция-обработчик события. В качестве параметра в функцию передается объект, описывающий событие. Может быть либо произвольным объектом, либо реализовывать интерфейс IEvent.
 * @param {Object=} context Контекст исполнения обработчика.
 * @return {ymaps.IEventManager}
 */
ymaps.IEventManager.prototype.remove = function(types, callback, context) {};


/**
 * Устанавливает родительский менеджер событий.
 * @param {ymaps.IEventManager|null=} parent Родительский менеджер событий.
 */
ymaps.IEventManager.prototype.setParent = function(parent) {};

/**
 * @interface
 * @implements {ymaps.IEventController}
 */
ymaps.IEventWorkflowController = function() {};


/**
 * Функция, вызываемая после окончания обработки события менеджером событий. Этот метод является необязательным.
 * @param {ymaps.IEventManager=} events Менеджер событий.
 * @param {String=} type Тип события.
 * @param {ymaps.IEvent=} event Событие.
 */
ymaps.IEventWorkflowController.prototype.onAfterEventFiring = function(events, type, event) {};


/**
 * Функция, вызываемая до начала обработки события менеджером событий. Этот метод является необязательным.
 * @param {ymaps.IEventManager=} events Менеджер событий.
 * @param {String=} type Тип события.
 * @param {ymaps.IEvent=} event Событие.
 */
ymaps.IEventWorkflowController.prototype.onBeforeEventFiring = function(events, type, event) {};


/**
 * Вызывается при первой подписке на указанный тип событий через указанный менеджер событий. Этот метод является необязательным. Унаследован от IEventController.
 */
ymaps.IEventWorkflowController.prototype.onStartListening = function() {};


/**
 * Вызывается, когда определённый тип событий перестаёт слушаться на указанном менеджере событий (удалена последняя подписка). Этот метод является необязательным. Унаследован от IEventController.
 */
ymaps.IEventWorkflowController.prototype.onStopListening = function() {};

/**
 * @interface
 */
ymaps.IGeocodeProvider = function() {};


/**
 * Отправляет запрос на геокодирование. Добавить функцию-обработчик для обработки результата геокодирования можно через возвращаемый объект-promise. Объект, поступающий на вход функции-обработчика может содержать поля только следующего вида: geoObjects, layers, mapState, metaData.
 * @param {String=} request Строка запроса.
 * @param {Object=} options Опции.
 * @return {ymaps.util.Promise}
 */
ymaps.IGeocodeProvider.prototype.geocode = function(request, options) {};

/**
 * @interface
 */
ymaps.IFreezable = function() {};


/**
 * Переводит объект в "замороженный" режим.
 * @return {ymaps.IFreezable}
 */
ymaps.IFreezable.prototype.freeze = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false.
 * @return {Boolean}
 */
ymaps.IFreezable.prototype.isFrozen = function() {};


/**
 * Переводит объект в активный режим.
 * @return {ymaps.IFreezable}
 */
ymaps.IFreezable.prototype.unfreeze = function() {};


/**
 * Менеджер событий объекта.
 * @type {ymaps.IEventManager}
 */
ymaps.IFreezable.prototype.events;

/**
 * @interface
 * @implements {ymaps.ILayout}
 */
ymaps.IExpandableControlLayout = function() {};


/**
 * Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout.
 */
ymaps.IExpandableControlLayout.prototype.destroy = function() {};


/**
 * Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.IExpandableControlLayout.prototype.getChildContainerElement = function() {};


/**
 * Возвращает размеры и позицию относительно родителя. Унаследован от ILayout.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IExpandableControlLayout.prototype.getClientBoundingRect = function() {};


/**
 * Возвращает объект данных макета. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.IExpandableControlLayout.prototype.getData = function() {};


/**
 * Возвращает родительский html-элемент. Унаследован от ILayout.
 * @return {HTMLElement}
 */
ymaps.IExpandableControlLayout.prototype.getParentElement = function() {};


/**
 * Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout.
 * @return {Boolean}
 */
ymaps.IExpandableControlLayout.prototype.isEmpty = function() {};


/**
 * Задает данные макета. Унаследован от ILayout.
 */
ymaps.IExpandableControlLayout.prototype.setData = function() {};


/**
 * Добавляет макет в DOM-дерево. Унаследован от ILayout.
 */
ymaps.IExpandableControlLayout.prototype.setParentElement = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IExpandableControlLayout.prototype.events;

/**
 * @interface
 * @implements {ymaps.IBaseGeometry}
 * @implements {ymaps.ICustomizable}
 */
ymaps.IGeometry = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IGeometry.prototype.getBounds = function() {};


/**
 * Возвращает текущую карту.
 * @return {ymaps.Map|null}
 */
ymaps.IGeometry.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты.
 * @param {Object=} options Хэш опций, позволяющий перекрыть часть текущих опций геометрии для данного расчета.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IGeometry.prototype.getPixelGeometry = function(options) {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.IGeometry.prototype.getType = function() {};


/**
 * Задает карту.
 * @param {ymaps.Map|null=} map Ссылка на карту.
 */
ymaps.IGeometry.prototype.setMap = function(map) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IGeometry.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IGeometry.prototype.options;

/**
 * @interface
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 */
ymaps.IGeometryEditor = function() {};


/**
 * Включает режим редактирования.
 */
ymaps.IGeometryEditor.prototype.startEditing = function() {};


/**
 * Отключает режим редактирования.
 */
ymaps.IGeometryEditor.prototype.stopEditing = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IGeometryEditor.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IGeometryEditor.prototype.options;


/**
 * Состояние редактора геометрии.
 * @type {ymaps.IDataManager}
 */
ymaps.IGeometryEditor.prototype.state;

/**
 * @interface
 * @implements {ymaps.IChildOnMap}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IDomEventEmitter}
 * @implements {ymaps.IParentOnMap}
 */
ymaps.IGeoObject = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.IGeoObject.prototype.getMap = function() {};


/**
 * Возвращает оверлей геообъекта, либо null.
 * @return {ymaps.IOverlay|null}
 */
ymaps.IGeoObject.prototype.getOverlay = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.IGeoObject.prototype.getParent = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.IGeoObject.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IGeoObject.prototype.events;


/**
 * Геометрия геообъекта.
 * @type {ymaps.IGeometry}
 */
ymaps.IGeoObject.prototype.geometry;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IGeoObject.prototype.options;


/**
 * Менеджер данных геообъекта.
 * @type {ymaps.IDataManager}
 */
ymaps.IGeoObject.prototype.properties;


/**
 * Состояние геообъекта. Определяется следующими полями: active - признак того, что на геообъекте открыт балун. hover - признак того, что в данный момент на геообъект наведен указатель мыши. drag - признак того, что геообъект перетаскивается.
 * @type {ymaps.IDataManager}
 */
ymaps.IGeoObject.prototype.state;

/**
 * @param {Object=} data Данные макета.
 * @interface
 * @implements {ymaps.ILayout}
 */
ymaps.IGroupControlLayout = function(data) {};


/**
 * Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout.
 */
ymaps.IGroupControlLayout.prototype.destroy = function() {};


/**
 * Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.IGroupControlLayout.prototype.getChildContainerElement = function() {};


/**
 * Возвращает размеры и позицию относительно родителя. Унаследован от ILayout.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IGroupControlLayout.prototype.getClientBoundingRect = function() {};


/**
 * Возвращает объект данных макета. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.IGroupControlLayout.prototype.getData = function() {};


/**
 * Возвращает родительский html-элемент. Унаследован от ILayout.
 * @return {HTMLElement}
 */
ymaps.IGroupControlLayout.prototype.getParentElement = function() {};


/**
 * Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout.
 * @return {Boolean}
 */
ymaps.IGroupControlLayout.prototype.isEmpty = function() {};


/**
 * Задает данные макета. Унаследован от ILayout.
 */
ymaps.IGroupControlLayout.prototype.setData = function() {};


/**
 * Добавляет макет в DOM-дерево. Унаследован от ILayout.
 */
ymaps.IGroupControlLayout.prototype.setParentElement = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IGroupControlLayout.prototype.events;

/**
 * @interface
 * @implements {ymaps.ICustomizable}
 */
ymaps.IHotspotObjectSource = function() {};


/**
 * Отменяет последний запрос за данными.
 */
ymaps.IHotspotObjectSource.prototype.cancelLastRequest = function() {};


/**
 * Строит массив объектов IHotspotShape, соответствующих определенному слою, тайлу и коэффициенту масштабирования карты, и передает его в функцию callback.
 * @param {ymaps.hotspot.Layer=} layer Слой активных областей.
 * @param {Array.<Number>=} tileNumber Тайловые координаты.
 * @param {Number=} zoom Коэффициент масштабирования.
 * @param {Function=} callback Функция-обработчик.
 */
ymaps.IHotspotObjectSource.prototype.requestObjects = function(layer, tileNumber, zoom, callback) {};


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IHotspotObjectSource.prototype.options;

/**
 * @interface
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IDomEventEmitter}
 */
ymaps.IHotspotShape = function() {};


/**
 * Возвращает контейнер хотспотных шейпов.
 * @return {IHotspotContainer}
 */
ymaps.IHotspotShape.prototype.getContainer = function() {};


/**
 * Метод для получения реальной геометрии объекта.
 * @return {Object}
 */
ymaps.IHotspotShape.prototype.getGeometry = function() {};


/**
 * Возвращает идентификатор объекта.
 * @return {Number}
 */
ymaps.IHotspotShape.prototype.getId = function() {};


/**
 * Возвращает данные объекта.
 * @return {Object}
 */
ymaps.IHotspotShape.prototype.getProperties = function() {};


/**
 * Возвращает пиксельную геометрию хотспотного объекта.
 * @return {ymaps.IHotspotShapeGeometry}
 */
ymaps.IHotspotShape.prototype.getRenderedGeometry = function() {};


/**
 * Метод для добавления хотспотного шейпа в контейнер.
 * @param {IHotspotContainer=} container Контейнер, в который добавляется шейп.
 */
ymaps.IHotspotShape.prototype.setContainer = function(container) {};


/**
 * Метод для задания реальной геометрии объекта.
 * @param {Object=} geometry Реальная геометрия объекта.
 */
ymaps.IHotspotShape.prototype.setGeometry = function(geometry) {};


/**
 * @param {Number=} id Идентификатор объекта.
 */
ymaps.IHotspotShape.prototype.setId = function(id) {};


/**
 * @param {Object=} properties Данные объекта.
 */
ymaps.IHotspotShape.prototype.setProperties = function(properties) {};


/**
 * @param {ymaps.IPixelGeometry=} renderedGeometry Пиксельная геометрия объекта.
 */
ymaps.IHotspotShape.prototype.setRenderedGeometry = function(renderedGeometry) {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IHotspotShape.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IHotspotShape.prototype.options;

/**
 * @interface
 * @implements {ymaps.ICustomizable}
 */
ymaps.IHotspotShapeGeometry = function() {};


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IHotspotShapeGeometry.prototype.options;

/**
 * @interface
 */
ymaps.IIterator = function() {};


/**
 * Возвращает ссылку на очередной объект списка. При первом вызове возвращает ссылку на первый элемент. Возвращает null, если достигнут конец списка.
 * @return {Object|null}
 */
ymaps.IIterator.prototype.getNext = function() {};

/**
 * @param {Object=} data Данные макета.
 * @interface
 * @implements {ymaps.IDomEventEmitter}
 */
ymaps.ILayout = function(data) {};


/**
 * Деструктор. Вызывается при завершении работы с макетом.
 */
ymaps.ILayout.prototype.destroy = function() {};


/**
 * Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы.
 * @return {Object}
 */
ymaps.ILayout.prototype.getChildContainerElement = function() {};


/**
 * Возвращает размеры и позицию относительно родителя.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ILayout.prototype.getClientBoundingRect = function() {};


/**
 * Возвращает объект данных макета.
 * @return {Object}
 */
ymaps.ILayout.prototype.getData = function() {};


/**
 * Возвращает родительский html-элемент.
 * @return {HTMLElement}
 */
ymaps.ILayout.prototype.getParentElement = function() {};


/**
 * Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие.
 * @return {Boolean}
 */
ymaps.ILayout.prototype.isEmpty = function() {};


/**
 * Задает данные макета.
 * @param {Object=} data Данные макета.
 */
ymaps.ILayout.prototype.setData = function(data) {};


/**
 * Добавляет макет в DOM-дерево.
 * @param {HTMLElement|null=} parent Родительский html-элемент. Родительский элемент должен быть добавлен в DOM-дерево. Если передан null, то элемент удаляется из DOM-дерева.
 */
ymaps.ILayout.prototype.setParentElement = function(parent) {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ILayout.prototype.events;

/**
 * @interface
 * @implements {ymaps.IChildOnMap}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 */
ymaps.ILayer = function() {};


/**
 * Необязательный метод. Возвращает яркость слоя. В зависимости от суммарной яркости слоев, добавленных на карту, выбирается цвет логотипа и копирайтов на карте.
 * @return {Number}
 */
ymaps.ILayer.prototype.getBrightness = function() {};


/**
 * Необязательный метод. Запрашивает информацию об авторских правах в указанной точке с указанным коэффициентом масштабирования. Возвращает объект-promise, который будет подтверждён и передаст в качестве результата массив строк или DOM-элементов с информацией об авторских правах.
 * @param {Array.<Number>=} coords Точка на карте, для которой запрашивается информация об авторских правах.
 * @param {Number=} zoom Уровень масштабирования, для которого запрашивается информация об авторских правах.
 * @return {ymaps.util.Promise}
 */
ymaps.ILayer.prototype.getCopyrights = function(coords, zoom) {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IParentOnMap}
 */
ymaps.ILayer.prototype.getParent = function() {};


/**
 * Необязательный метод. Определяет доступный в указанной точке диапазон уровней масштабирования. Если данные есть, то возвращенный объект-promise будет подтвержден и передаст в качестве результата массив из двух чисел - минимальный и максимальный доступный в точке уровень масштабирования. Если данных нет, то promise отклоняется с указанием ошибки.
 * @param {Array.<Number>=} point Точка
 * @return {ymaps.util.Promise}
 */
ymaps.ILayer.prototype.getZoomRange = function(point) {};


/**
 * Устанавливает родительский объект. Унаследован от IChildOnMap.
 * @return {ymaps.IChildOnMap}
 */
ymaps.ILayer.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ILayer.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.ILayer.prototype.options;

/**
 * @interface
 * @implements {ymaps.IFreezable}
 */
ymaps.ILinearRingGeometryAccess = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри контура.
 * @param {Array.<Number>=} position Координаты точки.
 * @return {Boolean}
 */
ymaps.ILinearRingGeometryAccess.prototype.contains = function(position) {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ILinearRingGeometryAccess.prototype.freeze = function() {};


/**
 * Возвращает координаты точки с заданным индексом.
 * @param {number=} index Индекс точки.
 * @return {Array.<Number>}
 */
ymaps.ILinearRingGeometryAccess.prototype.get = function(index) {};


/**
 * Создает и возвращает объект IPointGeometryAccess для заданной вершины контура.
 * @param {number=} index Индекс вершины контура.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.ILinearRingGeometryAccess.prototype.getChildGeometry = function(index) {};


/**
 * Ищет на контуре точку, ближайшую к anchorPosition.
 * @param {Array.<Number>=} anchorPosition Координаты точки, для которой расчитывается ближайшая точка на контуре.
 * @return {Object}
 */
ymaps.ILinearRingGeometryAccess.prototype.getClosest = function(anchorPosition) {};


/**
 * Возвращает массив координат геометрии.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ILinearRingGeometryAccess.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки.
 * @return {String}
 */
ymaps.ILinearRingGeometryAccess.prototype.getFillRule = function() {};


/**
 * Возвращает количество точек в геометрии.
 * @return {number}
 */
ymaps.ILinearRingGeometryAccess.prototype.getLength = function() {};


/**
 * Добавляет новую точку с заданным индексом.
 * @param {number=} index Индекс точки.
 * @param {Array.<Number>=} coordinates Координаты точки.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.ILinearRingGeometryAccess.prototype.insert = function(index, coordinates) {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.ILinearRingGeometryAccess.prototype.isFrozen = function() {};


/**
 * Удаляет точку с заданным индексом.
 * @param {number=} index Индекс точки.
 * @return {Array.<Number>}
 */
ymaps.ILinearRingGeometryAccess.prototype.remove = function(index) {};


/**
 * Задает координаты точки c заданным индексом.
 * @param {number=} index Индекс точки.
 * @param {Array.<Number>=} coordinates Координаты точки.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.ILinearRingGeometryAccess.prototype.set = function(index, coordinates) {};


/**
 * Задает массив координат геометрии.
 * @param {Array.<Array.<Number>>=} coordinates Координаты геометрии.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.ILinearRingGeometryAccess.prototype.setCoordinates = function(coordinates) {};


/**
 * Задает алгоритм заливки контура.
 * @param {String=} fillRule Идентификатор алгоритма заливки.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.ILinearRingGeometryAccess.prototype.setFillRule = function(fillRule) {};


/**
 * Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number.
 * @param {number=} index Индекс, начиная с которого производится удаление и добавление точек.
 * @param {number=} number Количество удаляемых точек.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ILinearRingGeometryAccess.prototype.splice = function(index, number) {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ILinearRingGeometryAccess.prototype.unfreeze = function() {};


/**
 * Менеджер событий объекта. Унаследовано от IFreezable.
 * @type {ymaps.IEventManager}
 */
ymaps.ILinearRingGeometryAccess.prototype.events;

/**
 * @interface
 * @implements {ymaps.IGeometry}
 * @implements {ymaps.ILineStringGeometryAccess}
 */
ymaps.ILineStringGeometry = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ILineStringGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты точки с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.ILineStringGeometry.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.ILineStringGeometry.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.ILineStringGeometry.prototype.getChildGeometry = function() {};


/**
 * Ищет на ломаной линии точку, ближайшую к anchorPosition. Унаследован от ILineStringGeometryAccess.
 * @return {Object}
 */
ymaps.ILineStringGeometry.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ILineStringGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает количество точек в геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {number}
 */
ymaps.ILineStringGeometry.prototype.getLength = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.ILineStringGeometry.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.ILineStringGeometry.prototype.getPixelGeometry = function() {};


/**
 * Возвращает строку "LineString".
 * @return {String}
 */
ymaps.ILineStringGeometry.prototype.getType = function() {};


/**
 * Добавляет новую точку с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.ILineStringGeometry.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.ILineStringGeometry.prototype.isFrozen = function() {};


/**
 * Удаляет точку с заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Number>}
 */
ymaps.ILineStringGeometry.prototype.remove = function() {};


/**
 * Задает координаты точки c заданным индексом. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.ILineStringGeometry.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от ILineStringGeometryAccess.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.ILineStringGeometry.prototype.setCoordinates = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.ILineStringGeometry.prototype.setMap = function() {};


/**
 * Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number. Унаследован от ILineStringGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ILineStringGeometry.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ILineStringGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ILineStringGeometry.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.ILineStringGeometry.prototype.options;

/**
 * @interface
 * @implements {ymaps.IEventEmitter}
 */
ymaps.IMapAction = function() {};


/**
 * Запускает движение на исполнение картой. Этот метод автоматически вызывается менеджером движений карты. С момента вызова IMapAction.begin карта слушает события IMapAction.tick и IMapAction.end и исполняет их.
 * @param {ymaps.map.action.Manager=} mapActionManager Карта, на которой исполняется движение.
 */
ymaps.IMapAction.prototype.begin = function(mapActionManager) {};


/**
 * Останавливает движение.
 */
ymaps.IMapAction.prototype.end = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IMapAction.prototype.events;

/**
 * @interface
 * @implements {ymaps.IFreezable}
 */
ymaps.ILineStringGeometryAccess = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ILineStringGeometryAccess.prototype.freeze = function() {};


/**
 * Возвращает координаты точки с заданным индексом.
 * @param {number=} index Индекс точки.
 * @return {Array.<Number>}
 */
ymaps.ILineStringGeometryAccess.prototype.get = function(index) {};


/**
 * Создает и возвращает объект IPointGeometryAccess для заданной вершины ломаной линии.
 * @param {number=} index Индекс вершины.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.ILineStringGeometryAccess.prototype.getChildGeometry = function(index) {};


/**
 * Ищет на ломаной линии точку, ближайшую к anchorPosition.
 * @param {Array.<Number>=} anchorPosition Координаты точки, для которой расчитывается ближайшая точка на ломаной.
 * @return {Object}
 */
ymaps.ILineStringGeometryAccess.prototype.getClosest = function(anchorPosition) {};


/**
 * Возвращает массив координат геометрии.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ILineStringGeometryAccess.prototype.getCoordinates = function() {};


/**
 * Возвращает количество точек в геометрии.
 * @return {number}
 */
ymaps.ILineStringGeometryAccess.prototype.getLength = function() {};


/**
 * Добавляет новую точку с заданным индексом.
 * @param {number=} index Индекс точки.
 * @param {Array.<Number>=} coordinates Координаты точки.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.ILineStringGeometryAccess.prototype.insert = function(index, coordinates) {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.ILineStringGeometryAccess.prototype.isFrozen = function() {};


/**
 * Удаляет точку с заданным индексом.
 * @param {number=} index Индекс точки.
 * @return {Array.<Number>}
 */
ymaps.ILineStringGeometryAccess.prototype.remove = function(index) {};


/**
 * Задает координаты точки c заданным индексом.
 * @param {number=} index Индекс точки.
 * @param {Array.<Number>=} coordinates Координаты точки.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.ILineStringGeometryAccess.prototype.set = function(index, coordinates) {};


/**
 * Задает массив координат геометрии.
 * @param {Array.<Array.<Number>>=} coordinates Координаты геометрии.
 * @return {ymaps.ILineStringGeometryAccess}
 */
ymaps.ILineStringGeometryAccess.prototype.setCoordinates = function(coordinates) {};


/**
 * Удаляет определенное число точек начиная с заданного индекса. При этом на место удаляемых точек могут быть добавлены новые. Координаты новых точек можно передавать дополнительными аргументами после параметра number.
 * @param {number=} index Индекс, начиная с которого производится удаление и добавление точек.
 * @param {number=} number Количество удаляемых точек.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ILineStringGeometryAccess.prototype.splice = function(index, number) {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.ILineStringGeometryAccess.prototype.unfreeze = function() {};


/**
 * Менеджер событий объекта. Унаследовано от IFreezable.
 * @type {ymaps.IEventManager}
 */
ymaps.ILineStringGeometryAccess.prototype.events;

/**
 * @interface
 */
ymaps.IMapState = function() {};


/**
 * Применяет состояние к переданной карте.
 * @param {ymaps.Map=} map Карта.
 * @return {ymaps.util.Promise}
 */
ymaps.IMapState.prototype.applyToMap = function(map) {};

/**
 * @interface
 * @implements {ymaps.ICollection}
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IParentOnMap}
 */
ymaps.IMapObjectCollection = function() {};


/**
 * Добавляет в коллекцию дочерний объект. Унаследован от ICollection.
 * @return {ymaps.ICollection}
 */
ymaps.IMapObjectCollection.prototype.add = function() {};


/**
 * Возвращает итератор по коллекции. Унаследован от ICollection.
 * @return {ymaps.IIterator}
 */
ymaps.IMapObjectCollection.prototype.getIterator = function() {};


/**
 * Возвращает ссылку на карту. Унаследован от IParentOnMap.
 * @return {ymaps.Map}
 */
ymaps.IMapObjectCollection.prototype.getMap = function() {};


/**
 * Удаляет из коллекции дочерний объект. Унаследован от ICollection.
 * @return {ymaps.ICollection}
 */
ymaps.IMapObjectCollection.prototype.remove = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IMapObjectCollection.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IMapObjectCollection.prototype.options;

/**
 * @interface
 * @implements {ymaps.IChild}
 * @implements {ymaps.IEventEmitter}
 * @implements {ymaps.IFreezable}
 */
ymaps.IOptionManager = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IOptionManager.prototype.freeze = function() {};


/**
 * Возвращает значение заданной опции в контексте существующей иерархии наследования опций. При вызове данного метода сначала происходит поиск значения в текущем менеджере опций, а затем, если значение не определено, поиск продолжается в иерархии родительских менеджеров.
 * @param {String=} key Имя опции.
 * @param {Object=} defaultValue Значение по умолчанию.
 */
ymaps.IOptionManager.prototype.get = function(key, defaultValue) {};


/**
 * Возвращает ссылку на внутренний хэш хранящий значения опций.
 * @return {Object}
 */
ymaps.IOptionManager.prototype.getAll = function() {};


/**
 * Возвращает имя менеджера опций.
 * @return {String}
 */
ymaps.IOptionManager.prototype.getName = function() {};


/**
 * Возвращает значение заданной опции, определенное на данном уровне иерархии опций, т.е. в данном менеджере.
 * @param {String=} key Имя опции.
 * @return {Object}
 */
ymaps.IOptionManager.prototype.getNative = function(key) {};


/**
 * Возвращает родительский менеджер опций.
 * @return {ymaps.IOptionManager|null}
 */
ymaps.IOptionManager.prototype.getParent = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IOptionManager.prototype.isFrozen = function() {};


/**
 * Метод, предназначенный для вызова дочерними менеджерами опций.
 * @param {String=} key Имя опции.
 * @param {String=} name Имя дочернего менеджера опций.
 * @return {Object}
 */
ymaps.IOptionManager.prototype.resolve = function(key, name) {};


/**
 * Задает имя менеджера опций.
 * @param {String=} name Имя менеджера опций.
 */
ymaps.IOptionManager.prototype.setName = function(name) {};


/**
 * Задает родительский менеджер опций.
 * @param {ymaps.IOptionManager|null=} parent Родительский менеджер опций.
 * @return {ymaps.IChild}
 */
ymaps.IOptionManager.prototype.setParent = function(parent) {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IOptionManager.prototype.unfreeze = function() {};


/**
 * Менеджер событий объекта. Унаследовано от IFreezable.
 * @type {ymaps.IEventManager}
 */
ymaps.IOptionManager.prototype.events;

/**
 * @interface
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IDomEventEmitter}
 */
ymaps.IOverlay = function() {};


/**
 * Возвращает объект данных макета.
 * @return {Object}
 */
ymaps.IOverlay.prototype.getData = function() {};


/**
 * Возвращает текущую пиксельную геометрию.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IOverlay.prototype.getGeometry = function() {};


/**
 * Возвращает ссылку на текущую карту.
 * @return {ymaps.Map|null}
 */
ymaps.IOverlay.prototype.getMap = function() {};


/**
 * Задает данные оверлея.
 * @param {Object=} data Данные оверлея.
 */
ymaps.IOverlay.prototype.setData = function(data) {};


/**
 * Задает пиксельную геометрию оверлея.
 * @param {ymaps.IPixelGeometry=} geometry Геометрия в глобальных пиксельных координатах.
 */
ymaps.IOverlay.prototype.setGeometry = function(geometry) {};


/**
 * Задает карту, на которой должен отобразиться оверлей.
 * @param {ymaps.Map|null=} map Ссылка на карту.
 */
ymaps.IOverlay.prototype.setMap = function(map) {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IOverlay.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IOverlay.prototype.options;

/**
 * @interface
 */
ymaps.IOverlayFactory = function() {};


/**
 * Создает и возвращает экземпляр оверлея на основе типа пиксельной геометрии.
 * @param {ymaps.IPixelGeometry=} pixelGeometry Пиксельная геометрия оверлея.
 * @param {Object=} data Данные оверлея.
 * @param {Object=} options Опции оверлея.
 * @return {ymaps.IOverlay}
 */
ymaps.IOverlayFactory.prototype.createOverlay = function(pixelGeometry, data, options) {};

/**
 * @param {ymaps.Map=} map Карта.
 * @interface
 * @implements {ymaps.IEventEmitter}
 * @implements {ymaps.IPositioningContext}
 */
ymaps.IPane = function(map) {};


/**
 * Преобразует клиентские пиксельные координаты в глобальные. Унаследован от IPositioningContext.
 * @return {Array.<Number>}
 */
ymaps.IPane.prototype.fromClientPixels = function() {};


/**
 * Возвращает DOM-элемент контейнера.
 * @return {HTMLElement}
 */
ymaps.IPane.prototype.getElement = function() {};


/**
 * Возвращает область показа объектов в клиентских координатах.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IPane.prototype.getViewport = function() {};


/**
 * Возвращает уровень масштабирования.
 * @return {Number}
 */
ymaps.IPane.prototype.getZoom = function() {};


/**
 * Преобразует глобальные пиксельные координаты в клиентские. Унаследован от IPositioningContext.
 * @return {Array.<Number>}
 */
ymaps.IPane.prototype.toClientPixels = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPane.prototype.events;

/**
 * @interface
 */
ymaps.IParentOnMap = function() {};


/**
 * Возвращает ссылку на карту.
 * @return {ymaps.Map}
 */
ymaps.IParentOnMap.prototype.getMap = function() {};

/**
 * @param {Array.<Number>=} coordinates Координаты центра круга.
 * @param {Object=} metaData метаданные
 * @interface
 * @implements {ymaps.IPixelGeometry}
 */
ymaps.IPixelCircleGeometry = function(coordinates, metaData) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IPixelCircleGeometry.prototype.getBounds = function() {};


/**
 * Возвращает координаты центра круга.
 * @return {Array.<Number>}
 */
ymaps.IPixelCircleGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.IPixelCircleGeometry.prototype.getMetaData = function() {};


/**
 * Возвращает радиус круга.
 * @return {Number}
 */
ymaps.IPixelCircleGeometry.prototype.getRadius = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.IPixelCircleGeometry.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelCircleGeometry.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelCircleGeometry.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPixelCircleGeometry.prototype.events;

/**
 * @param {Array.<Number>=} coordinates Координаты точки.
 * @param {Object=} metaData метаданные
 * @interface
 * @implements {ymaps.IPixelGeometry}
 */
ymaps.IPixelPointGeometry = function(coordinates, metaData) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IPixelPointGeometry.prototype.getBounds = function() {};


/**
 * Возвращает координаты точки.
 * @return {Array.<Number>}
 */
ymaps.IPixelPointGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.IPixelPointGeometry.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.IPixelPointGeometry.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelPointGeometry.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelPointGeometry.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPixelPointGeometry.prototype.events;

/**
 * @param {Array.<Array.<Number>>=} coordinates Координаты линии.
 * @param {Object=} metaData метаданные
 * @interface
 * @implements {ymaps.IPixelGeometry}
 */
ymaps.IPixelLineStringGeometry = function(coordinates, metaData) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IPixelLineStringGeometry.prototype.getBounds = function() {};


/**
 * Ищет на ломаной линии точку, ближайшую к anchorPosition.
 * @param {Array.<Number>=} anchorPosition Координаты точки, для которой расчитывается ближайшая точка на ломаной.
 * @return {Object}
 */
ymaps.IPixelLineStringGeometry.prototype.getClosest = function(anchorPosition) {};


/**
 * Возвращает координаты линии.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IPixelLineStringGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает количество точек в геометрии.
 * @return {number}
 */
ymaps.IPixelLineStringGeometry.prototype.getLength = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.IPixelLineStringGeometry.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.IPixelLineStringGeometry.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelLineStringGeometry.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelLineStringGeometry.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPixelLineStringGeometry.prototype.events;

/**
 * @interface
 * @implements {ymaps.IBaseGeometry}
 */
ymaps.IPixelGeometry = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IPixelGeometry.prototype.getBounds = function() {};


/**
 * Возвращает метаданные пиксельной геометрии.
 * @return {Object}
 */
ymaps.IPixelGeometry.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.IPixelGeometry.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии.
 * @param {Number=} coef Масштабный коэффициент.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelGeometry.prototype.scale = function(coef) {};


/**
 * Создает копию геометрии сдвинутую на заданную величину.
 * @param {Array.<Number>=} offset Величина сдвига по осям.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelGeometry.prototype.shift = function(offset) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPixelGeometry.prototype.events;

/**
 * @param {Array.<Array.<Array.<Number>>>=} coordinates Координаты многоугольника.
 * @param {String=} fillRule Строковый идентификатор, определяющий алгоритм заливки многоугольника. Может принимать одно из двух значений: evenOdd - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и подсчета количества сегментов контура в пределах заданной фигуры, которые пересекает этот луч. Если это число нечетное, точка находится внутри; если четное, точка находится снаружи. nonZero - алгоритм, определяющий, находится ли точка в области заполнения, путем рисования луча от этой точки до бесконечности в любом направлении и проверки точек, в которых сегмент фигуры пересекает этот луч. Начиная с нуля, добавляется единица каждый раз, когда сегмент пересекает луч слева направо, и вычитается единица каждый раз, когда сегмент пересекает луч справа налево. Если после подсчета пересечений результат равен нулю, точка находится снаружи контура. В противном случае она находится внутри.
 * @param {Object=} metaData метаданные
 * @interface
 * @implements {ymaps.IPixelGeometry}
 */
ymaps.IPixelPolygonGeometry = function(coordinates, fillRule, metaData) {};


/**
 * Проверяет лежит ли переданная точка внутри многоугольника.
 * @param {Array.<Number>=} position Координаты точки.
 * @return {Boolean}
 */
ymaps.IPixelPolygonGeometry.prototype.contains = function(position) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IPixelPolygonGeometry.prototype.getBounds = function() {};


/**
 * Ищет на контуре многоугольника точку, ближайшую к anchorPosition.
 * @param {Array.<Number>=} anchorPosition Координаты точки, для которой расчитывается ближайшая точка на контуре многоугольника.
 * @return {Object}
 */
ymaps.IPixelPolygonGeometry.prototype.getClosest = function(anchorPosition) {};


/**
 * Возвращает координаты многоугольника.
 * @return {Array.<Array.<Array.<Number>>>}
 */
ymaps.IPixelPolygonGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки многоугольника.
 * @return {String}
 */
ymaps.IPixelPolygonGeometry.prototype.getFillRule = function() {};


/**
 * Возвращает количество контуров в многоугольнике.
 * @return {number}
 */
ymaps.IPixelPolygonGeometry.prototype.getLength = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.IPixelPolygonGeometry.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.IPixelPolygonGeometry.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelPolygonGeometry.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelPolygonGeometry.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPixelPolygonGeometry.prototype.events;

/**
 * @param {Array.<Array.<Number>>=} coordinates Координаты двух противоположных углов прямоугольника.
 * @param {Object=} metaData метаданные
 * @interface
 * @implements {ymaps.IPixelGeometry}
 */
ymaps.IPixelRectangleGeometry = function(coordinates, metaData) {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - угол с наименьшими значениями координат относительно остальных точек области; второй элемент - угол с наибольшими значениями координат. Унаследован от IBaseGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IPixelRectangleGeometry.prototype.getBounds = function() {};


/**
 * Возвращает координаты двух противоположных углов прямоугольника.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IPixelRectangleGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает метаданные пиксельной геометрии. Унаследован от IPixelGeometry.
 * @return {Object}
 */
ymaps.IPixelRectangleGeometry.prototype.getMetaData = function() {};


/**
 * Возвращает идентификатор типа геометрии. Унаследован от IBaseGeometry.
 * @return {String}
 */
ymaps.IPixelRectangleGeometry.prototype.getType = function() {};


/**
 * Создает отмасштабированную копию геометрии. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelRectangleGeometry.prototype.scale = function() {};


/**
 * Создает копию геометрии сдвинутую на заданную величину. Унаследован от IPixelGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPixelRectangleGeometry.prototype.shift = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPixelRectangleGeometry.prototype.events;

/**
 * @interface
 * @implements {ymaps.IGeometry}
 * @implements {ymaps.IPointGeometryAccess}
 */
ymaps.IPointGeometry = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IPointGeometry.prototype.getBounds = function() {};


/**
 * Возвращает координаты точки. Унаследован от IPointGeometryAccess.
 * @return {Array.<Number>|null}
 */
ymaps.IPointGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.IPointGeometry.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPointGeometry.prototype.getPixelGeometry = function() {};


/**
 * Возвращает строку "Point".
 * @return {String}
 */
ymaps.IPointGeometry.prototype.getType = function() {};


/**
 * Задает координаты точки. Унаследован от IPointGeometryAccess.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.IPointGeometry.prototype.setCoordinates = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.IPointGeometry.prototype.setMap = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPointGeometry.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IPointGeometry.prototype.options;

/**
 * @interface
 */
ymaps.IPointGeometryAccess = function() {};


/**
 * Возвращает координаты точки.
 * @return {Array.<Number>|null}
 */
ymaps.IPointGeometryAccess.prototype.getCoordinates = function() {};


/**
 * Задает координаты точки.
 * @param {Array.<Number>|null=} coordinates Координаты точки.
 * @return {ymaps.IPointGeometryAccess}
 */
ymaps.IPointGeometryAccess.prototype.setCoordinates = function(coordinates) {};

/**
 * @interface
 * @implements {ymaps.IGeometry}
 * @implements {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometry = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри многоугольника. Унаследован от IPolygonGeometryAccess.
 * @return {Boolean}
 */
ymaps.IPolygonGeometry.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IPolygonGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты контура с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IPolygonGeometry.prototype.get = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IPolygonGeometry.prototype.getBounds = function() {};


/**
 * Создает и возвращает объект ILinearRingGeometryAccess для заданного контура. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IPolygonGeometry.prototype.getChildGeometry = function() {};


/**
 * Ищет на контуре многоугольника точку, ближайшую к anchorPosition. Унаследован от IPolygonGeometryAccess.
 * @return {Object}
 */
ymaps.IPolygonGeometry.prototype.getClosest = function() {};


/**
 * Возвращает массив координат геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<Array.<Array.<Number>>>}
 */
ymaps.IPolygonGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки. Унаследован от IPolygonGeometryAccess.
 * @return {String}
 */
ymaps.IPolygonGeometry.prototype.getFillRule = function() {};


/**
 * Возвращает количество контуров в геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {number}
 */
ymaps.IPolygonGeometry.prototype.getLength = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.IPolygonGeometry.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IPolygonGeometry.prototype.getPixelGeometry = function() {};


/**
 * Возвращает строку "Polygon".
 * @return {String}
 */
ymaps.IPolygonGeometry.prototype.getType = function() {};


/**
 * Добавляет новый контур с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometry.prototype.insert = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IPolygonGeometry.prototype.isFrozen = function() {};


/**
 * Удаляет контур с заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IPolygonGeometry.prototype.remove = function() {};


/**
 * Задает координаты контура c заданным индексом. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometry.prototype.set = function() {};


/**
 * Задает массив координат геометрии. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometry.prototype.setCoordinates = function() {};


/**
 * Задает алгоритм заливки многоугольника. Унаследован от IPolygonGeometryAccess.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometry.prototype.setFillRule = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.IPolygonGeometry.prototype.setMap = function() {};


/**
 * Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number. Унаследован от IPolygonGeometryAccess.
 * @return {Array.<ymaps.ILinearRingGeometryAccess>}
 */
ymaps.IPolygonGeometry.prototype.splice = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IPolygonGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IPolygonGeometry.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IPolygonGeometry.prototype.options;

/**
 * @interface
 */
ymaps.IProjection = function() {};


/**
 * Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции.
 * @param {Array.<Number>=} globalPixelPoint Точка в пиксельных координатах.
 * @param {Number=} zoom Уровень масштабирования.
 * @return {Array.<Number>}
 */
ymaps.IProjection.prototype.fromGlobalPixels = function(globalPixelPoint, zoom) {};


/**
 * Возвращает координатную систему, используемую проекцией. Необязательный метод. В случае его отсутствия будет использована координатная система coordSystem.cartesian.
 * @return {ymaps.ICoordSystem}
 */
ymaps.IProjection.prototype.getCoordSystem = function() {};


/**
 * Показатель зацикленности проекции.
 * @return {Array.<Boolean>}
 */
ymaps.IProjection.prototype.isCycled = function() {};


/**
 * Преобразует координаты проекции в глобальные пиксельные на указанном уровне масштабирования.
 * @param {Array.<Number>=} coordPoint Точка в координатах проекции.
 * @param {Number=} zoom Уровень масштабирования.
 * @return {Array.<Number>}
 */
ymaps.IProjection.prototype.toGlobalPixels = function(coordPoint, zoom) {};

/**
 * @interface
 * @implements {ymaps.IGeometry}
 * @implements {ymaps.IRectangleGeometryAccess}
 */
ymaps.IRectangleGeometry = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {Boolean}
 */
ymaps.IRectangleGeometry.prototype.contains = function() {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IRectangleGeometry.prototype.freeze = function() {};


/**
 * Возвращает координаты двух противоположных углов области, охватывающей геометрию. Первый элемент массива - юго-западный угол области; второй элемент - северо-восточный угол соответственно. Унаследован от IGeometry.
 * @return {Array.<Array.<Number>>|null}
 */
ymaps.IRectangleGeometry.prototype.getBounds = function() {};


/**
 * Ищет на контуре прямоугольника точку, ближайшую к anchorPosition. Унаследован от IRectangleGeometryAccess.
 * @return {Object}
 */
ymaps.IRectangleGeometry.prototype.getClosest = function() {};


/**
 * Возвращает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.IRectangleGeometry.prototype.getCoordinates = function() {};


/**
 * Возвращает текущую карту. Унаследован от IGeometry.
 * @return {ymaps.Map|null}
 */
ymaps.IRectangleGeometry.prototype.getMap = function() {};


/**
 * Возвращает пиксельную геометрию, соответствующую данной геометрии, ее опциям и состоянию карты. Унаследован от IGeometry.
 * @return {ymaps.IPixelGeometry}
 */
ymaps.IRectangleGeometry.prototype.getPixelGeometry = function() {};


/**
 * Возвращает строку "Rectangle".
 * @return {String}
 */
ymaps.IRectangleGeometry.prototype.getType = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IRectangleGeometry.prototype.isFrozen = function() {};


/**
 * Задает координаты двух противоположных углов прямоугольника. Унаследован от IRectangleGeometryAccess.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.IRectangleGeometry.prototype.setCoordinates = function() {};


/**
 * Задает карту. Унаследован от IGeometry.
 */
ymaps.IRectangleGeometry.prototype.setMap = function() {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IRectangleGeometry.prototype.unfreeze = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IRectangleGeometry.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.IRectangleGeometry.prototype.options;

/**
 * @interface
 */
ymaps.IPositioningContext = function() {};


/**
 * Преобразует клиентские пиксельные координаты в глобальные.
 * @param {Array.<Number>=} clientPixelPoint Клиентские пиксельные координаты.
 * @return {Array.<Number>}
 */
ymaps.IPositioningContext.prototype.fromClientPixels = function(clientPixelPoint) {};


/**
 * Возвращает текущий уровень масштабирования, в котором работает контекст позиционирования.
 * @return {Number}
 */
ymaps.IPositioningContext.prototype.getZoom = function() {};


/**
 * Преобразует глобальные пиксельные координаты в клиентские.
 * @param {Array.<Number>=} globalPixelPoint Глобальные пиксельные координаты.
 * @return {Array.<Number>}
 */
ymaps.IPositioningContext.prototype.toClientPixels = function(globalPixelPoint) {};

/**
 * @interface
 * @implements {ymaps.IExpandableControlLayout}
 */
ymaps.ISearchControlLayout = function() {};


/**
 * Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout.
 */
ymaps.ISearchControlLayout.prototype.destroy = function() {};


/**
 * Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.ISearchControlLayout.prototype.getChildContainerElement = function() {};


/**
 * Возвращает размеры и позицию относительно родителя. Унаследован от ILayout.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ISearchControlLayout.prototype.getClientBoundingRect = function() {};


/**
 * Возвращает объект данных макета. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.ISearchControlLayout.prototype.getData = function() {};


/**
 * Возвращает родительский html-элемент. Унаследован от ILayout.
 * @return {HTMLElement}
 */
ymaps.ISearchControlLayout.prototype.getParentElement = function() {};


/**
 * Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout.
 * @return {Boolean}
 */
ymaps.ISearchControlLayout.prototype.isEmpty = function() {};


/**
 * Задает данные макета. Унаследован от ILayout.
 */
ymaps.ISearchControlLayout.prototype.setData = function() {};


/**
 * Добавляет макет в DOM-дерево. Унаследован от ILayout.
 */
ymaps.ISearchControlLayout.prototype.setParentElement = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ISearchControlLayout.prototype.events;

/**
 * @interface
 * @implements {ymaps.IFreezable}
 */
ymaps.IRectangleGeometryAccess = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри прямоугольника.
 * @param {Array.<Number>=} position Координаты точки.
 * @return {Boolean}
 */
ymaps.IRectangleGeometryAccess.prototype.contains = function(position) {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IRectangleGeometryAccess.prototype.freeze = function() {};


/**
 * Ищет на контуре прямоугольника точку, ближайшую к anchorPosition.
 * @param {Array.<Number>=} anchorPosition Координаты точки, для которой расчитывается ближайшая точка на прямоугольнике.
 * @return {Object}
 */
ymaps.IRectangleGeometryAccess.prototype.getClosest = function(anchorPosition) {};


/**
 * Возвращает координаты двух противоположных углов прямоугольника.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.IRectangleGeometryAccess.prototype.getCoordinates = function() {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IRectangleGeometryAccess.prototype.isFrozen = function() {};


/**
 * Задает координаты двух противоположных углов прямоугольника.
 * @param {Array.<Array.<Number>>=} coordinates Координаты углов.
 * @return {ymaps.IRectangleGeometryAccess}
 */
ymaps.IRectangleGeometryAccess.prototype.setCoordinates = function(coordinates) {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IRectangleGeometryAccess.prototype.unfreeze = function() {};


/**
 * Менеджер событий объекта. Унаследовано от IFreezable.
 * @type {ymaps.IEventManager}
 */
ymaps.IRectangleGeometryAccess.prototype.events;

/**
 * @interface
 * @implements {ymaps.IControl}
 */
ymaps.ISelectableControl = function() {};


/**
 * Отменяет выбор элемента управления (выключает).
 */
ymaps.ISelectableControl.prototype.deselect = function() {};


/**
 * Делает элемент управления недоступным (запрещены пользовательские действия).
 */
ymaps.ISelectableControl.prototype.disable = function() {};


/**
 * Делает элемент управления доступным (разрешены пользовательские действия).
 */
ymaps.ISelectableControl.prototype.enable = function() {};


/**
 * Возвращает ссылку на родительский объект. Унаследован от IControl.
 * @return {ymaps.IControlParent}
 */
ymaps.ISelectableControl.prototype.getParent = function() {};


/**
 * Возвращает true - элемент управления доступен, false - недоступен.
 * @return {Boolean}
 */
ymaps.ISelectableControl.prototype.isEnabled = function() {};


/**
 * Возвращает true - элемент управления выбран, false - не выбран.
 * @return {Boolean}
 */
ymaps.ISelectableControl.prototype.isSelected = function() {};


/**
 * Выбирает (включает) элемент управления.
 */
ymaps.ISelectableControl.prototype.select = function() {};


/**
 * Устанавливает родительский объект. Унаследован от IControl.
 * @return {ymaps.IChildOnMap}
 */
ymaps.ISelectableControl.prototype.setParent = function() {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ISelectableControl.prototype.events;

/**
 * @interface
 * @implements {ymaps.ILayout}
 */
ymaps.ISelectableControlLayout = function() {};


/**
 * Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout.
 */
ymaps.ISelectableControlLayout.prototype.destroy = function() {};


/**
 * Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.ISelectableControlLayout.prototype.getChildContainerElement = function() {};


/**
 * Возвращает размеры и позицию относительно родителя. Унаследован от ILayout.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ISelectableControlLayout.prototype.getClientBoundingRect = function() {};


/**
 * Возвращает объект данных макета. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.ISelectableControlLayout.prototype.getData = function() {};


/**
 * Возвращает родительский html-элемент. Унаследован от ILayout.
 * @return {HTMLElement}
 */
ymaps.ISelectableControlLayout.prototype.getParentElement = function() {};


/**
 * Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout.
 * @return {Boolean}
 */
ymaps.ISelectableControlLayout.prototype.isEmpty = function() {};


/**
 * Задает данные макета. Унаследован от ILayout.
 */
ymaps.ISelectableControlLayout.prototype.setData = function() {};


/**
 * Добавляет макет в DOM-дерево. Унаследован от ILayout.
 */
ymaps.ISelectableControlLayout.prototype.setParentElement = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ISelectableControlLayout.prototype.events;

/**
 * @interface
 * @implements {ymaps.ICustomizable}
 * @implements {ymaps.IEventEmitter}
 */
ymaps.ITrafficProvider = function() {};


/**
 * Возвращает ссылку на карту.
 * @return {ymaps.Map|null}
 */
ymaps.ITrafficProvider.prototype.getMap = function() {};


/**
 * @param {ymaps.Map|null=} Ссылка на карту.
 */
ymaps.ITrafficProvider.prototype.setMap = function(Ссылка) {};


/**
 * Менеджер событий. Унаследовано от IEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ITrafficProvider.prototype.events;


/**
 * Менеджер опций. Унаследовано от ICustomizable.
 * @type {ymaps.IOptionManager}
 */
ymaps.ITrafficProvider.prototype.options;

/**
 * @interface
 * @implements {ymaps.IFreezable}
 */
ymaps.IPolygonGeometryAccess = function() {};


/**
 * Проверяет, лежит ли переданная точка внутри многоугольника.
 * @param {Array.<Number>=} position Координаты точки.
 * @return {Boolean}
 */
ymaps.IPolygonGeometryAccess.prototype.contains = function(position) {};


/**
 * Переводит объект в "замороженный" режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IPolygonGeometryAccess.prototype.freeze = function() {};


/**
 * Возвращает координаты контура с заданным индексом.
 * @param {number=} index Индекс контура.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IPolygonGeometryAccess.prototype.get = function(index) {};


/**
 * Создает и возвращает объект ILinearRingGeometryAccess для заданного контура.
 * @param {number=} index Индекс контура.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IPolygonGeometryAccess.prototype.getChildGeometry = function(index) {};


/**
 * Ищет на контуре многоугольника точку, ближайшую к anchorPosition.
 * @param {Array.<Number>=} anchorPosition Координаты точки, для которой расчитывается ближайшая точка на контуре многоугольника.
 * @return {Object}
 */
ymaps.IPolygonGeometryAccess.prototype.getClosest = function(anchorPosition) {};


/**
 * Возвращает массив координат геометрии.
 * @return {Array.<Array.<Array.<Number>>>}
 */
ymaps.IPolygonGeometryAccess.prototype.getCoordinates = function() {};


/**
 * Возвращает идентификатор алгоритма заливки.
 * @return {String}
 */
ymaps.IPolygonGeometryAccess.prototype.getFillRule = function() {};


/**
 * Возвращает количество контуров в геометрии.
 * @return {number}
 */
ymaps.IPolygonGeometryAccess.prototype.getLength = function() {};


/**
 * Добавляет новый контур с заданным индексом.
 * @param {number=} index Индекс контура.
 * @param {Array.<Array.<Number>>=} path Координаты контура.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometryAccess.prototype.insert = function(index, path) {};


/**
 * Возвращает true, если объект находится в "замороженном" режиме, иначе false. Унаследован от IFreezable.
 * @return {Boolean}
 */
ymaps.IPolygonGeometryAccess.prototype.isFrozen = function() {};


/**
 * Удаляет контур с заданным индексом.
 * @param {number=} index Индекс контура.
 * @return {ymaps.ILinearRingGeometryAccess}
 */
ymaps.IPolygonGeometryAccess.prototype.remove = function(index) {};


/**
 * Задает координаты контура c заданным индексом.
 * @param {number=} index Индекс контура.
 * @param {Array.<Array.<Number>>=} path Координаты контура.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometryAccess.prototype.set = function(index, path) {};


/**
 * Задает массив координат геометрии.
 * @param {Array.<Array.<Array.<Number>>>=} coordinates Координаты геометрии.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometryAccess.prototype.setCoordinates = function(coordinates) {};


/**
 * Задает алгоритм заливки многоугольника.
 * @param {String=} fillRule Идентификатор алгоритма заливки.
 * @return {ymaps.IPolygonGeometryAccess}
 */
ymaps.IPolygonGeometryAccess.prototype.setFillRule = function(fillRule) {};


/**
 * Удаляет определенное число контуров начиная с заданного индекса. При этом на место удаляемых контуров могут быть добавлены новые. Координаты новых контуров можно передавать дополнительными аргументами после параметра number.
 * @param {number=} index Индекс, начиная с которого производится удаление и добавление контуров.
 * @param {number=} number Количество удаляемых контуров.
 * @return {Array.<ymaps.ILinearRingGeometryAccess>}
 */
ymaps.IPolygonGeometryAccess.prototype.splice = function(index, number) {};


/**
 * Переводит объект в активный режим. Унаследован от IFreezable.
 * @return {ymaps.IFreezable}
 */
ymaps.IPolygonGeometryAccess.prototype.unfreeze = function() {};


/**
 * Менеджер событий объекта. Унаследовано от IFreezable.
 * @type {ymaps.IEventManager}
 */
ymaps.IPolygonGeometryAccess.prototype.events;

/**
 * @interface
 * @implements {ymaps.IExpandableControlLayout}
 */
ymaps.ITrafficControlLayout = function() {};


/**
 * Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout.
 */
ymaps.ITrafficControlLayout.prototype.destroy = function() {};


/**
 * Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.ITrafficControlLayout.prototype.getChildContainerElement = function() {};


/**
 * Возвращает размеры и позицию относительно родителя. Унаследован от ILayout.
 * @return {Array.<Array.<Number>>}
 */
ymaps.ITrafficControlLayout.prototype.getClientBoundingRect = function() {};


/**
 * Возвращает объект данных макета. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.ITrafficControlLayout.prototype.getData = function() {};


/**
 * Возвращает родительский html-элемент. Унаследован от ILayout.
 * @return {HTMLElement}
 */
ymaps.ITrafficControlLayout.prototype.getParentElement = function() {};


/**
 * Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout.
 * @return {Boolean}
 */
ymaps.ITrafficControlLayout.prototype.isEmpty = function() {};


/**
 * Задает данные макета. Унаследован от ILayout.
 */
ymaps.ITrafficControlLayout.prototype.setData = function() {};


/**
 * Добавляет макет в DOM-дерево. Унаследован от ILayout.
 */
ymaps.ITrafficControlLayout.prototype.setParentElement = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.ITrafficControlLayout.prototype.events;

/**
 * @interface
 * @implements {ymaps.ILayout}
 */
ymaps.IZoomControlLayout = function() {};


/**
 * Деструктор. Вызывается при завершении работы с макетом. Унаследован от ILayout.
 */
ymaps.IZoomControlLayout.prototype.destroy = function() {};


/**
 * Возвращает ссылку на DOM-элемент, в который должны быть добавлены дочерние элементы. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.IZoomControlLayout.prototype.getChildContainerElement = function() {};


/**
 * Возвращает размеры и позицию относительно родителя. Унаследован от ILayout.
 * @return {Array.<Array.<Number>>}
 */
ymaps.IZoomControlLayout.prototype.getClientBoundingRect = function() {};


/**
 * Возвращает объект данных макета. Унаследован от ILayout.
 * @return {Object}
 */
ymaps.IZoomControlLayout.prototype.getData = function() {};


/**
 * Возвращает родительский html-элемент. Унаследован от ILayout.
 * @return {HTMLElement}
 */
ymaps.IZoomControlLayout.prototype.getParentElement = function() {};


/**
 * Возвращает признак того, что макет пуст, т.е. не имеет содержимого. Данный признак используется для сокрытия пустых объектов, таких как хинт, балун и другие. Унаследован от ILayout.
 * @return {Boolean}
 */
ymaps.IZoomControlLayout.prototype.isEmpty = function() {};


/**
 * Задает данные макета. Унаследован от ILayout.
 */
ymaps.IZoomControlLayout.prototype.setData = function() {};


/**
 * Добавляет макет в DOM-дерево. Унаследован от ILayout.
 */
ymaps.IZoomControlLayout.prototype.setParentElement = function() {};


/**
 * Менеджер событий. Унаследовано от IDomEventEmitter.
 * @type {ymaps.IEventManager}
 */
ymaps.IZoomControlLayout.prototype.events;

